// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR PChannel::PChannel(
    ::_pbi::ConstantInitialized)
  : channelid_(0)
  , maxplayercount_(0)
  , currentplayercount_(0){}
struct PChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PChannelDefaultTypeInternal() {}
  union {
    PChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PChannelDefaultTypeInternal _PChannel_default_instance_;
PROTOBUF_CONSTEXPR PRoom::PRoom(
    ::_pbi::ConstantInitialized)
  : benlist_()
  , playerlist_()
  , roomname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , roomid_(0)
  , maxplayercount_(0)
  , leaderid_(int64_t{0})
  , currentplayercount_(0){}
struct PRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRoomDefaultTypeInternal() {}
  union {
    PRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRoomDefaultTypeInternal _PRoom_default_instance_;
PROTOBUF_CONSTEXPR PPlayer::PPlayer(
    ::_pbi::ConstantInitialized)
  : playerid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , level_(0)
  , exp_(0)
  , id_(int64_t{0})
  , channelid_(0)
  , roomid_(0)
  , roomidx_(0)
  , ready_(false)
  , speed_(0)
  , maxbombcount_(0)
  , bombcount_(0)
  , bombrange_(0){}
struct PPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPlayerDefaultTypeInternal() {}
  union {
    PPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPlayerDefaultTypeInternal _PPlayer_default_instance_;
PROTOBUF_CONSTEXPR PWorldPos::PWorldPos(
    ::_pbi::ConstantInitialized)
  : posx_(0)
  , posy_(0){}
struct PWorldPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PWorldPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PWorldPosDefaultTypeInternal() {}
  union {
    PWorldPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PWorldPosDefaultTypeInternal _PWorldPos_default_instance_;
PROTOBUF_CONSTEXPR PCellPos::PCellPos(
    ::_pbi::ConstantInitialized)
  : posx_(0)
  , posy_(0){}
struct PCellPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PCellPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PCellPosDefaultTypeInternal() {}
  union {
    PCellPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PCellPosDefaultTypeInternal _PCellPos_default_instance_;
PROTOBUF_CONSTEXPR PPositionInfo::PPositionInfo(
    ::_pbi::ConstantInitialized)
  : worldpos_(nullptr)
  , cellpos_(nullptr)
  , state_(0)

  , movedir_(0)
{}
struct PPositionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPositionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPositionInfoDefaultTypeInternal() {}
  union {
    PPositionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPositionInfoDefaultTypeInternal _PPositionInfo_default_instance_;
PROTOBUF_CONSTEXPR PRoomStart::PRoomStart(
    ::_pbi::ConstantInitialized)
  : playerinfo_(nullptr)
  , posinfo_(nullptr){}
struct PRoomStartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRoomStartDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRoomStartDefaultTypeInternal() {}
  union {
    PRoomStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRoomStartDefaultTypeInternal _PRoomStart_default_instance_;
PROTOBUF_CONSTEXPR PRoomEnd::PRoomEnd(
    ::_pbi::ConstantInitialized)
  : player_(nullptr)
  , rank_(0){}
struct PRoomEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRoomEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRoomEndDefaultTypeInternal() {}
  union {
    PRoomEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRoomEndDefaultTypeInternal _PRoomEnd_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PChannel, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PChannel, maxplayercount_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PChannel, currentplayercount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, roomname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, leaderid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, maxplayercount_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, currentplayercount_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, benlist_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoom, playerlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, exp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, roomidx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, ready_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, speed_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, maxbombcount_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, bombcount_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPlayer, bombrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PWorldPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PWorldPos, posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PWorldPos, posy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PCellPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PCellPos, posx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PCellPos, posy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PPositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PPositionInfo, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPositionInfo, movedir_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPositionInfo, worldpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PPositionInfo, cellpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoomStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoomStart, playerinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoomStart, posinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoomEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoomEnd, rank_),
  PROTOBUF_FIELD_OFFSET(::Protocol::PRoomEnd, player_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::PChannel)},
  { 9, -1, -1, sizeof(::Protocol::PRoom)},
  { 22, -1, -1, sizeof(::Protocol::PPlayer)},
  { 41, -1, -1, sizeof(::Protocol::PWorldPos)},
  { 49, -1, -1, sizeof(::Protocol::PCellPos)},
  { 57, -1, -1, sizeof(::Protocol::PPositionInfo)},
  { 67, -1, -1, sizeof(::Protocol::PRoomStart)},
  { 75, -1, -1, sizeof(::Protocol::PRoomEnd)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_PChannel_default_instance_._instance,
  &::Protocol::_PRoom_default_instance_._instance,
  &::Protocol::_PPlayer_default_instance_._instance,
  &::Protocol::_PWorldPos_default_instance_._instance,
  &::Protocol::_PCellPos_default_instance_._instance,
  &::Protocol::_PPositionInfo_default_instance_._instance,
  &::Protocol::_PRoomStart_default_instance_._instance,
  &::Protocol::_PRoomEnd_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"Q\n\010"
  "PChannel\022\021\n\tchannelId\030\001 \001(\005\022\026\n\016maxPlayer"
  "Count\030\002 \001(\005\022\032\n\022currentPlayerCount\030\003 \001(\005\""
  "\247\001\n\005PRoom\022\016\n\006roomId\030\001 \001(\005\022\020\n\010roomName\030\002 "
  "\001(\t\022\020\n\010leaderId\030\003 \001(\003\022\026\n\016maxPlayerCount\030"
  "\004 \001(\005\022\032\n\022currentPlayerCount\030\005 \001(\005\022\017\n\007ben"
  "List\030\006 \003(\010\022%\n\nplayerList\030\007 \003(\0132\021.Protoco"
  "l.PPlayer\"\337\001\n\007PPlayer\022\020\n\010playerId\030\001 \001(\t\022"
  "\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\005\022\013\n\003exp\030\004 \001("
  "\002\022\n\n\002id\030\005 \001(\003\022\021\n\tchannelId\030\006 \001(\005\022\016\n\006room"
  "Id\030\007 \001(\005\022\017\n\007roomIdx\030\010 \001(\005\022\r\n\005ready\030\t \001(\010"
  "\022\r\n\005speed\030\n \001(\002\022\024\n\014maxBombCount\030\013 \001(\005\022\021\n"
  "\tbombCount\030\014 \001(\005\022\021\n\tbombRange\030\r \001(\005\"\'\n\tP"
  "WorldPos\022\014\n\004posX\030\001 \001(\002\022\014\n\004posY\030\002 \001(\002\"&\n\010"
  "PCellPos\022\014\n\004posX\030\001 \001(\005\022\014\n\004posY\030\002 \001(\005\"\247\001\n"
  "\rPPositionInfo\022%\n\005state\030\001 \001(\0162\026.Protocol"
  ".PPlayerState\022#\n\007moveDir\030\002 \001(\0162\022.Protoco"
  "l.PMoveDir\022%\n\010worldPos\030\003 \001(\0132\023.Protocol."
  "PWorldPos\022#\n\007cellPos\030\004 \001(\0132\022.Protocol.PC"
  "ellPos\"]\n\nPRoomStart\022%\n\nplayerInfo\030\001 \001(\013"
  "2\021.Protocol.PPlayer\022(\n\007posInfo\030\002 \001(\0132\027.P"
  "rotocol.PPositionInfo\";\n\010PRoomEnd\022\014\n\004ran"
  "k\030\001 \001(\005\022!\n\006player\030\002 \001(\0132\021.Protocol.PPlay"
  "erb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 930, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class PChannel::_Internal {
 public:
};

PChannel::PChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PChannel)
}
PChannel::PChannel(const PChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channelid_, &from.channelid_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentplayercount_) -
    reinterpret_cast<char*>(&channelid_)) + sizeof(currentplayercount_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PChannel)
}

inline void PChannel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channelid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currentplayercount_) -
    reinterpret_cast<char*>(&channelid_)) + sizeof(currentplayercount_));
}

PChannel::~PChannel() {
  // @@protoc_insertion_point(destructor:Protocol.PChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channelid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentplayercount_) -
      reinterpret_cast<char*>(&channelid_)) + sizeof(currentplayercount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxPlayerCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          maxplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentPlayerCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          currentplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channelid(), target);
  }

  // int32 maxPlayerCount = 2;
  if (this->_internal_maxplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxplayercount(), target);
  }

  // int32 currentPlayerCount = 3;
  if (this->_internal_currentplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_currentplayercount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PChannel)
  return target;
}

size_t PChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  // int32 maxPlayerCount = 2;
  if (this->_internal_maxplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxplayercount());
  }

  // int32 currentPlayerCount = 3;
  if (this->_internal_currentplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentplayercount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PChannel::GetClassData() const { return &_class_data_; }

void PChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PChannel *>(to)->MergeFrom(
      static_cast<const PChannel &>(from));
}


void PChannel::MergeFrom(const PChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PChannel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_maxplayercount() != 0) {
    _internal_set_maxplayercount(from._internal_maxplayercount());
  }
  if (from._internal_currentplayercount() != 0) {
    _internal_set_currentplayercount(from._internal_currentplayercount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PChannel::CopyFrom(const PChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PChannel::IsInitialized() const {
  return true;
}

void PChannel::InternalSwap(PChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PChannel, currentplayercount_)
      + sizeof(PChannel::currentplayercount_)
      - PROTOBUF_FIELD_OFFSET(PChannel, channelid_)>(
          reinterpret_cast<char*>(&channelid_),
          reinterpret_cast<char*>(&other->channelid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class PRoom::_Internal {
 public:
};

PRoom::PRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  benlist_(arena),
  playerlist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PRoom)
}
PRoom::PRoom(const PRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      benlist_(from.benlist_),
      playerlist_(from.playerlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    roomname_.Set(from._internal_roomname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&currentplayercount_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(currentplayercount_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PRoom)
}

inline void PRoom::SharedCtor() {
roomname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roomid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&currentplayercount_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(currentplayercount_));
}

PRoom::~PRoom() {
  // @@protoc_insertion_point(destructor:Protocol.PRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.Destroy();
}

void PRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  benlist_.Clear();
  playerlist_.Clear();
  roomname_.ClearToEmpty();
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currentplayercount_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(currentplayercount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string roomName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_roomname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.PRoom.roomName"));
        } else
          goto handle_unusual;
        continue;
      // int64 leaderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxPlayerCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          maxplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 currentPlayerCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          currentplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool benList = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_benlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_benlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PPlayer playerList = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // string roomName = 2;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.PRoom.roomName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_roomname(), target);
  }

  // int64 leaderId = 3;
  if (this->_internal_leaderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_leaderid(), target);
  }

  // int32 maxPlayerCount = 4;
  if (this->_internal_maxplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_maxplayercount(), target);
  }

  // int32 currentPlayerCount = 5;
  if (this->_internal_currentplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_currentplayercount(), target);
  }

  // repeated bool benList = 6;
  if (this->_internal_benlist_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_benlist(), target);
  }

  // repeated .Protocol.PPlayer playerList = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PRoom)
  return target;
}

size_t PRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool benList = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_benlist_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .Protocol.PPlayer playerList = 7;
  total_size += 1UL * this->_internal_playerlist_size();
  for (const auto& msg : this->playerlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string roomName = 2;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  // int32 maxPlayerCount = 4;
  if (this->_internal_maxplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxplayercount());
  }

  // int64 leaderId = 3;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_leaderid());
  }

  // int32 currentPlayerCount = 5;
  if (this->_internal_currentplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currentplayercount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRoom::GetClassData() const { return &_class_data_; }

void PRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PRoom *>(to)->MergeFrom(
      static_cast<const PRoom &>(from));
}


void PRoom::MergeFrom(const PRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PRoom)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  benlist_.MergeFrom(from.benlist_);
  playerlist_.MergeFrom(from.playerlist_);
  if (!from._internal_roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_maxplayercount() != 0) {
    _internal_set_maxplayercount(from._internal_maxplayercount());
  }
  if (from._internal_leaderid() != 0) {
    _internal_set_leaderid(from._internal_leaderid());
  }
  if (from._internal_currentplayercount() != 0) {
    _internal_set_currentplayercount(from._internal_currentplayercount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRoom::CopyFrom(const PRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoom::IsInitialized() const {
  return true;
}

void PRoom::InternalSwap(PRoom* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  benlist_.InternalSwap(&other->benlist_);
  playerlist_.InternalSwap(&other->playerlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomname_, lhs_arena,
      &other->roomname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRoom, currentplayercount_)
      + sizeof(PRoom::currentplayercount_)
      - PROTOBUF_FIELD_OFFSET(PRoom, roomid_)>(
          reinterpret_cast<char*>(&roomid_),
          reinterpret_cast<char*>(&other->roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class PPlayer::_Internal {
 public:
};

PPlayer::PPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PPlayer)
}
PPlayer::PPlayer(const PPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    playerid_.Set(from._internal_playerid(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&bombrange_) -
    reinterpret_cast<char*>(&level_)) + sizeof(bombrange_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PPlayer)
}

inline void PPlayer::SharedCtor() {
playerid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playerid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bombrange_) -
    reinterpret_cast<char*>(&level_)) + sizeof(bombrange_));
}

PPlayer::~PPlayer() {
  // @@protoc_insertion_point(destructor:Protocol.PPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playerid_.Destroy();
  name_.Destroy();
}

void PPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerid_.ClearToEmpty();
  name_.ClearToEmpty();
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bombrange_) -
      reinterpret_cast<char*>(&level_)) + sizeof(bombrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.PPlayer.playerId"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.PPlayer.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roomId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roomIdx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          roomidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ready = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 maxBombCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          maxbombcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bombCount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          bombcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bombRange = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          bombrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.PPlayer.playerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.PPlayer.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_exp(), target);
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  // int32 channelId = 6;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_channelid(), target);
  }

  // int32 roomId = 7;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_roomid(), target);
  }

  // int32 roomIdx = 8;
  if (this->_internal_roomidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_roomidx(), target);
  }

  // bool ready = 9;
  if (this->_internal_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_ready(), target);
  }

  // float speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_speed(), target);
  }

  // int32 maxBombCount = 11;
  if (this->_internal_maxbombcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_maxbombcount(), target);
  }

  // int32 bombCount = 12;
  if (this->_internal_bombcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_bombcount(), target);
  }

  // int32 bombRange = 13;
  if (this->_internal_bombrange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_bombrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PPlayer)
  return target;
}

size_t PPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // float exp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = this->_internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    total_size += 1 + 4;
  }

  // int64 id = 5;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int32 channelId = 6;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  // int32 roomId = 7;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  // int32 roomIdx = 8;
  if (this->_internal_roomidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomidx());
  }

  // bool ready = 9;
  if (this->_internal_ready() != 0) {
    total_size += 1 + 1;
  }

  // float speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // int32 maxBombCount = 11;
  if (this->_internal_maxbombcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxbombcount());
  }

  // int32 bombCount = 12;
  if (this->_internal_bombcount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bombcount());
  }

  // int32 bombRange = 13;
  if (this->_internal_bombrange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bombrange());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPlayer::GetClassData() const { return &_class_data_; }

void PPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PPlayer *>(to)->MergeFrom(
      static_cast<const PPlayer &>(from));
}


void PPlayer::MergeFrom(const PPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_exp = from._internal_exp();
  uint32_t raw_exp;
  memcpy(&raw_exp, &tmp_exp, sizeof(tmp_exp));
  if (raw_exp != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_roomidx() != 0) {
    _internal_set_roomidx(from._internal_roomidx());
  }
  if (from._internal_ready() != 0) {
    _internal_set_ready(from._internal_ready());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  if (from._internal_maxbombcount() != 0) {
    _internal_set_maxbombcount(from._internal_maxbombcount());
  }
  if (from._internal_bombcount() != 0) {
    _internal_set_bombcount(from._internal_bombcount());
  }
  if (from._internal_bombrange() != 0) {
    _internal_set_bombrange(from._internal_bombrange());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPlayer::CopyFrom(const PPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPlayer::IsInitialized() const {
  return true;
}

void PPlayer::InternalSwap(PPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &playerid_, lhs_arena,
      &other->playerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PPlayer, bombrange_)
      + sizeof(PPlayer::bombrange_)
      - PROTOBUF_FIELD_OFFSET(PPlayer, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class PWorldPos::_Internal {
 public:
};

PWorldPos::PWorldPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PWorldPos)
}
PWorldPos::PWorldPos(const PWorldPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(posy_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PWorldPos)
}

inline void PWorldPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(posy_));
}

PWorldPos::~PWorldPos() {
  // @@protoc_insertion_point(destructor:Protocol.PWorldPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PWorldPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PWorldPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PWorldPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PWorldPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posy_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(posy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PWorldPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PWorldPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PWorldPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float posX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_posx(), target);
  }

  // float posY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_posy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PWorldPos)
  return target;
}

size_t PWorldPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PWorldPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float posX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = this->_internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    total_size += 1 + 4;
  }

  // float posY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = this->_internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PWorldPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PWorldPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PWorldPos::GetClassData() const { return &_class_data_; }

void PWorldPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PWorldPos *>(to)->MergeFrom(
      static_cast<const PWorldPos &>(from));
}


void PWorldPos::MergeFrom(const PWorldPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PWorldPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posx = from._internal_posx();
  uint32_t raw_posx;
  memcpy(&raw_posx, &tmp_posx, sizeof(tmp_posx));
  if (raw_posx != 0) {
    _internal_set_posx(from._internal_posx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_posy = from._internal_posy();
  uint32_t raw_posy;
  memcpy(&raw_posy, &tmp_posy, sizeof(tmp_posy));
  if (raw_posy != 0) {
    _internal_set_posy(from._internal_posy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PWorldPos::CopyFrom(const PWorldPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PWorldPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWorldPos::IsInitialized() const {
  return true;
}

void PWorldPos::InternalSwap(PWorldPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PWorldPos, posy_)
      + sizeof(PWorldPos::posy_)
      - PROTOBUF_FIELD_OFFSET(PWorldPos, posx_)>(
          reinterpret_cast<char*>(&posx_),
          reinterpret_cast<char*>(&other->posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PWorldPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class PCellPos::_Internal {
 public:
};

PCellPos::PCellPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PCellPos)
}
PCellPos::PCellPos(const PCellPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&posx_, &from.posx_,
    static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(posy_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PCellPos)
}

inline void PCellPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&posx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&posy_) -
    reinterpret_cast<char*>(&posx_)) + sizeof(posy_));
}

PCellPos::~PCellPos() {
  // @@protoc_insertion_point(destructor:Protocol.PCellPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PCellPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PCellPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PCellPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PCellPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&posx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posy_) -
      reinterpret_cast<char*>(&posx_)) + sizeof(posy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PCellPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 posX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 posY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PCellPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PCellPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 posX = 1;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_posx(), target);
  }

  // int32 posY = 2;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_posy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PCellPos)
  return target;
}

size_t PCellPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PCellPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 posX = 1;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posx());
  }

  // int32 posY = 2;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PCellPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PCellPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PCellPos::GetClassData() const { return &_class_data_; }

void PCellPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PCellPos *>(to)->MergeFrom(
      static_cast<const PCellPos &>(from));
}


void PCellPos::MergeFrom(const PCellPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PCellPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_posx() != 0) {
    _internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _internal_set_posy(from._internal_posy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PCellPos::CopyFrom(const PCellPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PCellPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCellPos::IsInitialized() const {
  return true;
}

void PCellPos::InternalSwap(PCellPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PCellPos, posy_)
      + sizeof(PCellPos::posy_)
      - PROTOBUF_FIELD_OFFSET(PCellPos, posx_)>(
          reinterpret_cast<char*>(&posx_),
          reinterpret_cast<char*>(&other->posx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PCellPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// ===================================================================

class PPositionInfo::_Internal {
 public:
  static const ::Protocol::PWorldPos& worldpos(const PPositionInfo* msg);
  static const ::Protocol::PCellPos& cellpos(const PPositionInfo* msg);
};

const ::Protocol::PWorldPos&
PPositionInfo::_Internal::worldpos(const PPositionInfo* msg) {
  return *msg->worldpos_;
}
const ::Protocol::PCellPos&
PPositionInfo::_Internal::cellpos(const PPositionInfo* msg) {
  return *msg->cellpos_;
}
PPositionInfo::PPositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PPositionInfo)
}
PPositionInfo::PPositionInfo(const PPositionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_worldpos()) {
    worldpos_ = new ::Protocol::PWorldPos(*from.worldpos_);
  } else {
    worldpos_ = nullptr;
  }
  if (from._internal_has_cellpos()) {
    cellpos_ = new ::Protocol::PCellPos(*from.cellpos_);
  } else {
    cellpos_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&movedir_) -
    reinterpret_cast<char*>(&state_)) + sizeof(movedir_));
  // @@protoc_insertion_point(copy_constructor:Protocol.PPositionInfo)
}

inline void PPositionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&worldpos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&movedir_) -
    reinterpret_cast<char*>(&worldpos_)) + sizeof(movedir_));
}

PPositionInfo::~PPositionInfo() {
  // @@protoc_insertion_point(destructor:Protocol.PPositionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPositionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete worldpos_;
  if (this != internal_default_instance()) delete cellpos_;
}

void PPositionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PPositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PPositionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && worldpos_ != nullptr) {
    delete worldpos_;
  }
  worldpos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&movedir_) -
      reinterpret_cast<char*>(&state_)) + sizeof(movedir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPositionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayerState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::PPlayerState>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PMoveDir moveDir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_movedir(static_cast<::Protocol::PMoveDir>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PWorldPos worldPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_worldpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PCellPos cellPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPositionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PPositionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayerState state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .Protocol.PMoveDir moveDir = 2;
  if (this->_internal_movedir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_movedir(), target);
  }

  // .Protocol.PWorldPos worldPos = 3;
  if (this->_internal_has_worldpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::worldpos(this),
        _Internal::worldpos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PCellPos cellPos = 4;
  if (this->_internal_has_cellpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cellpos(this),
        _Internal::cellpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PPositionInfo)
  return target;
}

size_t PPositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PPositionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PWorldPos worldPos = 3;
  if (this->_internal_has_worldpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *worldpos_);
  }

  // .Protocol.PCellPos cellPos = 4;
  if (this->_internal_has_cellpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellpos_);
  }

  // .Protocol.PPlayerState state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .Protocol.PMoveDir moveDir = 2;
  if (this->_internal_movedir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_movedir());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPositionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PPositionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPositionInfo::GetClassData() const { return &_class_data_; }

void PPositionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PPositionInfo *>(to)->MergeFrom(
      static_cast<const PPositionInfo &>(from));
}


void PPositionInfo::MergeFrom(const PPositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_worldpos()) {
    _internal_mutable_worldpos()->::Protocol::PWorldPos::MergeFrom(from._internal_worldpos());
  }
  if (from._internal_has_cellpos()) {
    _internal_mutable_cellpos()->::Protocol::PCellPos::MergeFrom(from._internal_cellpos());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_movedir() != 0) {
    _internal_set_movedir(from._internal_movedir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPositionInfo::CopyFrom(const PPositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPositionInfo::IsInitialized() const {
  return true;
}

void PPositionInfo::InternalSwap(PPositionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PPositionInfo, movedir_)
      + sizeof(PPositionInfo::movedir_)
      - PROTOBUF_FIELD_OFFSET(PPositionInfo, worldpos_)>(
          reinterpret_cast<char*>(&worldpos_),
          reinterpret_cast<char*>(&other->worldpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PPositionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[5]);
}

// ===================================================================

class PRoomStart::_Internal {
 public:
  static const ::Protocol::PPlayer& playerinfo(const PRoomStart* msg);
  static const ::Protocol::PPositionInfo& posinfo(const PRoomStart* msg);
};

const ::Protocol::PPlayer&
PRoomStart::_Internal::playerinfo(const PRoomStart* msg) {
  return *msg->playerinfo_;
}
const ::Protocol::PPositionInfo&
PRoomStart::_Internal::posinfo(const PRoomStart* msg) {
  return *msg->posinfo_;
}
PRoomStart::PRoomStart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PRoomStart)
}
PRoomStart::PRoomStart(const PRoomStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::Protocol::PPlayer(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::Protocol::PPositionInfo(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.PRoomStart)
}

inline void PRoomStart::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&posinfo_) -
    reinterpret_cast<char*>(&playerinfo_)) + sizeof(posinfo_));
}

PRoomStart::~PRoomStart() {
  // @@protoc_insertion_point(destructor:Protocol.PRoomStart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRoomStart::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerinfo_;
  if (this != internal_default_instance()) delete posinfo_;
}

void PRoomStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PRoomStart::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PRoomStart)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRoomStart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayer playerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PPositionInfo posInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PRoomStart::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PRoomStart)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayer playerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PPositionInfo posInfo = 2;
  if (this->_internal_has_posinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::posinfo(this),
        _Internal::posinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PRoomStart)
  return target;
}

size_t PRoomStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PRoomStart)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPlayer playerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  // .Protocol.PPositionInfo posInfo = 2;
  if (this->_internal_has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRoomStart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PRoomStart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRoomStart::GetClassData() const { return &_class_data_; }

void PRoomStart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PRoomStart *>(to)->MergeFrom(
      static_cast<const PRoomStart &>(from));
}


void PRoomStart::MergeFrom(const PRoomStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PRoomStart)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _internal_mutable_playerinfo()->::Protocol::PPlayer::MergeFrom(from._internal_playerinfo());
  }
  if (from._internal_has_posinfo()) {
    _internal_mutable_posinfo()->::Protocol::PPositionInfo::MergeFrom(from._internal_posinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRoomStart::CopyFrom(const PRoomStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PRoomStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoomStart::IsInitialized() const {
  return true;
}

void PRoomStart::InternalSwap(PRoomStart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRoomStart, posinfo_)
      + sizeof(PRoomStart::posinfo_)
      - PROTOBUF_FIELD_OFFSET(PRoomStart, playerinfo_)>(
          reinterpret_cast<char*>(&playerinfo_),
          reinterpret_cast<char*>(&other->playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRoomStart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[6]);
}

// ===================================================================

class PRoomEnd::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const PRoomEnd* msg);
};

const ::Protocol::PPlayer&
PRoomEnd::_Internal::player(const PRoomEnd* msg) {
  return *msg->player_;
}
PRoomEnd::PRoomEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.PRoomEnd)
}
PRoomEnd::PRoomEnd(const PRoomEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:Protocol.PRoomEnd)
}

inline void PRoomEnd::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&player_)) + sizeof(rank_));
}

PRoomEnd::~PRoomEnd() {
  // @@protoc_insertion_point(destructor:Protocol.PRoomEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRoomEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void PRoomEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PRoomEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.PRoomEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRoomEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PPlayer player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PRoomEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.PRoomEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // .Protocol.PPlayer player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.PRoomEnd)
  return target;
}

size_t PRoomEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.PRoomEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 rank = 1;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRoomEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PRoomEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRoomEnd::GetClassData() const { return &_class_data_; }

void PRoomEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PRoomEnd *>(to)->MergeFrom(
      static_cast<const PRoomEnd &>(from));
}


void PRoomEnd::MergeFrom(const PRoomEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.PRoomEnd)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  if (from._internal_rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRoomEnd::CopyFrom(const PRoomEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.PRoomEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoomEnd::IsInitialized() const {
  return true;
}

void PRoomEnd::InternalSwap(PRoomEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRoomEnd, rank_)
      + sizeof(PRoomEnd::rank_)
      - PROTOBUF_FIELD_OFFSET(PRoomEnd, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRoomEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::PChannel*
Arena::CreateMaybeMessage< ::Protocol::PChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PRoom*
Arena::CreateMaybeMessage< ::Protocol::PRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PPlayer*
Arena::CreateMaybeMessage< ::Protocol::PPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PWorldPos*
Arena::CreateMaybeMessage< ::Protocol::PWorldPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PWorldPos >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PCellPos*
Arena::CreateMaybeMessage< ::Protocol::PCellPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PCellPos >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PPositionInfo*
Arena::CreateMaybeMessage< ::Protocol::PPositionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PPositionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PRoomStart*
Arena::CreateMaybeMessage< ::Protocol::PRoomStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PRoomStart >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::PRoomEnd*
Arena::CreateMaybeMessage< ::Protocol::PRoomEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::PRoomEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
