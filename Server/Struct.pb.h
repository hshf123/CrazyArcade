// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class CellPos;
struct CellPosDefaultTypeInternal;
extern CellPosDefaultTypeInternal _CellPos_default_instance_;
class Channel;
struct ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelInfo;
struct ChannelInfoDefaultTypeInternal;
extern ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;
class LobbyInfo;
struct LobbyInfoDefaultTypeInternal;
extern LobbyInfoDefaultTypeInternal _LobbyInfo_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PositionInfo;
struct PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomInfo;
struct RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class WorldPos;
struct WorldPosDefaultTypeInternal;
extern WorldPosDefaultTypeInternal _WorldPos_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::CellPos* Arena::CreateMaybeMessage<::Protocol::CellPos>(Arena*);
template<> ::Protocol::Channel* Arena::CreateMaybeMessage<::Protocol::Channel>(Arena*);
template<> ::Protocol::ChannelInfo* Arena::CreateMaybeMessage<::Protocol::ChannelInfo>(Arena*);
template<> ::Protocol::LobbyInfo* Arena::CreateMaybeMessage<::Protocol::LobbyInfo>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::PositionInfo* Arena::CreateMaybeMessage<::Protocol::PositionInfo>(Arena*);
template<> ::Protocol::Room* Arena::CreateMaybeMessage<::Protocol::Room>(Arena*);
template<> ::Protocol::RoomInfo* Arena::CreateMaybeMessage<::Protocol::RoomInfo>(Arena*);
template<> ::Protocol::WorldPos* Arena::CreateMaybeMessage<::Protocol::WorldPos>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  ~Channel() override;
  explicit PROTOBUF_CONSTEXPR Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Channel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Channel";
  }
  protected:
  explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kMaxPlayerCountFieldNumber = 2,
    kCurrentPlayerCountFieldNumber = 3,
  };
  // int32 channelId = 1;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // int32 maxPlayerCount = 2;
  void clear_maxplayercount();
  int32_t maxplayercount() const;
  void set_maxplayercount(int32_t value);
  private:
  int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(int32_t value);
  public:

  // int32 currentPlayerCount = 3;
  void clear_currentplayercount();
  int32_t currentplayercount() const;
  void set_currentplayercount(int32_t value);
  private:
  int32_t _internal_currentplayercount() const;
  void _internal_set_currentplayercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t channelid_;
  int32_t maxplayercount_;
  int32_t currentplayercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ChannelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChannelInfo) */ {
 public:
  inline ChannelInfo() : ChannelInfo(nullptr) {}
  ~ChannelInfo() override;
  explicit PROTOBUF_CONSTEXPR ChannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelInfo(const ChannelInfo& from);
  ChannelInfo(ChannelInfo&& from) noexcept
    : ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelInfo& operator=(ChannelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelInfo*>(
               &_ChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelInfo& a, ChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChannelInfo";
  }
  protected:
  explicit ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kChannelCountFieldNumber = 1,
  };
  // repeated .Protocol.Channel channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::Protocol::Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >*
      mutable_channels();
  private:
  const ::Protocol::Channel& _internal_channels(int index) const;
  ::Protocol::Channel* _internal_add_channels();
  public:
  const ::Protocol::Channel& channels(int index) const;
  ::Protocol::Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >&
      channels() const;

  // int32 channelCount = 1;
  void clear_channelcount();
  int32_t channelcount() const;
  void set_channelcount(int32_t value);
  private:
  int32_t _internal_channelcount() const;
  void _internal_set_channelcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel > channels_;
  int32_t channelcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Room& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 2,
    kRoomIdFieldNumber = 1,
    kMaxPlayerCountFieldNumber = 4,
    kLeaderIdFieldNumber = 3,
    kCurrentPlayerCountFieldNumber = 5,
  };
  // string roomName = 2;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // int32 roomId = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // int32 maxPlayerCount = 4;
  void clear_maxplayercount();
  int32_t maxplayercount() const;
  void set_maxplayercount(int32_t value);
  private:
  int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(int32_t value);
  public:

  // int64 leaderId = 3;
  void clear_leaderid();
  int64_t leaderid() const;
  void set_leaderid(int64_t value);
  private:
  int64_t _internal_leaderid() const;
  void _internal_set_leaderid(int64_t value);
  public:

  // int32 currentPlayerCount = 5;
  void clear_currentplayercount();
  int32_t currentplayercount() const;
  void set_currentplayercount(int32_t value);
  private:
  int32_t _internal_currentplayercount() const;
  void _internal_set_currentplayercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  int32_t roomid_;
  int32_t maxplayercount_;
  int64_t leaderid_;
  int32_t currentplayercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class LobbyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LobbyInfo) */ {
 public:
  inline LobbyInfo() : LobbyInfo(nullptr) {}
  ~LobbyInfo() override;
  explicit PROTOBUF_CONSTEXPR LobbyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobbyInfo(const LobbyInfo& from);
  LobbyInfo(LobbyInfo&& from) noexcept
    : LobbyInfo() {
    *this = ::std::move(from);
  }

  inline LobbyInfo& operator=(const LobbyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobbyInfo& operator=(LobbyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobbyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobbyInfo* internal_default_instance() {
    return reinterpret_cast<const LobbyInfo*>(
               &_LobbyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LobbyInfo& a, LobbyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LobbyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobbyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobbyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobbyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobbyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LobbyInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobbyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LobbyInfo";
  }
  protected:
  explicit LobbyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 2,
    kRoomCountFieldNumber = 1,
  };
  // repeated .Protocol.Room rooms = 2;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::Protocol::Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Room >*
      mutable_rooms();
  private:
  const ::Protocol::Room& _internal_rooms(int index) const;
  ::Protocol::Room* _internal_add_rooms();
  public:
  const ::Protocol::Room& rooms(int index) const;
  ::Protocol::Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Room >&
      rooms() const;

  // int32 roomCount = 1;
  void clear_roomcount();
  int32_t roomcount() const;
  void set_roomcount(int32_t value);
  private:
  int32_t _internal_roomcount() const;
  void _internal_set_roomcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LobbyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Room > rooms_;
  int32_t roomcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Player& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kRoomIdxFieldNumber = 4,
    kReadyFieldNumber = 5,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 roomIdx = 4;
  void clear_roomidx();
  int32_t roomidx() const;
  void set_roomidx(int32_t value);
  private:
  int32_t _internal_roomidx() const;
  void _internal_set_roomidx(int32_t value);
  public:

  // bool ready = 5;
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t playerid_;
  int32_t level_;
  int32_t roomidx_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  ~RoomInfo() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoomInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBenListFieldNumber = 3,
    kPlayerListFieldNumber = 4,
    kRoomFieldNumber = 2,
    kRoomIdFieldNumber = 1,
  };
  // repeated bool benList = 3;
  int benlist_size() const;
  private:
  int _internal_benlist_size() const;
  public:
  void clear_benlist();
  private:
  bool _internal_benlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_benlist() const;
  void _internal_add_benlist(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_benlist();
  public:
  bool benlist(int index) const;
  void set_benlist(int index, bool value);
  void add_benlist(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      benlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_benlist();

  // repeated .Protocol.Player playerList = 4;
  int playerlist_size() const;
  private:
  int _internal_playerlist_size() const;
  public:
  void clear_playerlist();
  ::Protocol::Player* mutable_playerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_playerlist();
  private:
  const ::Protocol::Player& _internal_playerlist(int index) const;
  ::Protocol::Player* _internal_add_playerlist();
  public:
  const ::Protocol::Player& playerlist(int index) const;
  ::Protocol::Player* add_playerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      playerlist() const;

  // .Protocol.Room room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::Room& room() const;
  PROTOBUF_NODISCARD ::Protocol::Room* release_room();
  ::Protocol::Room* mutable_room();
  void set_allocated_room(::Protocol::Room* room);
  private:
  const ::Protocol::Room& _internal_room() const;
  ::Protocol::Room* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::Room* room);
  ::Protocol::Room* unsafe_arena_release_room();

  // int32 roomId = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > benlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > playerlist_;
  ::Protocol::Room* room_;
  int32_t roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlayerInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kSpeedFieldNumber = 3,
    kMaxBombCountFieldNumber = 4,
    kBombCountFieldNumber = 5,
    kBombRangeFieldNumber = 6,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // float speed = 3;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // int32 maxBombCount = 4;
  void clear_maxbombcount();
  int32_t maxbombcount() const;
  void set_maxbombcount(int32_t value);
  private:
  int32_t _internal_maxbombcount() const;
  void _internal_set_maxbombcount(int32_t value);
  public:

  // int32 bombCount = 5;
  void clear_bombcount();
  int32_t bombcount() const;
  void set_bombcount(int32_t value);
  private:
  int32_t _internal_bombcount() const;
  void _internal_set_bombcount(int32_t value);
  public:

  // int32 bombRange = 6;
  void clear_bombrange();
  int32_t bombrange() const;
  void set_bombrange(int32_t value);
  private:
  int32_t _internal_bombrange() const;
  void _internal_set_bombrange(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t playerid_;
  float speed_;
  int32_t maxbombcount_;
  int32_t bombcount_;
  int32_t bombrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class WorldPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.WorldPos) */ {
 public:
  inline WorldPos() : WorldPos(nullptr) {}
  ~WorldPos() override;
  explicit PROTOBUF_CONSTEXPR WorldPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldPos(const WorldPos& from);
  WorldPos(WorldPos&& from) noexcept
    : WorldPos() {
    *this = ::std::move(from);
  }

  inline WorldPos& operator=(const WorldPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldPos& operator=(WorldPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldPos* internal_default_instance() {
    return reinterpret_cast<const WorldPos*>(
               &_WorldPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WorldPos& a, WorldPos& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorldPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.WorldPos";
  }
  protected:
  explicit WorldPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
  };
  // float posX = 1;
  void clear_posx();
  float posx() const;
  void set_posx(float value);
  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);
  public:

  // float posY = 2;
  void clear_posy();
  float posy() const;
  void set_posy(float value);
  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.WorldPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float posx_;
  float posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class CellPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.CellPos) */ {
 public:
  inline CellPos() : CellPos(nullptr) {}
  ~CellPos() override;
  explicit PROTOBUF_CONSTEXPR CellPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellPos(const CellPos& from);
  CellPos(CellPos&& from) noexcept
    : CellPos() {
    *this = ::std::move(from);
  }

  inline CellPos& operator=(const CellPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellPos& operator=(CellPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellPos* internal_default_instance() {
    return reinterpret_cast<const CellPos*>(
               &_CellPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CellPos& a, CellPos& b) {
    a.Swap(&b);
  }
  inline void Swap(CellPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CellPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.CellPos";
  }
  protected:
  explicit CellPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
  };
  // int32 posX = 1;
  void clear_posx();
  int32_t posx() const;
  void set_posx(int32_t value);
  private:
  int32_t _internal_posx() const;
  void _internal_set_posx(int32_t value);
  public:

  // int32 posY = 2;
  void clear_posy();
  int32_t posy() const;
  void set_posy(int32_t value);
  private:
  int32_t _internal_posy() const;
  void _internal_set_posy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.CellPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t posx_;
  int32_t posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PositionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PositionInfo) */ {
 public:
  inline PositionInfo() : PositionInfo(nullptr) {}
  ~PositionInfo() override;
  explicit PROTOBUF_CONSTEXPR PositionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionInfo(const PositionInfo& from);
  PositionInfo(PositionInfo&& from) noexcept
    : PositionInfo() {
    *this = ::std::move(from);
  }

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInfo& operator=(PositionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PositionInfo& a, PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PositionInfo";
  }
  protected:
  explicit PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldPosFieldNumber = 3,
    kCellPosFieldNumber = 4,
    kStateFieldNumber = 1,
    kMoveDirFieldNumber = 2,
  };
  // .Protocol.WorldPos worldPos = 3;
  bool has_worldpos() const;
  private:
  bool _internal_has_worldpos() const;
  public:
  void clear_worldpos();
  const ::Protocol::WorldPos& worldpos() const;
  PROTOBUF_NODISCARD ::Protocol::WorldPos* release_worldpos();
  ::Protocol::WorldPos* mutable_worldpos();
  void set_allocated_worldpos(::Protocol::WorldPos* worldpos);
  private:
  const ::Protocol::WorldPos& _internal_worldpos() const;
  ::Protocol::WorldPos* _internal_mutable_worldpos();
  public:
  void unsafe_arena_set_allocated_worldpos(
      ::Protocol::WorldPos* worldpos);
  ::Protocol::WorldPos* unsafe_arena_release_worldpos();

  // .Protocol.CellPos cellPos = 4;
  bool has_cellpos() const;
  private:
  bool _internal_has_cellpos() const;
  public:
  void clear_cellpos();
  const ::Protocol::CellPos& cellpos() const;
  PROTOBUF_NODISCARD ::Protocol::CellPos* release_cellpos();
  ::Protocol::CellPos* mutable_cellpos();
  void set_allocated_cellpos(::Protocol::CellPos* cellpos);
  private:
  const ::Protocol::CellPos& _internal_cellpos() const;
  ::Protocol::CellPos* _internal_mutable_cellpos();
  public:
  void unsafe_arena_set_allocated_cellpos(
      ::Protocol::CellPos* cellpos);
  ::Protocol::CellPos* unsafe_arena_release_cellpos();

  // .Protocol.PlayerState state = 1;
  void clear_state();
  ::Protocol::PlayerState state() const;
  void set_state(::Protocol::PlayerState value);
  private:
  ::Protocol::PlayerState _internal_state() const;
  void _internal_set_state(::Protocol::PlayerState value);
  public:

  // .Protocol.MoveDir moveDir = 2;
  void clear_movedir();
  ::Protocol::MoveDir movedir() const;
  void set_movedir(::Protocol::MoveDir value);
  private:
  ::Protocol::MoveDir _internal_movedir() const;
  void _internal_set_movedir(::Protocol::MoveDir value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PositionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::WorldPos* worldpos_;
  ::Protocol::CellPos* cellpos_;
  int state_;
  int movedir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Channel

// int32 channelId = 1;
inline void Channel::clear_channelid() {
  channelid_ = 0;
}
inline int32_t Channel::_internal_channelid() const {
  return channelid_;
}
inline int32_t Channel::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.Channel.channelId)
  return _internal_channelid();
}
inline void Channel::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void Channel::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.Channel.channelId)
}

// int32 maxPlayerCount = 2;
inline void Channel::clear_maxplayercount() {
  maxplayercount_ = 0;
}
inline int32_t Channel::_internal_maxplayercount() const {
  return maxplayercount_;
}
inline int32_t Channel::maxplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.Channel.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void Channel::_internal_set_maxplayercount(int32_t value) {
  
  maxplayercount_ = value;
}
inline void Channel::set_maxplayercount(int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.Channel.maxPlayerCount)
}

// int32 currentPlayerCount = 3;
inline void Channel::clear_currentplayercount() {
  currentplayercount_ = 0;
}
inline int32_t Channel::_internal_currentplayercount() const {
  return currentplayercount_;
}
inline int32_t Channel::currentplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.Channel.currentPlayerCount)
  return _internal_currentplayercount();
}
inline void Channel::_internal_set_currentplayercount(int32_t value) {
  
  currentplayercount_ = value;
}
inline void Channel::set_currentplayercount(int32_t value) {
  _internal_set_currentplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.Channel.currentPlayerCount)
}

// -------------------------------------------------------------------

// ChannelInfo

// int32 channelCount = 1;
inline void ChannelInfo::clear_channelcount() {
  channelcount_ = 0;
}
inline int32_t ChannelInfo::_internal_channelcount() const {
  return channelcount_;
}
inline int32_t ChannelInfo::channelcount() const {
  // @@protoc_insertion_point(field_get:Protocol.ChannelInfo.channelCount)
  return _internal_channelcount();
}
inline void ChannelInfo::_internal_set_channelcount(int32_t value) {
  
  channelcount_ = value;
}
inline void ChannelInfo::set_channelcount(int32_t value) {
  _internal_set_channelcount(value);
  // @@protoc_insertion_point(field_set:Protocol.ChannelInfo.channelCount)
}

// repeated .Protocol.Channel channels = 2;
inline int ChannelInfo::_internal_channels_size() const {
  return channels_.size();
}
inline int ChannelInfo::channels_size() const {
  return _internal_channels_size();
}
inline void ChannelInfo::clear_channels() {
  channels_.Clear();
}
inline ::Protocol::Channel* ChannelInfo::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.ChannelInfo.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >*
ChannelInfo::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ChannelInfo.channels)
  return &channels_;
}
inline const ::Protocol::Channel& ChannelInfo::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::Protocol::Channel& ChannelInfo::channels(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ChannelInfo.channels)
  return _internal_channels(index);
}
inline ::Protocol::Channel* ChannelInfo::_internal_add_channels() {
  return channels_.Add();
}
inline ::Protocol::Channel* ChannelInfo::add_channels() {
  ::Protocol::Channel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:Protocol.ChannelInfo.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >&
ChannelInfo::channels() const {
  // @@protoc_insertion_point(field_list:Protocol.ChannelInfo.channels)
  return channels_;
}

// -------------------------------------------------------------------

// Room

// int32 roomId = 1;
inline void Room::clear_roomid() {
  roomid_ = 0;
}
inline int32_t Room::_internal_roomid() const {
  return roomid_;
}
inline int32_t Room::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.Room.roomId)
  return _internal_roomid();
}
inline void Room::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void Room::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.Room.roomId)
}

// string roomName = 2;
inline void Room::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& Room::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.Room.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Room.roomName)
}
inline std::string* Room::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.Room.roomName)
  return _s;
}
inline const std::string& Room::_internal_roomname() const {
  return roomname_.Get();
}
inline void Room::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_roomname() {
  
  return roomname_.Mutable(GetArenaForAllocation());
}
inline std::string* Room::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.Room.roomName)
  return roomname_.Release();
}
inline void Room::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(roomname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault()) {
    roomname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Room.roomName)
}

// int64 leaderId = 3;
inline void Room::clear_leaderid() {
  leaderid_ = int64_t{0};
}
inline int64_t Room::_internal_leaderid() const {
  return leaderid_;
}
inline int64_t Room::leaderid() const {
  // @@protoc_insertion_point(field_get:Protocol.Room.leaderId)
  return _internal_leaderid();
}
inline void Room::_internal_set_leaderid(int64_t value) {
  
  leaderid_ = value;
}
inline void Room::set_leaderid(int64_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:Protocol.Room.leaderId)
}

// int32 maxPlayerCount = 4;
inline void Room::clear_maxplayercount() {
  maxplayercount_ = 0;
}
inline int32_t Room::_internal_maxplayercount() const {
  return maxplayercount_;
}
inline int32_t Room::maxplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.Room.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void Room::_internal_set_maxplayercount(int32_t value) {
  
  maxplayercount_ = value;
}
inline void Room::set_maxplayercount(int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.Room.maxPlayerCount)
}

// int32 currentPlayerCount = 5;
inline void Room::clear_currentplayercount() {
  currentplayercount_ = 0;
}
inline int32_t Room::_internal_currentplayercount() const {
  return currentplayercount_;
}
inline int32_t Room::currentplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.Room.currentPlayerCount)
  return _internal_currentplayercount();
}
inline void Room::_internal_set_currentplayercount(int32_t value) {
  
  currentplayercount_ = value;
}
inline void Room::set_currentplayercount(int32_t value) {
  _internal_set_currentplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.Room.currentPlayerCount)
}

// -------------------------------------------------------------------

// LobbyInfo

// int32 roomCount = 1;
inline void LobbyInfo::clear_roomcount() {
  roomcount_ = 0;
}
inline int32_t LobbyInfo::_internal_roomcount() const {
  return roomcount_;
}
inline int32_t LobbyInfo::roomcount() const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyInfo.roomCount)
  return _internal_roomcount();
}
inline void LobbyInfo::_internal_set_roomcount(int32_t value) {
  
  roomcount_ = value;
}
inline void LobbyInfo::set_roomcount(int32_t value) {
  _internal_set_roomcount(value);
  // @@protoc_insertion_point(field_set:Protocol.LobbyInfo.roomCount)
}

// repeated .Protocol.Room rooms = 2;
inline int LobbyInfo::_internal_rooms_size() const {
  return rooms_.size();
}
inline int LobbyInfo::rooms_size() const {
  return _internal_rooms_size();
}
inline void LobbyInfo::clear_rooms() {
  rooms_.Clear();
}
inline ::Protocol::Room* LobbyInfo::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.LobbyInfo.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Room >*
LobbyInfo::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.LobbyInfo.rooms)
  return &rooms_;
}
inline const ::Protocol::Room& LobbyInfo::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::Protocol::Room& LobbyInfo::rooms(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.LobbyInfo.rooms)
  return _internal_rooms(index);
}
inline ::Protocol::Room* LobbyInfo::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::Protocol::Room* LobbyInfo::add_rooms() {
  ::Protocol::Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:Protocol.LobbyInfo.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Room >&
LobbyInfo::rooms() const {
  // @@protoc_insertion_point(field_list:Protocol.LobbyInfo.rooms)
  return rooms_;
}

// -------------------------------------------------------------------

// Player

// int64 playerId = 1;
inline void Player::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t Player::_internal_playerid() const {
  return playerid_;
}
inline int64_t Player::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.playerId)
  return _internal_playerid();
}
inline void Player::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void Player::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.playerId)
}

// int32 level = 2;
inline void Player::clear_level() {
  level_ = 0;
}
inline int32_t Player::_internal_level() const {
  return level_;
}
inline int32_t Player::level() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.level)
  return _internal_level();
}
inline void Player::_internal_set_level(int32_t value) {
  
  level_ = value;
}
inline void Player::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.level)
}

// string name = 3;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return name_.Release();
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// int32 roomIdx = 4;
inline void Player::clear_roomidx() {
  roomidx_ = 0;
}
inline int32_t Player::_internal_roomidx() const {
  return roomidx_;
}
inline int32_t Player::roomidx() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.roomIdx)
  return _internal_roomidx();
}
inline void Player::_internal_set_roomidx(int32_t value) {
  
  roomidx_ = value;
}
inline void Player::set_roomidx(int32_t value) {
  _internal_set_roomidx(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.roomIdx)
}

// bool ready = 5;
inline void Player::clear_ready() {
  ready_ = false;
}
inline bool Player::_internal_ready() const {
  return ready_;
}
inline bool Player::ready() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.ready)
  return _internal_ready();
}
inline void Player::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void Player::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.ready)
}

// -------------------------------------------------------------------

// RoomInfo

// int32 roomId = 1;
inline void RoomInfo::clear_roomid() {
  roomid_ = 0;
}
inline int32_t RoomInfo::_internal_roomid() const {
  return roomid_;
}
inline int32_t RoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.roomId)
  return _internal_roomid();
}
inline void RoomInfo::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void RoomInfo::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.roomId)
}

// .Protocol.Room room = 2;
inline bool RoomInfo::_internal_has_room() const {
  return this != internal_default_instance() && room_ != nullptr;
}
inline bool RoomInfo::has_room() const {
  return _internal_has_room();
}
inline void RoomInfo::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
inline const ::Protocol::Room& RoomInfo::_internal_room() const {
  const ::Protocol::Room* p = room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Room&>(
      ::Protocol::_Room_default_instance_);
}
inline const ::Protocol::Room& RoomInfo::room() const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.room)
  return _internal_room();
}
inline void RoomInfo::unsafe_arena_set_allocated_room(
    ::Protocol::Room* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.RoomInfo.room)
}
inline ::Protocol::Room* RoomInfo::release_room() {
  
  ::Protocol::Room* temp = room_;
  room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Room* RoomInfo::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.RoomInfo.room)
  
  ::Protocol::Room* temp = room_;
  room_ = nullptr;
  return temp;
}
inline ::Protocol::Room* RoomInfo::_internal_mutable_room() {
  
  if (room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Room>(GetArenaForAllocation());
    room_ = p;
  }
  return room_;
}
inline ::Protocol::Room* RoomInfo::mutable_room() {
  ::Protocol::Room* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.RoomInfo.room)
  return _msg;
}
inline void RoomInfo::set_allocated_room(::Protocol::Room* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete room_;
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room);
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.RoomInfo.room)
}

// repeated bool benList = 3;
inline int RoomInfo::_internal_benlist_size() const {
  return benlist_.size();
}
inline int RoomInfo::benlist_size() const {
  return _internal_benlist_size();
}
inline void RoomInfo::clear_benlist() {
  benlist_.Clear();
}
inline bool RoomInfo::_internal_benlist(int index) const {
  return benlist_.Get(index);
}
inline bool RoomInfo::benlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.benList)
  return _internal_benlist(index);
}
inline void RoomInfo::set_benlist(int index, bool value) {
  benlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.RoomInfo.benList)
}
inline void RoomInfo::_internal_add_benlist(bool value) {
  benlist_.Add(value);
}
inline void RoomInfo::add_benlist(bool value) {
  _internal_add_benlist(value);
  // @@protoc_insertion_point(field_add:Protocol.RoomInfo.benList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RoomInfo::_internal_benlist() const {
  return benlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
RoomInfo::benlist() const {
  // @@protoc_insertion_point(field_list:Protocol.RoomInfo.benList)
  return _internal_benlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RoomInfo::_internal_mutable_benlist() {
  return &benlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
RoomInfo::mutable_benlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.RoomInfo.benList)
  return _internal_mutable_benlist();
}

// repeated .Protocol.Player playerList = 4;
inline int RoomInfo::_internal_playerlist_size() const {
  return playerlist_.size();
}
inline int RoomInfo::playerlist_size() const {
  return _internal_playerlist_size();
}
inline void RoomInfo::clear_playerlist() {
  playerlist_.Clear();
}
inline ::Protocol::Player* RoomInfo::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.RoomInfo.playerList)
  return playerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
RoomInfo::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.RoomInfo.playerList)
  return &playerlist_;
}
inline const ::Protocol::Player& RoomInfo::_internal_playerlist(int index) const {
  return playerlist_.Get(index);
}
inline const ::Protocol::Player& RoomInfo::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.RoomInfo.playerList)
  return _internal_playerlist(index);
}
inline ::Protocol::Player* RoomInfo::_internal_add_playerlist() {
  return playerlist_.Add();
}
inline ::Protocol::Player* RoomInfo::add_playerlist() {
  ::Protocol::Player* _add = _internal_add_playerlist();
  // @@protoc_insertion_point(field_add:Protocol.RoomInfo.playerList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
RoomInfo::playerlist() const {
  // @@protoc_insertion_point(field_list:Protocol.RoomInfo.playerList)
  return playerlist_;
}

// -------------------------------------------------------------------

// PlayerInfo

// int64 playerId = 1;
inline void PlayerInfo::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t PlayerInfo::_internal_playerid() const {
  return playerid_;
}
inline int64_t PlayerInfo::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.playerId)
  return _internal_playerid();
}
inline void PlayerInfo::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void PlayerInfo::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.playerId)
}

// string name = 2;
inline void PlayerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.name)
}
inline std::string* PlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.name)
  return _s;
}
inline const std::string& PlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void PlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.name)
  return name_.Release();
}
inline void PlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.name)
}

// float speed = 3;
inline void PlayerInfo::clear_speed() {
  speed_ = 0;
}
inline float PlayerInfo::_internal_speed() const {
  return speed_;
}
inline float PlayerInfo::speed() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.speed)
  return _internal_speed();
}
inline void PlayerInfo::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void PlayerInfo::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.speed)
}

// int32 maxBombCount = 4;
inline void PlayerInfo::clear_maxbombcount() {
  maxbombcount_ = 0;
}
inline int32_t PlayerInfo::_internal_maxbombcount() const {
  return maxbombcount_;
}
inline int32_t PlayerInfo::maxbombcount() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.maxBombCount)
  return _internal_maxbombcount();
}
inline void PlayerInfo::_internal_set_maxbombcount(int32_t value) {
  
  maxbombcount_ = value;
}
inline void PlayerInfo::set_maxbombcount(int32_t value) {
  _internal_set_maxbombcount(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.maxBombCount)
}

// int32 bombCount = 5;
inline void PlayerInfo::clear_bombcount() {
  bombcount_ = 0;
}
inline int32_t PlayerInfo::_internal_bombcount() const {
  return bombcount_;
}
inline int32_t PlayerInfo::bombcount() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.bombCount)
  return _internal_bombcount();
}
inline void PlayerInfo::_internal_set_bombcount(int32_t value) {
  
  bombcount_ = value;
}
inline void PlayerInfo::set_bombcount(int32_t value) {
  _internal_set_bombcount(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.bombCount)
}

// int32 bombRange = 6;
inline void PlayerInfo::clear_bombrange() {
  bombrange_ = 0;
}
inline int32_t PlayerInfo::_internal_bombrange() const {
  return bombrange_;
}
inline int32_t PlayerInfo::bombrange() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.bombRange)
  return _internal_bombrange();
}
inline void PlayerInfo::_internal_set_bombrange(int32_t value) {
  
  bombrange_ = value;
}
inline void PlayerInfo::set_bombrange(int32_t value) {
  _internal_set_bombrange(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.bombRange)
}

// -------------------------------------------------------------------

// WorldPos

// float posX = 1;
inline void WorldPos::clear_posx() {
  posx_ = 0;
}
inline float WorldPos::_internal_posx() const {
  return posx_;
}
inline float WorldPos::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.WorldPos.posX)
  return _internal_posx();
}
inline void WorldPos::_internal_set_posx(float value) {
  
  posx_ = value;
}
inline void WorldPos::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.WorldPos.posX)
}

// float posY = 2;
inline void WorldPos::clear_posy() {
  posy_ = 0;
}
inline float WorldPos::_internal_posy() const {
  return posy_;
}
inline float WorldPos::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.WorldPos.posY)
  return _internal_posy();
}
inline void WorldPos::_internal_set_posy(float value) {
  
  posy_ = value;
}
inline void WorldPos::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.WorldPos.posY)
}

// -------------------------------------------------------------------

// CellPos

// int32 posX = 1;
inline void CellPos::clear_posx() {
  posx_ = 0;
}
inline int32_t CellPos::_internal_posx() const {
  return posx_;
}
inline int32_t CellPos::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.CellPos.posX)
  return _internal_posx();
}
inline void CellPos::_internal_set_posx(int32_t value) {
  
  posx_ = value;
}
inline void CellPos::set_posx(int32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.CellPos.posX)
}

// int32 posY = 2;
inline void CellPos::clear_posy() {
  posy_ = 0;
}
inline int32_t CellPos::_internal_posy() const {
  return posy_;
}
inline int32_t CellPos::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.CellPos.posY)
  return _internal_posy();
}
inline void CellPos::_internal_set_posy(int32_t value) {
  
  posy_ = value;
}
inline void CellPos::set_posy(int32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.CellPos.posY)
}

// -------------------------------------------------------------------

// PositionInfo

// .Protocol.PlayerState state = 1;
inline void PositionInfo::clear_state() {
  state_ = 0;
}
inline ::Protocol::PlayerState PositionInfo::_internal_state() const {
  return static_cast< ::Protocol::PlayerState >(state_);
}
inline ::Protocol::PlayerState PositionInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.state)
  return _internal_state();
}
inline void PositionInfo::_internal_set_state(::Protocol::PlayerState value) {
  
  state_ = value;
}
inline void PositionInfo::set_state(::Protocol::PlayerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.state)
}

// .Protocol.MoveDir moveDir = 2;
inline void PositionInfo::clear_movedir() {
  movedir_ = 0;
}
inline ::Protocol::MoveDir PositionInfo::_internal_movedir() const {
  return static_cast< ::Protocol::MoveDir >(movedir_);
}
inline ::Protocol::MoveDir PositionInfo::movedir() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.moveDir)
  return _internal_movedir();
}
inline void PositionInfo::_internal_set_movedir(::Protocol::MoveDir value) {
  
  movedir_ = value;
}
inline void PositionInfo::set_movedir(::Protocol::MoveDir value) {
  _internal_set_movedir(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.moveDir)
}

// .Protocol.WorldPos worldPos = 3;
inline bool PositionInfo::_internal_has_worldpos() const {
  return this != internal_default_instance() && worldpos_ != nullptr;
}
inline bool PositionInfo::has_worldpos() const {
  return _internal_has_worldpos();
}
inline void PositionInfo::clear_worldpos() {
  if (GetArenaForAllocation() == nullptr && worldpos_ != nullptr) {
    delete worldpos_;
  }
  worldpos_ = nullptr;
}
inline const ::Protocol::WorldPos& PositionInfo::_internal_worldpos() const {
  const ::Protocol::WorldPos* p = worldpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::WorldPos&>(
      ::Protocol::_WorldPos_default_instance_);
}
inline const ::Protocol::WorldPos& PositionInfo::worldpos() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.worldPos)
  return _internal_worldpos();
}
inline void PositionInfo::unsafe_arena_set_allocated_worldpos(
    ::Protocol::WorldPos* worldpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldpos_);
  }
  worldpos_ = worldpos;
  if (worldpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PositionInfo.worldPos)
}
inline ::Protocol::WorldPos* PositionInfo::release_worldpos() {
  
  ::Protocol::WorldPos* temp = worldpos_;
  worldpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::WorldPos* PositionInfo::unsafe_arena_release_worldpos() {
  // @@protoc_insertion_point(field_release:Protocol.PositionInfo.worldPos)
  
  ::Protocol::WorldPos* temp = worldpos_;
  worldpos_ = nullptr;
  return temp;
}
inline ::Protocol::WorldPos* PositionInfo::_internal_mutable_worldpos() {
  
  if (worldpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::WorldPos>(GetArenaForAllocation());
    worldpos_ = p;
  }
  return worldpos_;
}
inline ::Protocol::WorldPos* PositionInfo::mutable_worldpos() {
  ::Protocol::WorldPos* _msg = _internal_mutable_worldpos();
  // @@protoc_insertion_point(field_mutable:Protocol.PositionInfo.worldPos)
  return _msg;
}
inline void PositionInfo::set_allocated_worldpos(::Protocol::WorldPos* worldpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete worldpos_;
  }
  if (worldpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(worldpos);
    if (message_arena != submessage_arena) {
      worldpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldpos, submessage_arena);
    }
    
  } else {
    
  }
  worldpos_ = worldpos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PositionInfo.worldPos)
}

// .Protocol.CellPos cellPos = 4;
inline bool PositionInfo::_internal_has_cellpos() const {
  return this != internal_default_instance() && cellpos_ != nullptr;
}
inline bool PositionInfo::has_cellpos() const {
  return _internal_has_cellpos();
}
inline void PositionInfo::clear_cellpos() {
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
}
inline const ::Protocol::CellPos& PositionInfo::_internal_cellpos() const {
  const ::Protocol::CellPos* p = cellpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::CellPos&>(
      ::Protocol::_CellPos_default_instance_);
}
inline const ::Protocol::CellPos& PositionInfo::cellpos() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.cellPos)
  return _internal_cellpos();
}
inline void PositionInfo::unsafe_arena_set_allocated_cellpos(
    ::Protocol::CellPos* cellpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellpos_);
  }
  cellpos_ = cellpos;
  if (cellpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PositionInfo.cellPos)
}
inline ::Protocol::CellPos* PositionInfo::release_cellpos() {
  
  ::Protocol::CellPos* temp = cellpos_;
  cellpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::CellPos* PositionInfo::unsafe_arena_release_cellpos() {
  // @@protoc_insertion_point(field_release:Protocol.PositionInfo.cellPos)
  
  ::Protocol::CellPos* temp = cellpos_;
  cellpos_ = nullptr;
  return temp;
}
inline ::Protocol::CellPos* PositionInfo::_internal_mutable_cellpos() {
  
  if (cellpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::CellPos>(GetArenaForAllocation());
    cellpos_ = p;
  }
  return cellpos_;
}
inline ::Protocol::CellPos* PositionInfo::mutable_cellpos() {
  ::Protocol::CellPos* _msg = _internal_mutable_cellpos();
  // @@protoc_insertion_point(field_mutable:Protocol.PositionInfo.cellPos)
  return _msg;
}
inline void PositionInfo::set_allocated_cellpos(::Protocol::CellPos* cellpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cellpos_;
  }
  if (cellpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cellpos);
    if (message_arena != submessage_arena) {
      cellpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellpos, submessage_arena);
    }
    
  } else {
    
  }
  cellpos_ = cellpos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PositionInfo.cellPos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
