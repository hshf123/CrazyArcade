// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class Channel;
struct ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelInfo;
struct ChannelInfoDefaultTypeInternal;
extern ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Channel* Arena::CreateMaybeMessage<::Protocol::Channel>(Arena*);
template<> ::Protocol::ChannelInfo* Arena::CreateMaybeMessage<::Protocol::ChannelInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Channel) */ {
 public:
  inline Channel() : Channel(nullptr) {}
  ~Channel() override;
  explicit PROTOBUF_CONSTEXPR Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Channel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Channel";
  }
  protected:
  explicit Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kMaxPlayerCountFieldNumber = 2,
    kCurrentPlayerCountFieldNumber = 3,
  };
  // int64 channelId = 1;
  void clear_channelid();
  int64_t channelid() const;
  void set_channelid(int64_t value);
  private:
  int64_t _internal_channelid() const;
  void _internal_set_channelid(int64_t value);
  public:

  // int32 maxPlayerCount = 2;
  void clear_maxplayercount();
  int32_t maxplayercount() const;
  void set_maxplayercount(int32_t value);
  private:
  int32_t _internal_maxplayercount() const;
  void _internal_set_maxplayercount(int32_t value);
  public:

  // int32 currentPlayerCount = 3;
  void clear_currentplayercount();
  int32_t currentplayercount() const;
  void set_currentplayercount(int32_t value);
  private:
  int32_t _internal_currentplayercount() const;
  void _internal_set_currentplayercount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t channelid_;
  int32_t maxplayercount_;
  int32_t currentplayercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ChannelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChannelInfo) */ {
 public:
  inline ChannelInfo() : ChannelInfo(nullptr) {}
  ~ChannelInfo() override;
  explicit PROTOBUF_CONSTEXPR ChannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChannelInfo(const ChannelInfo& from);
  ChannelInfo(ChannelInfo&& from) noexcept
    : ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ChannelInfo& operator=(const ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelInfo& operator=(ChannelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ChannelInfo*>(
               &_ChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChannelInfo& a, ChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChannelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChannelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChannelInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChannelInfo";
  }
  protected:
  explicit ChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kChannelCountFieldNumber = 1,
  };
  // repeated .Protocol.Channel channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::Protocol::Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >*
      mutable_channels();
  private:
  const ::Protocol::Channel& _internal_channels(int index) const;
  ::Protocol::Channel* _internal_add_channels();
  public:
  const ::Protocol::Channel& channels(int index) const;
  ::Protocol::Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >&
      channels() const;

  // int32 channelCount = 1;
  void clear_channelcount();
  int32_t channelcount() const;
  void set_channelcount(int32_t value);
  private:
  int32_t _internal_channelcount() const;
  void _internal_set_channelcount(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel > channels_;
  int32_t channelcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Channel

// int64 channelId = 1;
inline void Channel::clear_channelid() {
  channelid_ = int64_t{0};
}
inline int64_t Channel::_internal_channelid() const {
  return channelid_;
}
inline int64_t Channel::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.Channel.channelId)
  return _internal_channelid();
}
inline void Channel::_internal_set_channelid(int64_t value) {
  
  channelid_ = value;
}
inline void Channel::set_channelid(int64_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.Channel.channelId)
}

// int32 maxPlayerCount = 2;
inline void Channel::clear_maxplayercount() {
  maxplayercount_ = 0;
}
inline int32_t Channel::_internal_maxplayercount() const {
  return maxplayercount_;
}
inline int32_t Channel::maxplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.Channel.maxPlayerCount)
  return _internal_maxplayercount();
}
inline void Channel::_internal_set_maxplayercount(int32_t value) {
  
  maxplayercount_ = value;
}
inline void Channel::set_maxplayercount(int32_t value) {
  _internal_set_maxplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.Channel.maxPlayerCount)
}

// int32 currentPlayerCount = 3;
inline void Channel::clear_currentplayercount() {
  currentplayercount_ = 0;
}
inline int32_t Channel::_internal_currentplayercount() const {
  return currentplayercount_;
}
inline int32_t Channel::currentplayercount() const {
  // @@protoc_insertion_point(field_get:Protocol.Channel.currentPlayerCount)
  return _internal_currentplayercount();
}
inline void Channel::_internal_set_currentplayercount(int32_t value) {
  
  currentplayercount_ = value;
}
inline void Channel::set_currentplayercount(int32_t value) {
  _internal_set_currentplayercount(value);
  // @@protoc_insertion_point(field_set:Protocol.Channel.currentPlayerCount)
}

// -------------------------------------------------------------------

// ChannelInfo

// int32 channelCount = 1;
inline void ChannelInfo::clear_channelcount() {
  channelcount_ = 0;
}
inline int32_t ChannelInfo::_internal_channelcount() const {
  return channelcount_;
}
inline int32_t ChannelInfo::channelcount() const {
  // @@protoc_insertion_point(field_get:Protocol.ChannelInfo.channelCount)
  return _internal_channelcount();
}
inline void ChannelInfo::_internal_set_channelcount(int32_t value) {
  
  channelcount_ = value;
}
inline void ChannelInfo::set_channelcount(int32_t value) {
  _internal_set_channelcount(value);
  // @@protoc_insertion_point(field_set:Protocol.ChannelInfo.channelCount)
}

// repeated .Protocol.Channel channels = 2;
inline int ChannelInfo::_internal_channels_size() const {
  return channels_.size();
}
inline int ChannelInfo::channels_size() const {
  return _internal_channels_size();
}
inline void ChannelInfo::clear_channels() {
  channels_.Clear();
}
inline ::Protocol::Channel* ChannelInfo::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.ChannelInfo.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >*
ChannelInfo::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ChannelInfo.channels)
  return &channels_;
}
inline const ::Protocol::Channel& ChannelInfo::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::Protocol::Channel& ChannelInfo::channels(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ChannelInfo.channels)
  return _internal_channels(index);
}
inline ::Protocol::Channel* ChannelInfo::_internal_add_channels() {
  return channels_.Add();
}
inline ::Protocol::Channel* ChannelInfo::add_channels() {
  ::Protocol::Channel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:Protocol.ChannelInfo.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Channel >&
ChannelInfo::channels() const {
  // @@protoc_insertion_point(field_list:Protocol.ChannelInfo.channels)
  return channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
