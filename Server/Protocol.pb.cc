// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pw_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized)
  : channelinfo_(nullptr)
  , playerid_(int64_t{0})
  , success_(false){}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_CHANNELCHOIC::C_CHANNELCHOIC(
    ::_pbi::ConstantInitialized)
  : playerid_(int64_t{0})
  , channelid_(0){}
struct C_CHANNELCHOICDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHANNELCHOICDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHANNELCHOICDefaultTypeInternal() {}
  union {
    C_CHANNELCHOIC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHANNELCHOICDefaultTypeInternal _C_CHANNELCHOIC_default_instance_;
PROTOBUF_CONSTEXPR S_CHANNELCHOIC::S_CHANNELCHOIC(
    ::_pbi::ConstantInitialized)
  : lobbyinfo_(nullptr)
  , success_(false)
  , channelid_(0){}
struct S_CHANNELCHOICDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANNELCHOICDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANNELCHOICDefaultTypeInternal() {}
  union {
    S_CHANNELCHOIC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANNELCHOICDefaultTypeInternal _S_CHANNELCHOIC_default_instance_;
PROTOBUF_CONSTEXPR C_CHANNELCHAT::C_CHANNELCHAT(
    ::_pbi::ConstantInitialized)
  : chat_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , playerid_(int64_t{0})
  , channelid_(0){}
struct C_CHANNELCHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHANNELCHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHANNELCHATDefaultTypeInternal() {}
  union {
    C_CHANNELCHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHANNELCHATDefaultTypeInternal _C_CHANNELCHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHANNELCHAT::S_CHANNELCHAT(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct S_CHANNELCHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANNELCHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANNELCHATDefaultTypeInternal() {}
  union {
    S_CHANNELCHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANNELCHATDefaultTypeInternal _S_CHANNELCHAT_default_instance_;
PROTOBUF_CONSTEXPR C_MAKEROOM::C_MAKEROOM(
    ::_pbi::ConstantInitialized)
  : roomname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , playerid_(int64_t{0})
  , channelid_(0){}
struct C_MAKEROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MAKEROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MAKEROOMDefaultTypeInternal() {}
  union {
    C_MAKEROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MAKEROOMDefaultTypeInternal _C_MAKEROOM_default_instance_;
PROTOBUF_CONSTEXPR S_MAKEROOM::S_MAKEROOM(
    ::_pbi::ConstantInitialized)
  : success_(false)
  , roomid_(0){}
struct S_MAKEROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MAKEROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MAKEROOMDefaultTypeInternal() {}
  union {
    S_MAKEROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MAKEROOMDefaultTypeInternal _S_MAKEROOM_default_instance_;
PROTOBUF_CONSTEXPR S_CHANNELUPDATE::S_CHANNELUPDATE(
    ::_pbi::ConstantInitialized)
  : lobbyinfo_(nullptr){}
struct S_CHANNELUPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANNELUPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANNELUPDATEDefaultTypeInternal() {}
  union {
    S_CHANNELUPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANNELUPDATEDefaultTypeInternal _S_CHANNELUPDATE_default_instance_;
PROTOBUF_CONSTEXPR C_ROOMENTER::C_ROOMENTER(
    ::_pbi::ConstantInitialized)
  : playerid_(int64_t{0})
  , channelid_(0)
  , roomid_(0){}
struct C_ROOMENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOMENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOMENTERDefaultTypeInternal() {}
  union {
    C_ROOMENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOMENTERDefaultTypeInternal _C_ROOMENTER_default_instance_;
PROTOBUF_CONSTEXPR S_ROOMENTER::S_ROOMENTER(
    ::_pbi::ConstantInitialized)
  : room_(nullptr)
  , success_(false)
  , roomid_(0){}
struct S_ROOMENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOMENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOMENTERDefaultTypeInternal() {}
  union {
    S_ROOMENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOMENTERDefaultTypeInternal _S_ROOMENTER_default_instance_;
PROTOBUF_CONSTEXPR S_ROOMUPDATE::S_ROOMUPDATE(
    ::_pbi::ConstantInitialized)
  : room_(nullptr)
  , roomid_(0){}
struct S_ROOMUPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOMUPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOMUPDATEDefaultTypeInternal() {}
  union {
    S_ROOMUPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOMUPDATEDefaultTypeInternal _S_ROOMUPDATE_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, pw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, channelinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHOIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHOIC, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHOIC, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOIC, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOIC, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOIC, lobbyinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHAT, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHAT, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHAT, chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHAT, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHAT, chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEROOM, roomname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEROOM, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEROOM, channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEROOM, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEROOM, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELUPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELUPDATE, lobbyinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMENTER, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMENTER, playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMENTER, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMUPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMUPDATE, roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMUPDATE, room_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 8, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 17, -1, -1, sizeof(::Protocol::C_CHANNELCHOIC)},
  { 25, -1, -1, sizeof(::Protocol::S_CHANNELCHOIC)},
  { 34, -1, -1, sizeof(::Protocol::C_CHANNELCHAT)},
  { 43, -1, -1, sizeof(::Protocol::S_CHANNELCHAT)},
  { 51, -1, -1, sizeof(::Protocol::C_MAKEROOM)},
  { 60, -1, -1, sizeof(::Protocol::S_MAKEROOM)},
  { 68, -1, -1, sizeof(::Protocol::S_CHANNELUPDATE)},
  { 75, -1, -1, sizeof(::Protocol::C_ROOMENTER)},
  { 84, -1, -1, sizeof(::Protocol::S_ROOMENTER)},
  { 93, -1, -1, sizeof(::Protocol::S_ROOMUPDATE)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_CHANNELCHOIC_default_instance_._instance,
  &::Protocol::_S_CHANNELCHOIC_default_instance_._instance,
  &::Protocol::_C_CHANNELCHAT_default_instance_._instance,
  &::Protocol::_S_CHANNELCHAT_default_instance_._instance,
  &::Protocol::_C_MAKEROOM_default_instance_._instance,
  &::Protocol::_S_MAKEROOM_default_instance_._instance,
  &::Protocol::_S_CHANNELUPDATE_default_instance_._instance,
  &::Protocol::_C_ROOMENTER_default_instance_._instance,
  &::Protocol::_S_ROOMENTER_default_instance_._instance,
  &::Protocol::_S_ROOMUPDATE_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\037google/proto"
  "buf/timestamp.proto\032\nEnum.proto\032\014Struct."
  "proto\"!\n\007C_LOGIN\022\n\n\002id\030\001 \001(\t\022\n\n\002pw\030\002 \001(\t"
  "\"X\n\007S_LOGIN\022\017\n\007success\030\001 \001(\010\022*\n\013channelI"
  "nfo\030\002 \001(\0132\025.Protocol.ChannelInfo\022\020\n\010play"
  "erId\030\003 \001(\003\"5\n\016C_CHANNELCHOIC\022\021\n\tchannelI"
  "d\030\001 \001(\005\022\020\n\010playerId\030\002 \001(\003\"\\\n\016S_CHANNELCH"
  "OIC\022\017\n\007success\030\001 \001(\010\022\021\n\tchannelId\030\002 \001(\005\022"
  "&\n\tlobbyInfo\030\003 \001(\0132\023.Protocol.LobbyInfo\""
  "B\n\rC_CHANNELCHAT\022\020\n\010playerId\030\001 \001(\003\022\021\n\tch"
  "annelId\030\002 \001(\005\022\014\n\004chat\030\003 \001(\t\"+\n\rS_CHANNEL"
  "CHAT\022\014\n\004name\030\001 \001(\t\022\014\n\004chat\030\002 \001(\t\"C\n\nC_MA"
  "KEROOM\022\020\n\010roomName\030\001 \001(\t\022\020\n\010playerId\030\002 \001"
  "(\003\022\021\n\tchannelId\030\003 \001(\005\"-\n\nS_MAKEROOM\022\017\n\007s"
  "uccess\030\001 \001(\010\022\016\n\006roomId\030\002 \001(\005\"9\n\017S_CHANNE"
  "LUPDATE\022&\n\tlobbyInfo\030\001 \001(\0132\023.Protocol.Lo"
  "bbyInfo\"B\n\013C_ROOMENTER\022\021\n\tchannelId\030\001 \001("
  "\005\022\020\n\010playerId\030\002 \001(\003\022\016\n\006roomId\030\003 \001(\005\"L\n\013S"
  "_ROOMENTER\022\017\n\007success\030\001 \001(\010\022\016\n\006roomId\030\002 "
  "\001(\005\022\034\n\004room\030\003 \001(\0132\016.Protocol.Room\"<\n\014S_R"
  "OOMUPDATE\022\016\n\006roomId\030\001 \001(\005\022\034\n\004room\030\002 \001(\0132"
  "\016.Protocol.RoomB\033\252\002\030Google.Protobuf.Prot"
  "ocolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[3] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 892, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 3, 12,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pw().empty()) {
    pw_.Set(from._internal_pw(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

inline void C_LOGIN::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pw_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pw_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  pw_.Destroy();
}

void C_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.id"));
        } else
          goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.pw"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }

void C_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_LOGIN *>(to)->MergeFrom(
      static_cast<const C_LOGIN &>(from));
}


void C_LOGIN::MergeFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pw_, lhs_arena,
      &other->pw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
  static const ::Protocol::ChannelInfo& channelinfo(const S_LOGIN* msg);
};

const ::Protocol::ChannelInfo&
S_LOGIN::_Internal::channelinfo(const S_LOGIN* msg) {
  return *msg->channelinfo_;
}
void S_LOGIN::clear_channelinfo() {
  if (GetArenaForAllocation() == nullptr && channelinfo_ != nullptr) {
    delete channelinfo_;
  }
  channelinfo_ = nullptr;
}
S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channelinfo()) {
    channelinfo_ = new ::Protocol::ChannelInfo(*from.channelinfo_);
  } else {
    channelinfo_ = nullptr;
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channelinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&channelinfo_)) + sizeof(success_));
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channelinfo_;
}

void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channelinfo_ != nullptr) {
    delete channelinfo_;
  }
  channelinfo_ = nullptr;
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ChannelInfo channelInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 playerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.ChannelInfo channelInfo = 2;
  if (this->_internal_has_channelinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channelinfo(this),
        _Internal::channelinfo(this).GetCachedSize(), target, stream);
  }

  // int64 playerId = 3;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ChannelInfo channelInfo = 2;
  if (this->_internal_has_channelinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channelinfo_);
  }

  // int64 playerId = 3;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }

void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_LOGIN *>(to)->MergeFrom(
      static_cast<const S_LOGIN &>(from));
}


void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channelinfo()) {
    _internal_mutable_channelinfo()->::Protocol::ChannelInfo::MergeFrom(from._internal_channelinfo());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, success_)
      + sizeof(S_LOGIN::success_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, channelinfo_)>(
          reinterpret_cast<char*>(&channelinfo_),
          reinterpret_cast<char*>(&other->channelinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CHANNELCHOIC::_Internal {
 public:
};

C_CHANNELCHOIC::C_CHANNELCHOIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHANNELCHOIC)
}
C_CHANNELCHOIC::C_CHANNELCHOIC(const C_CHANNELCHOIC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHANNELCHOIC)
}

inline void C_CHANNELCHOIC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
}

C_CHANNELCHOIC::~C_CHANNELCHOIC() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHANNELCHOIC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHANNELCHOIC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_CHANNELCHOIC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHANNELCHOIC::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHANNELCHOIC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHANNELCHOIC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHANNELCHOIC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHANNELCHOIC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channelid(), target);
  }

  // int64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHANNELCHOIC)
  return target;
}

size_t C_CHANNELCHOIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHANNELCHOIC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHANNELCHOIC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHANNELCHOIC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHANNELCHOIC::GetClassData() const { return &_class_data_; }

void C_CHANNELCHOIC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHANNELCHOIC *>(to)->MergeFrom(
      static_cast<const C_CHANNELCHOIC &>(from));
}


void C_CHANNELCHOIC::MergeFrom(const C_CHANNELCHOIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHANNELCHOIC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHANNELCHOIC::CopyFrom(const C_CHANNELCHOIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHANNELCHOIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHANNELCHOIC::IsInitialized() const {
  return true;
}

void C_CHANNELCHOIC::InternalSwap(C_CHANNELCHOIC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_CHANNELCHOIC, channelid_)
      + sizeof(C_CHANNELCHOIC::channelid_)
      - PROTOBUF_FIELD_OFFSET(C_CHANNELCHOIC, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHANNELCHOIC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_CHANNELCHOIC::_Internal {
 public:
  static const ::Protocol::LobbyInfo& lobbyinfo(const S_CHANNELCHOIC* msg);
};

const ::Protocol::LobbyInfo&
S_CHANNELCHOIC::_Internal::lobbyinfo(const S_CHANNELCHOIC* msg) {
  return *msg->lobbyinfo_;
}
void S_CHANNELCHOIC::clear_lobbyinfo() {
  if (GetArenaForAllocation() == nullptr && lobbyinfo_ != nullptr) {
    delete lobbyinfo_;
  }
  lobbyinfo_ = nullptr;
}
S_CHANNELCHOIC::S_CHANNELCHOIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANNELCHOIC)
}
S_CHANNELCHOIC::S_CHANNELCHOIC(const S_CHANNELCHOIC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lobbyinfo()) {
    lobbyinfo_ = new ::Protocol::LobbyInfo(*from.lobbyinfo_);
  } else {
    lobbyinfo_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANNELCHOIC)
}

inline void S_CHANNELCHOIC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobbyinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&lobbyinfo_)) + sizeof(channelid_));
}

S_CHANNELCHOIC::~S_CHANNELCHOIC() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANNELCHOIC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANNELCHOIC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lobbyinfo_;
}

void S_CHANNELCHOIC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANNELCHOIC::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANNELCHOIC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lobbyinfo_ != nullptr) {
    delete lobbyinfo_;
  }
  lobbyinfo_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&success_)) + sizeof(channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANNELCHOIC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LobbyInfo lobbyInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbyinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANNELCHOIC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANNELCHOIC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 channelId = 2;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  // .Protocol.LobbyInfo lobbyInfo = 3;
  if (this->_internal_has_lobbyinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::lobbyinfo(this),
        _Internal::lobbyinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANNELCHOIC)
  return target;
}

size_t S_CHANNELCHOIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANNELCHOIC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.LobbyInfo lobbyInfo = 3;
  if (this->_internal_has_lobbyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lobbyinfo_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 channelId = 2;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANNELCHOIC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANNELCHOIC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANNELCHOIC::GetClassData() const { return &_class_data_; }

void S_CHANNELCHOIC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANNELCHOIC *>(to)->MergeFrom(
      static_cast<const S_CHANNELCHOIC &>(from));
}


void S_CHANNELCHOIC::MergeFrom(const S_CHANNELCHOIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANNELCHOIC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lobbyinfo()) {
    _internal_mutable_lobbyinfo()->::Protocol::LobbyInfo::MergeFrom(from._internal_lobbyinfo());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANNELCHOIC::CopyFrom(const S_CHANNELCHOIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANNELCHOIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANNELCHOIC::IsInitialized() const {
  return true;
}

void S_CHANNELCHOIC::InternalSwap(S_CHANNELCHOIC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CHANNELCHOIC, channelid_)
      + sizeof(S_CHANNELCHOIC::channelid_)
      - PROTOBUF_FIELD_OFFSET(S_CHANNELCHOIC, lobbyinfo_)>(
          reinterpret_cast<char*>(&lobbyinfo_),
          reinterpret_cast<char*>(&other->lobbyinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANNELCHOIC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_CHANNELCHAT::_Internal {
 public:
};

C_CHANNELCHAT::C_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHANNELCHAT)
}
C_CHANNELCHAT::C_CHANNELCHAT(const C_CHANNELCHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    chat_.Set(from._internal_chat(), 
      GetArenaForAllocation());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHANNELCHAT)
}

inline void C_CHANNELCHAT::SharedCtor() {
chat_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
}

C_CHANNELCHAT::~C_CHANNELCHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHANNELCHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHANNELCHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_.Destroy();
}

void C_CHANNELCHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHANNELCHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHANNELCHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHANNELCHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHANNELCHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // int32 channelId = 2;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  // string chat = 3;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHANNELCHAT.chat");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHANNELCHAT)
  return target;
}

size_t C_CHANNELCHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHANNELCHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat = 3;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int32 channelId = 2;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHANNELCHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHANNELCHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHANNELCHAT::GetClassData() const { return &_class_data_; }

void C_CHANNELCHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHANNELCHAT *>(to)->MergeFrom(
      static_cast<const C_CHANNELCHAT &>(from));
}


void C_CHANNELCHAT::MergeFrom(const C_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHANNELCHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat().empty()) {
    _internal_set_chat(from._internal_chat());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHANNELCHAT::CopyFrom(const C_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHANNELCHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHANNELCHAT::IsInitialized() const {
  return true;
}

void C_CHANNELCHAT::InternalSwap(C_CHANNELCHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_, lhs_arena,
      &other->chat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_CHANNELCHAT, channelid_)
      + sizeof(C_CHANNELCHAT::channelid_)
      - PROTOBUF_FIELD_OFFSET(C_CHANNELCHAT, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHANNELCHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_CHANNELCHAT::_Internal {
 public:
};

S_CHANNELCHAT::S_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANNELCHAT)
}
S_CHANNELCHAT::S_CHANNELCHAT(const S_CHANNELCHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    chat_.Set(from._internal_chat(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANNELCHAT)
}

inline void S_CHANNELCHAT::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHANNELCHAT::~S_CHANNELCHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANNELCHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANNELCHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  chat_.Destroy();
}

void S_CHANNELCHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANNELCHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  chat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANNELCHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHANNELCHAT.name"));
        } else
          goto handle_unusual;
        continue;
      // string chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHANNELCHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANNELCHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHANNELCHAT.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string chat = 2;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHANNELCHAT.chat");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANNELCHAT)
  return target;
}

size_t S_CHANNELCHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANNELCHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string chat = 2;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANNELCHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANNELCHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANNELCHAT::GetClassData() const { return &_class_data_; }

void S_CHANNELCHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANNELCHAT *>(to)->MergeFrom(
      static_cast<const S_CHANNELCHAT &>(from));
}


void S_CHANNELCHAT::MergeFrom(const S_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANNELCHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_chat().empty()) {
    _internal_set_chat(from._internal_chat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANNELCHAT::CopyFrom(const S_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANNELCHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANNELCHAT::IsInitialized() const {
  return true;
}

void S_CHANNELCHAT::InternalSwap(S_CHANNELCHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_, lhs_arena,
      &other->chat_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANNELCHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_MAKEROOM::_Internal {
 public:
};

C_MAKEROOM::C_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MAKEROOM)
}
C_MAKEROOM::C_MAKEROOM(const C_MAKEROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    roomname_.Set(from._internal_roomname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MAKEROOM)
}

inline void C_MAKEROOM::SharedCtor() {
roomname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
}

C_MAKEROOM::~C_MAKEROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_MAKEROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MAKEROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.Destroy();
}

void C_MAKEROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MAKEROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MAKEROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MAKEROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_MAKEROOM.roomName"));
        } else
          goto handle_unusual;
        continue;
      // int64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MAKEROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MAKEROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_MAKEROOM.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  // int64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  // int32 channelId = 3;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MAKEROOM)
  return target;
}

size_t C_MAKEROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MAKEROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // int64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int32 channelId = 3;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MAKEROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_MAKEROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MAKEROOM::GetClassData() const { return &_class_data_; }

void C_MAKEROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_MAKEROOM *>(to)->MergeFrom(
      static_cast<const C_MAKEROOM &>(from));
}


void C_MAKEROOM::MergeFrom(const C_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MAKEROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MAKEROOM::CopyFrom(const C_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MAKEROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MAKEROOM::IsInitialized() const {
  return true;
}

void C_MAKEROOM::InternalSwap(C_MAKEROOM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomname_, lhs_arena,
      &other->roomname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_MAKEROOM, channelid_)
      + sizeof(C_MAKEROOM::channelid_)
      - PROTOBUF_FIELD_OFFSET(C_MAKEROOM, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MAKEROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_MAKEROOM::_Internal {
 public:
};

S_MAKEROOM::S_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MAKEROOM)
}
S_MAKEROOM::S_MAKEROOM(const S_MAKEROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MAKEROOM)
}

inline void S_MAKEROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(roomid_));
}

S_MAKEROOM::~S_MAKEROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_MAKEROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MAKEROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MAKEROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MAKEROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MAKEROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&success_)) + sizeof(roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MAKEROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MAKEROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MAKEROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 roomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MAKEROOM)
  return target;
}

size_t S_MAKEROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MAKEROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 roomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MAKEROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_MAKEROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MAKEROOM::GetClassData() const { return &_class_data_; }

void S_MAKEROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_MAKEROOM *>(to)->MergeFrom(
      static_cast<const S_MAKEROOM &>(from));
}


void S_MAKEROOM::MergeFrom(const S_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MAKEROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MAKEROOM::CopyFrom(const S_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MAKEROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MAKEROOM::IsInitialized() const {
  return true;
}

void S_MAKEROOM::InternalSwap(S_MAKEROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MAKEROOM, roomid_)
      + sizeof(S_MAKEROOM::roomid_)
      - PROTOBUF_FIELD_OFFSET(S_MAKEROOM, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MAKEROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_CHANNELUPDATE::_Internal {
 public:
  static const ::Protocol::LobbyInfo& lobbyinfo(const S_CHANNELUPDATE* msg);
};

const ::Protocol::LobbyInfo&
S_CHANNELUPDATE::_Internal::lobbyinfo(const S_CHANNELUPDATE* msg) {
  return *msg->lobbyinfo_;
}
void S_CHANNELUPDATE::clear_lobbyinfo() {
  if (GetArenaForAllocation() == nullptr && lobbyinfo_ != nullptr) {
    delete lobbyinfo_;
  }
  lobbyinfo_ = nullptr;
}
S_CHANNELUPDATE::S_CHANNELUPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANNELUPDATE)
}
S_CHANNELUPDATE::S_CHANNELUPDATE(const S_CHANNELUPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lobbyinfo()) {
    lobbyinfo_ = new ::Protocol::LobbyInfo(*from.lobbyinfo_);
  } else {
    lobbyinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANNELUPDATE)
}

inline void S_CHANNELUPDATE::SharedCtor() {
lobbyinfo_ = nullptr;
}

S_CHANNELUPDATE::~S_CHANNELUPDATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANNELUPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANNELUPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lobbyinfo_;
}

void S_CHANNELUPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANNELUPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANNELUPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lobbyinfo_ != nullptr) {
    delete lobbyinfo_;
  }
  lobbyinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANNELUPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.LobbyInfo lobbyInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobbyinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANNELUPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANNELUPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.LobbyInfo lobbyInfo = 1;
  if (this->_internal_has_lobbyinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::lobbyinfo(this),
        _Internal::lobbyinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANNELUPDATE)
  return target;
}

size_t S_CHANNELUPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANNELUPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.LobbyInfo lobbyInfo = 1;
  if (this->_internal_has_lobbyinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lobbyinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANNELUPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANNELUPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANNELUPDATE::GetClassData() const { return &_class_data_; }

void S_CHANNELUPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANNELUPDATE *>(to)->MergeFrom(
      static_cast<const S_CHANNELUPDATE &>(from));
}


void S_CHANNELUPDATE::MergeFrom(const S_CHANNELUPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANNELUPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lobbyinfo()) {
    _internal_mutable_lobbyinfo()->::Protocol::LobbyInfo::MergeFrom(from._internal_lobbyinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANNELUPDATE::CopyFrom(const S_CHANNELUPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANNELUPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANNELUPDATE::IsInitialized() const {
  return true;
}

void S_CHANNELUPDATE::InternalSwap(S_CHANNELUPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(lobbyinfo_, other->lobbyinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANNELUPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_ROOMENTER::_Internal {
 public:
};

C_ROOMENTER::C_ROOMENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOMENTER)
}
C_ROOMENTER::C_ROOMENTER(const C_ROOMENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOMENTER)
}

inline void C_ROOMENTER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
}

C_ROOMENTER::~C_ROOMENTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOMENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ROOMENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ROOMENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ROOMENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOMENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOMENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roomId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ROOMENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOMENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channelid(), target);
  }

  // int64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_playerid(), target);
  }

  // int32 roomId = 3;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOMENTER)
  return target;
}

size_t C_ROOMENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOMENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  // int32 roomId = 3;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOMENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ROOMENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOMENTER::GetClassData() const { return &_class_data_; }

void C_ROOMENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ROOMENTER *>(to)->MergeFrom(
      static_cast<const C_ROOMENTER &>(from));
}


void C_ROOMENTER::MergeFrom(const C_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOMENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ROOMENTER::CopyFrom(const C_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOMENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOMENTER::IsInitialized() const {
  return true;
}

void C_ROOMENTER::InternalSwap(C_ROOMENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ROOMENTER, roomid_)
      + sizeof(C_ROOMENTER::roomid_)
      - PROTOBUF_FIELD_OFFSET(C_ROOMENTER, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOMENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_ROOMENTER::_Internal {
 public:
  static const ::Protocol::Room& room(const S_ROOMENTER* msg);
};

const ::Protocol::Room&
S_ROOMENTER::_Internal::room(const S_ROOMENTER* msg) {
  return *msg->room_;
}
void S_ROOMENTER::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
S_ROOMENTER::S_ROOMENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOMENTER)
}
S_ROOMENTER::S_ROOMENTER(const S_ROOMENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::Protocol::Room(*from.room_);
  } else {
    room_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOMENTER)
}

inline void S_ROOMENTER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&room_)) + sizeof(roomid_));
}

S_ROOMENTER::~S_ROOMENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOMENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOMENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void S_ROOMENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOMENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOMENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roomid_) -
      reinterpret_cast<char*>(&success_)) + sizeof(roomid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOMENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Room room = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOMENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOMENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 roomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomid(), target);
  }

  // .Protocol.Room room = 3;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOMENTER)
  return target;
}

size_t S_ROOMENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOMENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Room room = 3;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 roomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOMENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ROOMENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOMENTER::GetClassData() const { return &_class_data_; }

void S_ROOMENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ROOMENTER *>(to)->MergeFrom(
      static_cast<const S_ROOMENTER &>(from));
}


void S_ROOMENTER::MergeFrom(const S_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOMENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _internal_mutable_room()->::Protocol::Room::MergeFrom(from._internal_room());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOMENTER::CopyFrom(const S_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOMENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOMENTER::IsInitialized() const {
  return true;
}

void S_ROOMENTER::InternalSwap(S_ROOMENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ROOMENTER, roomid_)
      + sizeof(S_ROOMENTER::roomid_)
      - PROTOBUF_FIELD_OFFSET(S_ROOMENTER, room_)>(
          reinterpret_cast<char*>(&room_),
          reinterpret_cast<char*>(&other->room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOMENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_ROOMUPDATE::_Internal {
 public:
  static const ::Protocol::Room& room(const S_ROOMUPDATE* msg);
};

const ::Protocol::Room&
S_ROOMUPDATE::_Internal::room(const S_ROOMUPDATE* msg) {
  return *msg->room_;
}
void S_ROOMUPDATE::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
S_ROOMUPDATE::S_ROOMUPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOMUPDATE)
}
S_ROOMUPDATE::S_ROOMUPDATE(const S_ROOMUPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::Protocol::Room(*from.room_);
  } else {
    room_ = nullptr;
  }
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOMUPDATE)
}

inline void S_ROOMUPDATE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&room_)) + sizeof(roomid_));
}

S_ROOMUPDATE::~S_ROOMUPDATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOMUPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOMUPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void S_ROOMUPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOMUPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOMUPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOMUPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Room room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOMUPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOMUPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // .Protocol.Room room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOMUPDATE)
  return target;
}

size_t S_ROOMUPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOMUPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Room room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOMUPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ROOMUPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOMUPDATE::GetClassData() const { return &_class_data_; }

void S_ROOMUPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ROOMUPDATE *>(to)->MergeFrom(
      static_cast<const S_ROOMUPDATE &>(from));
}


void S_ROOMUPDATE::MergeFrom(const S_ROOMUPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOMUPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _internal_mutable_room()->::Protocol::Room::MergeFrom(from._internal_room());
  }
  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOMUPDATE::CopyFrom(const S_ROOMUPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOMUPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOMUPDATE::IsInitialized() const {
  return true;
}

void S_ROOMUPDATE::InternalSwap(S_ROOMUPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ROOMUPDATE, roomid_)
      + sizeof(S_ROOMUPDATE::roomid_)
      - PROTOBUF_FIELD_OFFSET(S_ROOMUPDATE, room_)>(
          reinterpret_cast<char*>(&room_),
          reinterpret_cast<char*>(&other->room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOMUPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHANNELCHOIC*
Arena::CreateMaybeMessage< ::Protocol::C_CHANNELCHOIC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHANNELCHOIC >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANNELCHOIC*
Arena::CreateMaybeMessage< ::Protocol::S_CHANNELCHOIC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANNELCHOIC >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHANNELCHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHANNELCHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHANNELCHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANNELCHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHANNELCHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANNELCHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MAKEROOM*
Arena::CreateMaybeMessage< ::Protocol::C_MAKEROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MAKEROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MAKEROOM*
Arena::CreateMaybeMessage< ::Protocol::S_MAKEROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MAKEROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANNELUPDATE*
Arena::CreateMaybeMessage< ::Protocol::S_CHANNELUPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANNELUPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOMENTER*
Arena::CreateMaybeMessage< ::Protocol::C_ROOMENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOMENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOMENTER*
Arena::CreateMaybeMessage< ::Protocol::S_ROOMENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOMENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOMUPDATE*
Arena::CreateMaybeMessage< ::Protocol::S_ROOMUPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOMUPDATE >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
