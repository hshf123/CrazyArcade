// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pw_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized)
  : channels_()
  , player_(nullptr)
  , success_(false){}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_CHANNELCHOICE::C_CHANNELCHOICE(
    ::_pbi::ConstantInitialized)
  : channelid_(0){}
struct C_CHANNELCHOICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHANNELCHOICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHANNELCHOICEDefaultTypeInternal() {}
  union {
    C_CHANNELCHOICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHANNELCHOICEDefaultTypeInternal _C_CHANNELCHOICE_default_instance_;
PROTOBUF_CONSTEXPR S_CHANNELCHOICE::S_CHANNELCHOICE(
    ::_pbi::ConstantInitialized)
  : rooms_()
  , success_(false)
  , channelid_(0){}
struct S_CHANNELCHOICEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANNELCHOICEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANNELCHOICEDefaultTypeInternal() {}
  union {
    S_CHANNELCHOICE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANNELCHOICEDefaultTypeInternal _S_CHANNELCHOICE_default_instance_;
PROTOBUF_CONSTEXPR C_CHANNELCHAT::C_CHANNELCHAT(
    ::_pbi::ConstantInitialized)
  : chat_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_CHANNELCHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHANNELCHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHANNELCHATDefaultTypeInternal() {}
  union {
    C_CHANNELCHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHANNELCHATDefaultTypeInternal _C_CHANNELCHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHANNELCHAT::S_CHANNELCHAT(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chat_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct S_CHANNELCHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANNELCHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANNELCHATDefaultTypeInternal() {}
  union {
    S_CHANNELCHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANNELCHATDefaultTypeInternal _S_CHANNELCHAT_default_instance_;
PROTOBUF_CONSTEXPR C_MAKEROOM::C_MAKEROOM(
    ::_pbi::ConstantInitialized)
  : roomname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_MAKEROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MAKEROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MAKEROOMDefaultTypeInternal() {}
  union {
    C_MAKEROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MAKEROOMDefaultTypeInternal _C_MAKEROOM_default_instance_;
PROTOBUF_CONSTEXPR S_MAKEROOM::S_MAKEROOM(
    ::_pbi::ConstantInitialized)
  : room_(nullptr)
  , success_(false){}
struct S_MAKEROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MAKEROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MAKEROOMDefaultTypeInternal() {}
  union {
    S_MAKEROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MAKEROOMDefaultTypeInternal _S_MAKEROOM_default_instance_;
PROTOBUF_CONSTEXPR S_CHANNELUPDATE::S_CHANNELUPDATE(
    ::_pbi::ConstantInitialized)
  : rooms_(){}
struct S_CHANNELUPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANNELUPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANNELUPDATEDefaultTypeInternal() {}
  union {
    S_CHANNELUPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANNELUPDATEDefaultTypeInternal _S_CHANNELUPDATE_default_instance_;
PROTOBUF_CONSTEXPR C_ROOMENTER::C_ROOMENTER(
    ::_pbi::ConstantInitialized)
  : roomid_(0){}
struct C_ROOMENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOMENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOMENTERDefaultTypeInternal() {}
  union {
    C_ROOMENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOMENTERDefaultTypeInternal _C_ROOMENTER_default_instance_;
PROTOBUF_CONSTEXPR S_ROOMENTER::S_ROOMENTER(
    ::_pbi::ConstantInitialized)
  : room_(nullptr)
  , success_(false){}
struct S_ROOMENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOMENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOMENTERDefaultTypeInternal() {}
  union {
    S_ROOMENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOMENTERDefaultTypeInternal _S_ROOMENTER_default_instance_;
PROTOBUF_CONSTEXPR C_ROOMLEAVE::C_ROOMLEAVE(
    ::_pbi::ConstantInitialized){}
struct C_ROOMLEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOMLEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOMLEAVEDefaultTypeInternal() {}
  union {
    C_ROOMLEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOMLEAVEDefaultTypeInternal _C_ROOMLEAVE_default_instance_;
PROTOBUF_CONSTEXPR S_ROOMUPDATE::S_ROOMUPDATE(
    ::_pbi::ConstantInitialized)
  : room_(nullptr){}
struct S_ROOMUPDATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOMUPDATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOMUPDATEDefaultTypeInternal() {}
  union {
    S_ROOMUPDATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOMUPDATEDefaultTypeInternal _S_ROOMUPDATE_default_instance_;
PROTOBUF_CONSTEXPR C_ROOMREADY::C_ROOMREADY(
    ::_pbi::ConstantInitialized){}
struct C_ROOMREADYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOMREADYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOMREADYDefaultTypeInternal() {}
  union {
    C_ROOMREADY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOMREADYDefaultTypeInternal _C_ROOMREADY_default_instance_;
PROTOBUF_CONSTEXPR C_ROOMCHAT::C_ROOMCHAT(
    ::_pbi::ConstantInitialized)
  : msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct C_ROOMCHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOMCHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOMCHATDefaultTypeInternal() {}
  union {
    C_ROOMCHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOMCHATDefaultTypeInternal _C_ROOMCHAT_default_instance_;
PROTOBUF_CONSTEXPR S_ROOMCHAT::S_ROOMCHAT(
    ::_pbi::ConstantInitialized)
  : msg_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , player_(nullptr){}
struct S_ROOMCHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOMCHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOMCHATDefaultTypeInternal() {}
  union {
    S_ROOMCHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOMCHATDefaultTypeInternal _S_ROOMCHAT_default_instance_;
PROTOBUF_CONSTEXPR C_ROOMSTART::C_ROOMSTART(
    ::_pbi::ConstantInitialized){}
struct C_ROOMSTARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOMSTARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOMSTARTDefaultTypeInternal() {}
  union {
    C_ROOMSTART _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOMSTARTDefaultTypeInternal _C_ROOMSTART_default_instance_;
PROTOBUF_CONSTEXPR S_ROOMSTART::S_ROOMSTART(
    ::_pbi::ConstantInitialized)
  : spawn_()
  , room_(nullptr)
  , success_(false){}
struct S_ROOMSTARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOMSTARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOMSTARTDefaultTypeInternal() {}
  union {
    S_ROOMSTART _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOMSTARTDefaultTypeInternal _S_ROOMSTART_default_instance_;
PROTOBUF_CONSTEXPR C_MOVE::C_MOVE(
    ::_pbi::ConstantInitialized)
  : positioninfo_(nullptr){}
struct C_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S_MOVE::S_MOVE(
    ::_pbi::ConstantInitialized)
  : player_(nullptr)
  , positioninfo_(nullptr)
  , force_(false){}
struct S_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
PROTOBUF_CONSTEXPR C_BOMB::C_BOMB(
    ::_pbi::ConstantInitialized)
  : cellpos_(nullptr){}
struct C_BOMBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BOMBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BOMBDefaultTypeInternal() {}
  union {
    C_BOMB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BOMBDefaultTypeInternal _C_BOMB_default_instance_;
PROTOBUF_CONSTEXPR S_BOMB::S_BOMB(
    ::_pbi::ConstantInitialized)
  : player_(nullptr)
  , cellpos_(nullptr){}
struct S_BOMBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BOMBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BOMBDefaultTypeInternal() {}
  union {
    S_BOMB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BOMBDefaultTypeInternal _S_BOMB_default_instance_;
PROTOBUF_CONSTEXPR C_BOMBEND::C_BOMBEND(
    ::_pbi::ConstantInitialized)
  : cellpos_(nullptr){}
struct C_BOMBENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_BOMBENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_BOMBENDDefaultTypeInternal() {}
  union {
    C_BOMBEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_BOMBENDDefaultTypeInternal _C_BOMBEND_default_instance_;
PROTOBUF_CONSTEXPR S_BOMBEND::S_BOMBEND(
    ::_pbi::ConstantInitialized)
  : destroyobjectcellposes_()
  , trapplayers_()
  , player_(nullptr)
  , bombcellpos_(nullptr){}
struct S_BOMBENDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_BOMBENDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_BOMBENDDefaultTypeInternal() {}
  union {
    S_BOMBEND _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_BOMBENDDefaultTypeInternal _S_BOMBEND_default_instance_;
PROTOBUF_CONSTEXPR S_ITEMSPAWN::S_ITEMSPAWN(
    ::_pbi::ConstantInitialized)
  : cellpos_(nullptr)
  , itemtype_(0)
{}
struct S_ITEMSPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ITEMSPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ITEMSPAWNDefaultTypeInternal() {}
  union {
    S_ITEMSPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ITEMSPAWNDefaultTypeInternal _S_ITEMSPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_DEAD::S_DEAD(
    ::_pbi::ConstantInitialized)
  : player_(nullptr)
  , posinfo_(nullptr){}
struct S_DEADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DEADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DEADDefaultTypeInternal() {}
  union {
    S_DEAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DEADDefaultTypeInternal _S_DEAD_default_instance_;
PROTOBUF_CONSTEXPR S_ITEMACQUISITION::S_ITEMACQUISITION(
    ::_pbi::ConstantInitialized)
  : playerinfo_(nullptr)
  , itempos_(nullptr){}
struct S_ITEMACQUISITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ITEMACQUISITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ITEMACQUISITIONDefaultTypeInternal() {}
  union {
    S_ITEMACQUISITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ITEMACQUISITIONDefaultTypeInternal _S_ITEMACQUISITION_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[27];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, pw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, channels_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHOICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHOICE, channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOICE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOICE, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOICE, channelid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHOICE, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANNELCHAT, chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHAT, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELCHAT, chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MAKEROOM, roomname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEROOM, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MAKEROOM, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELUPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANNELUPDATE, rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMENTER, roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMENTER, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMLEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMUPDATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMUPDATE, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMREADY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMCHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMCHAT, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMCHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMCHAT, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMCHAT, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOMSTART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMSTART, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMSTART, success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMSTART, room_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOMSTART, spawn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, positioninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, force_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, positioninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOMB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOMB, cellpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMB, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMB, cellpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOMBEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_BOMBEND, cellpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMBEND, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMBEND, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMBEND, bombcellpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMBEND, destroyobjectcellposes_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_BOMBEND, trapplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ITEMSPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ITEMSPAWN, cellpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ITEMSPAWN, itemtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEAD, player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DEAD, posinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ITEMACQUISITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ITEMACQUISITION, playerinfo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ITEMACQUISITION, itempos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 8, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 17, -1, -1, sizeof(::Protocol::C_CHANNELCHOICE)},
  { 24, -1, -1, sizeof(::Protocol::S_CHANNELCHOICE)},
  { 33, -1, -1, sizeof(::Protocol::C_CHANNELCHAT)},
  { 40, -1, -1, sizeof(::Protocol::S_CHANNELCHAT)},
  { 48, -1, -1, sizeof(::Protocol::C_MAKEROOM)},
  { 55, -1, -1, sizeof(::Protocol::S_MAKEROOM)},
  { 63, -1, -1, sizeof(::Protocol::S_CHANNELUPDATE)},
  { 70, -1, -1, sizeof(::Protocol::C_ROOMENTER)},
  { 77, -1, -1, sizeof(::Protocol::S_ROOMENTER)},
  { 85, -1, -1, sizeof(::Protocol::C_ROOMLEAVE)},
  { 91, -1, -1, sizeof(::Protocol::S_ROOMUPDATE)},
  { 98, -1, -1, sizeof(::Protocol::C_ROOMREADY)},
  { 104, -1, -1, sizeof(::Protocol::C_ROOMCHAT)},
  { 111, -1, -1, sizeof(::Protocol::S_ROOMCHAT)},
  { 119, -1, -1, sizeof(::Protocol::C_ROOMSTART)},
  { 125, -1, -1, sizeof(::Protocol::S_ROOMSTART)},
  { 134, -1, -1, sizeof(::Protocol::C_MOVE)},
  { 141, -1, -1, sizeof(::Protocol::S_MOVE)},
  { 150, -1, -1, sizeof(::Protocol::C_BOMB)},
  { 157, -1, -1, sizeof(::Protocol::S_BOMB)},
  { 165, -1, -1, sizeof(::Protocol::C_BOMBEND)},
  { 172, -1, -1, sizeof(::Protocol::S_BOMBEND)},
  { 182, -1, -1, sizeof(::Protocol::S_ITEMSPAWN)},
  { 190, -1, -1, sizeof(::Protocol::S_DEAD)},
  { 198, -1, -1, sizeof(::Protocol::S_ITEMACQUISITION)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_CHANNELCHOICE_default_instance_._instance,
  &::Protocol::_S_CHANNELCHOICE_default_instance_._instance,
  &::Protocol::_C_CHANNELCHAT_default_instance_._instance,
  &::Protocol::_S_CHANNELCHAT_default_instance_._instance,
  &::Protocol::_C_MAKEROOM_default_instance_._instance,
  &::Protocol::_S_MAKEROOM_default_instance_._instance,
  &::Protocol::_S_CHANNELUPDATE_default_instance_._instance,
  &::Protocol::_C_ROOMENTER_default_instance_._instance,
  &::Protocol::_S_ROOMENTER_default_instance_._instance,
  &::Protocol::_C_ROOMLEAVE_default_instance_._instance,
  &::Protocol::_S_ROOMUPDATE_default_instance_._instance,
  &::Protocol::_C_ROOMREADY_default_instance_._instance,
  &::Protocol::_C_ROOMCHAT_default_instance_._instance,
  &::Protocol::_S_ROOMCHAT_default_instance_._instance,
  &::Protocol::_C_ROOMSTART_default_instance_._instance,
  &::Protocol::_S_ROOMSTART_default_instance_._instance,
  &::Protocol::_C_MOVE_default_instance_._instance,
  &::Protocol::_S_MOVE_default_instance_._instance,
  &::Protocol::_C_BOMB_default_instance_._instance,
  &::Protocol::_S_BOMB_default_instance_._instance,
  &::Protocol::_C_BOMBEND_default_instance_._instance,
  &::Protocol::_S_BOMBEND_default_instance_._instance,
  &::Protocol::_S_ITEMSPAWN_default_instance_._instance,
  &::Protocol::_S_DEAD_default_instance_._instance,
  &::Protocol::_S_ITEMACQUISITION_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\037google/proto"
  "buf/timestamp.proto\032\nEnum.proto\032\014Struct."
  "proto\"!\n\007C_LOGIN\022\n\n\002id\030\001 \001(\t\022\n\n\002pw\030\002 \001(\t"
  "\"c\n\007S_LOGIN\022\017\n\007success\030\001 \001(\010\022$\n\010channels"
  "\030\002 \003(\0132\022.Protocol.PChannel\022!\n\006player\030\003 \001"
  "(\0132\021.Protocol.PPlayer\"$\n\017C_CHANNELCHOICE"
  "\022\021\n\tchannelId\030\001 \001(\005\"U\n\017S_CHANNELCHOICE\022\017"
  "\n\007success\030\001 \001(\010\022\021\n\tchannelId\030\002 \001(\005\022\036\n\005ro"
  "oms\030\003 \003(\0132\017.Protocol.PRoom\"\035\n\rC_CHANNELC"
  "HAT\022\014\n\004chat\030\001 \001(\t\"+\n\rS_CHANNELCHAT\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004chat\030\002 \001(\t\"\036\n\nC_MAKEROOM\022\020\n\010"
  "roomName\030\001 \001(\t\"<\n\nS_MAKEROOM\022\017\n\007success\030"
  "\001 \001(\010\022\035\n\004room\030\002 \001(\0132\017.Protocol.PRoom\"1\n\017"
  "S_CHANNELUPDATE\022\036\n\005rooms\030\001 \003(\0132\017.Protoco"
  "l.PRoom\"\035\n\013C_ROOMENTER\022\016\n\006roomId\030\001 \001(\005\"="
  "\n\013S_ROOMENTER\022\017\n\007success\030\001 \001(\010\022\035\n\004room\030\002"
  " \001(\0132\017.Protocol.PRoom\"\r\n\013C_ROOMLEAVE\"-\n\014"
  "S_ROOMUPDATE\022\035\n\004room\030\001 \001(\0132\017.Protocol.PR"
  "oom\"\r\n\013C_ROOMREADY\"\031\n\nC_ROOMCHAT\022\013\n\003msg\030"
  "\001 \001(\t\"<\n\nS_ROOMCHAT\022!\n\006player\030\001 \001(\0132\021.Pr"
  "otocol.PPlayer\022\013\n\003msg\030\002 \001(\t\"\r\n\013C_ROOMSTA"
  "RT\"b\n\013S_ROOMSTART\022\017\n\007success\030\001 \001(\010\022\035\n\004ro"
  "om\030\002 \001(\0132\017.Protocol.PRoom\022#\n\005spawn\030\003 \003(\013"
  "2\024.Protocol.PRoomStart\"7\n\006C_MOVE\022-\n\014posi"
  "tionInfo\030\001 \001(\0132\027.Protocol.PPositionInfo\""
  "i\n\006S_MOVE\022\r\n\005force\030\001 \001(\010\022!\n\006player\030\002 \001(\013"
  "2\021.Protocol.PPlayer\022-\n\014positionInfo\030\003 \001("
  "\0132\027.Protocol.PPositionInfo\"-\n\006C_BOMB\022#\n\007"
  "cellPos\030\001 \001(\0132\022.Protocol.PCellPos\"P\n\006S_B"
  "OMB\022!\n\006player\030\001 \001(\0132\021.Protocol.PPlayer\022#"
  "\n\007cellpos\030\002 \001(\0132\022.Protocol.PCellPos\"0\n\tC"
  "_BOMBEND\022#\n\007cellPos\030\001 \001(\0132\022.Protocol.PCe"
  "llPos\"\263\001\n\tS_BOMBEND\022!\n\006player\030\001 \001(\0132\021.Pr"
  "otocol.PPlayer\022\'\n\013bombCellPos\030\002 \001(\0132\022.Pr"
  "otocol.PCellPos\0222\n\026destroyObjectCellPose"
  "s\030\003 \003(\0132\022.Protocol.PCellPos\022&\n\013trapPlaye"
  "rs\030\004 \003(\0132\021.Protocol.PPlayer\"Y\n\013S_ITEMSPA"
  "WN\022#\n\007cellPos\030\001 \001(\0132\022.Protocol.PCellPos\022"
  "%\n\010itemType\030\002 \001(\0162\023.Protocol.PItemType\"U"
  "\n\006S_DEAD\022!\n\006player\030\001 \001(\0132\021.Protocol.PPla"
  "yer\022(\n\007posInfo\030\002 \001(\0132\027.Protocol.PPositio"
  "nInfo\"_\n\021S_ITEMACQUISITION\022%\n\nplayerInfo"
  "\030\001 \001(\0132\021.Protocol.PPlayer\022#\n\007itemPos\030\002 \001"
  "(\0132\022.Protocol.PCellPosB\033\252\002\030Google.Protob"
  "uf.Protocolb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[3] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 1779, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 3, 27,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pw().empty()) {
    pw_.Set(from._internal_pw(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

inline void C_LOGIN::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pw_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pw_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  pw_.Destroy();
}

void C_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.id"));
        } else
          goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.pw"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->_internal_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }

void C_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_LOGIN *>(to)->MergeFrom(
      static_cast<const C_LOGIN &>(from));
}


void C_LOGIN::MergeFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pw_, lhs_arena,
      &other->pw_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const S_LOGIN* msg);
};

const ::Protocol::PPlayer&
S_LOGIN::_Internal::player(const S_LOGIN* msg) {
  return *msg->player_;
}
void S_LOGIN::clear_channels() {
  channels_.Clear();
}
void S_LOGIN::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&player_)) + sizeof(success_));
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PChannel channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PPlayer player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .Protocol.PChannel channels = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Protocol.PPlayer player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PChannel channels = 2;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.PPlayer player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }

void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_LOGIN *>(to)->MergeFrom(
      static_cast<const S_LOGIN &>(from));
}


void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, success_)
      + sizeof(S_LOGIN::success_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CHANNELCHOICE::_Internal {
 public:
};

C_CHANNELCHOICE::C_CHANNELCHOICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHANNELCHOICE)
}
C_CHANNELCHOICE::C_CHANNELCHOICE(const C_CHANNELCHOICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channelid_ = from.channelid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHANNELCHOICE)
}

inline void C_CHANNELCHOICE::SharedCtor() {
channelid_ = 0;
}

C_CHANNELCHOICE::~C_CHANNELCHOICE() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHANNELCHOICE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHANNELCHOICE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_CHANNELCHOICE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHANNELCHOICE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHANNELCHOICE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHANNELCHOICE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHANNELCHOICE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHANNELCHOICE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHANNELCHOICE)
  return target;
}

size_t C_CHANNELCHOICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHANNELCHOICE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 channelId = 1;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHANNELCHOICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHANNELCHOICE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHANNELCHOICE::GetClassData() const { return &_class_data_; }

void C_CHANNELCHOICE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHANNELCHOICE *>(to)->MergeFrom(
      static_cast<const C_CHANNELCHOICE &>(from));
}


void C_CHANNELCHOICE::MergeFrom(const C_CHANNELCHOICE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHANNELCHOICE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHANNELCHOICE::CopyFrom(const C_CHANNELCHOICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHANNELCHOICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHANNELCHOICE::IsInitialized() const {
  return true;
}

void C_CHANNELCHOICE::InternalSwap(C_CHANNELCHOICE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channelid_, other->channelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHANNELCHOICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_CHANNELCHOICE::_Internal {
 public:
};

void S_CHANNELCHOICE::clear_rooms() {
  rooms_.Clear();
}
S_CHANNELCHOICE::S_CHANNELCHOICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rooms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANNELCHOICE)
}
S_CHANNELCHOICE::S_CHANNELCHOICE(const S_CHANNELCHOICE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(channelid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANNELCHOICE)
}

inline void S_CHANNELCHOICE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&success_)) + sizeof(channelid_));
}

S_CHANNELCHOICE::~S_CHANNELCHOICE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANNELCHOICE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANNELCHOICE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHANNELCHOICE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANNELCHOICE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANNELCHOICE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channelid_) -
      reinterpret_cast<char*>(&success_)) + sizeof(channelid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANNELCHOICE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PRoom rooms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANNELCHOICE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANNELCHOICE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 channelId = 2;
  if (this->_internal_channelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channelid(), target);
  }

  // repeated .Protocol.PRoom rooms = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANNELCHOICE)
  return target;
}

size_t S_CHANNELCHOICE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANNELCHOICE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PRoom rooms = 3;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 channelId = 2;
  if (this->_internal_channelid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channelid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANNELCHOICE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANNELCHOICE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANNELCHOICE::GetClassData() const { return &_class_data_; }

void S_CHANNELCHOICE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANNELCHOICE *>(to)->MergeFrom(
      static_cast<const S_CHANNELCHOICE &>(from));
}


void S_CHANNELCHOICE::MergeFrom(const S_CHANNELCHOICE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANNELCHOICE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_channelid() != 0) {
    _internal_set_channelid(from._internal_channelid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANNELCHOICE::CopyFrom(const S_CHANNELCHOICE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANNELCHOICE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANNELCHOICE::IsInitialized() const {
  return true;
}

void S_CHANNELCHOICE::InternalSwap(S_CHANNELCHOICE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rooms_.InternalSwap(&other->rooms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CHANNELCHOICE, channelid_)
      + sizeof(S_CHANNELCHOICE::channelid_)
      - PROTOBUF_FIELD_OFFSET(S_CHANNELCHOICE, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANNELCHOICE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_CHANNELCHAT::_Internal {
 public:
};

C_CHANNELCHAT::C_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHANNELCHAT)
}
C_CHANNELCHAT::C_CHANNELCHAT(const C_CHANNELCHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    chat_.Set(from._internal_chat(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHANNELCHAT)
}

inline void C_CHANNELCHAT::SharedCtor() {
chat_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHANNELCHAT::~C_CHANNELCHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHANNELCHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHANNELCHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chat_.Destroy();
}

void C_CHANNELCHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_CHANNELCHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHANNELCHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHANNELCHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHANNELCHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chat = 1;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHANNELCHAT.chat");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHANNELCHAT)
  return target;
}

size_t C_CHANNELCHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHANNELCHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat = 1;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHANNELCHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_CHANNELCHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHANNELCHAT::GetClassData() const { return &_class_data_; }

void C_CHANNELCHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_CHANNELCHAT *>(to)->MergeFrom(
      static_cast<const C_CHANNELCHAT &>(from));
}


void C_CHANNELCHAT::MergeFrom(const C_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHANNELCHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat().empty()) {
    _internal_set_chat(from._internal_chat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHANNELCHAT::CopyFrom(const C_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHANNELCHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHANNELCHAT::IsInitialized() const {
  return true;
}

void C_CHANNELCHAT::InternalSwap(C_CHANNELCHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_, lhs_arena,
      &other->chat_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHANNELCHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_CHANNELCHAT::_Internal {
 public:
};

S_CHANNELCHAT::S_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANNELCHAT)
}
S_CHANNELCHAT::S_CHANNELCHAT(const S_CHANNELCHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    chat_.Set(from._internal_chat(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANNELCHAT)
}

inline void S_CHANNELCHAT::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chat_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chat_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHANNELCHAT::~S_CHANNELCHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANNELCHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANNELCHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  chat_.Destroy();
}

void S_CHANNELCHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANNELCHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  chat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANNELCHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHANNELCHAT.name"));
        } else
          goto handle_unusual;
        continue;
      // string chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHANNELCHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANNELCHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANNELCHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHANNELCHAT.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string chat = 2;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHANNELCHAT.chat");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANNELCHAT)
  return target;
}

size_t S_CHANNELCHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANNELCHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string chat = 2;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANNELCHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANNELCHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANNELCHAT::GetClassData() const { return &_class_data_; }

void S_CHANNELCHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANNELCHAT *>(to)->MergeFrom(
      static_cast<const S_CHANNELCHAT &>(from));
}


void S_CHANNELCHAT::MergeFrom(const S_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANNELCHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_chat().empty()) {
    _internal_set_chat(from._internal_chat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANNELCHAT::CopyFrom(const S_CHANNELCHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANNELCHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANNELCHAT::IsInitialized() const {
  return true;
}

void S_CHANNELCHAT::InternalSwap(S_CHANNELCHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chat_, lhs_arena,
      &other->chat_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANNELCHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class C_MAKEROOM::_Internal {
 public:
};

C_MAKEROOM::C_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MAKEROOM)
}
C_MAKEROOM::C_MAKEROOM(const C_MAKEROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    roomname_.Set(from._internal_roomname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MAKEROOM)
}

inline void C_MAKEROOM::SharedCtor() {
roomname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  roomname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_MAKEROOM::~C_MAKEROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_MAKEROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MAKEROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  roomname_.Destroy();
}

void C_MAKEROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MAKEROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MAKEROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MAKEROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_MAKEROOM.roomName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MAKEROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MAKEROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_MAKEROOM.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MAKEROOM)
  return target;
}

size_t C_MAKEROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MAKEROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MAKEROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_MAKEROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MAKEROOM::GetClassData() const { return &_class_data_; }

void C_MAKEROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_MAKEROOM *>(to)->MergeFrom(
      static_cast<const C_MAKEROOM &>(from));
}


void C_MAKEROOM::MergeFrom(const C_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MAKEROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _internal_set_roomname(from._internal_roomname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MAKEROOM::CopyFrom(const C_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MAKEROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MAKEROOM::IsInitialized() const {
  return true;
}

void C_MAKEROOM::InternalSwap(C_MAKEROOM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &roomname_, lhs_arena,
      &other->roomname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MAKEROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_MAKEROOM::_Internal {
 public:
  static const ::Protocol::PRoom& room(const S_MAKEROOM* msg);
};

const ::Protocol::PRoom&
S_MAKEROOM::_Internal::room(const S_MAKEROOM* msg) {
  return *msg->room_;
}
void S_MAKEROOM::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
S_MAKEROOM::S_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MAKEROOM)
}
S_MAKEROOM::S_MAKEROOM(const S_MAKEROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::Protocol::PRoom(*from.room_);
  } else {
    room_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MAKEROOM)
}

inline void S_MAKEROOM::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&room_)) + sizeof(success_));
}

S_MAKEROOM::~S_MAKEROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_MAKEROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MAKEROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void S_MAKEROOM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MAKEROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MAKEROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MAKEROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PRoom room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MAKEROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MAKEROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.PRoom room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MAKEROOM)
  return target;
}

size_t S_MAKEROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MAKEROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PRoom room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MAKEROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_MAKEROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MAKEROOM::GetClassData() const { return &_class_data_; }

void S_MAKEROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_MAKEROOM *>(to)->MergeFrom(
      static_cast<const S_MAKEROOM &>(from));
}


void S_MAKEROOM::MergeFrom(const S_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MAKEROOM)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _internal_mutable_room()->::Protocol::PRoom::MergeFrom(from._internal_room());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MAKEROOM::CopyFrom(const S_MAKEROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MAKEROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MAKEROOM::IsInitialized() const {
  return true;
}

void S_MAKEROOM::InternalSwap(S_MAKEROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MAKEROOM, success_)
      + sizeof(S_MAKEROOM::success_)
      - PROTOBUF_FIELD_OFFSET(S_MAKEROOM, room_)>(
          reinterpret_cast<char*>(&room_),
          reinterpret_cast<char*>(&other->room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MAKEROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_CHANNELUPDATE::_Internal {
 public:
};

void S_CHANNELUPDATE::clear_rooms() {
  rooms_.Clear();
}
S_CHANNELUPDATE::S_CHANNELUPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rooms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANNELUPDATE)
}
S_CHANNELUPDATE::S_CHANNELUPDATE(const S_CHANNELUPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rooms_(from.rooms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANNELUPDATE)
}

inline void S_CHANNELUPDATE::SharedCtor() {
}

S_CHANNELUPDATE::~S_CHANNELUPDATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANNELUPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANNELUPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHANNELUPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHANNELUPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANNELUPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANNELUPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PRoom rooms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANNELUPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANNELUPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PRoom rooms = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANNELUPDATE)
  return target;
}

size_t S_CHANNELUPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANNELUPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PRoom rooms = 1;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANNELUPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CHANNELUPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANNELUPDATE::GetClassData() const { return &_class_data_; }

void S_CHANNELUPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CHANNELUPDATE *>(to)->MergeFrom(
      static_cast<const S_CHANNELUPDATE &>(from));
}


void S_CHANNELUPDATE::MergeFrom(const S_CHANNELUPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANNELUPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_.MergeFrom(from.rooms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANNELUPDATE::CopyFrom(const S_CHANNELUPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANNELUPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANNELUPDATE::IsInitialized() const {
  return true;
}

void S_CHANNELUPDATE::InternalSwap(S_CHANNELUPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rooms_.InternalSwap(&other->rooms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANNELUPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_ROOMENTER::_Internal {
 public:
};

C_ROOMENTER::C_ROOMENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOMENTER)
}
C_ROOMENTER::C_ROOMENTER(const C_ROOMENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOMENTER)
}

inline void C_ROOMENTER::SharedCtor() {
roomid_ = 0;
}

C_ROOMENTER::~C_ROOMENTER() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOMENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ROOMENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ROOMENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ROOMENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOMENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOMENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ROOMENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOMENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOMENTER)
  return target;
}

size_t C_ROOMENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOMENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOMENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ROOMENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOMENTER::GetClassData() const { return &_class_data_; }

void C_ROOMENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ROOMENTER *>(to)->MergeFrom(
      static_cast<const C_ROOMENTER &>(from));
}


void C_ROOMENTER::MergeFrom(const C_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOMENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ROOMENTER::CopyFrom(const C_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOMENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOMENTER::IsInitialized() const {
  return true;
}

void C_ROOMENTER::InternalSwap(C_ROOMENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOMENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_ROOMENTER::_Internal {
 public:
  static const ::Protocol::PRoom& room(const S_ROOMENTER* msg);
};

const ::Protocol::PRoom&
S_ROOMENTER::_Internal::room(const S_ROOMENTER* msg) {
  return *msg->room_;
}
void S_ROOMENTER::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
S_ROOMENTER::S_ROOMENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOMENTER)
}
S_ROOMENTER::S_ROOMENTER(const S_ROOMENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::Protocol::PRoom(*from.room_);
  } else {
    room_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOMENTER)
}

inline void S_ROOMENTER::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&room_)) + sizeof(success_));
}

S_ROOMENTER::~S_ROOMENTER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOMENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOMENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void S_ROOMENTER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOMENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOMENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOMENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PRoom room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOMENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOMENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.PRoom room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOMENTER)
  return target;
}

size_t S_ROOMENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOMENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PRoom room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOMENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ROOMENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOMENTER::GetClassData() const { return &_class_data_; }

void S_ROOMENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ROOMENTER *>(to)->MergeFrom(
      static_cast<const S_ROOMENTER &>(from));
}


void S_ROOMENTER::MergeFrom(const S_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOMENTER)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _internal_mutable_room()->::Protocol::PRoom::MergeFrom(from._internal_room());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOMENTER::CopyFrom(const S_ROOMENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOMENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOMENTER::IsInitialized() const {
  return true;
}

void S_ROOMENTER::InternalSwap(S_ROOMENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ROOMENTER, success_)
      + sizeof(S_ROOMENTER::success_)
      - PROTOBUF_FIELD_OFFSET(S_ROOMENTER, room_)>(
          reinterpret_cast<char*>(&room_),
          reinterpret_cast<char*>(&other->room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOMENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class C_ROOMLEAVE::_Internal {
 public:
};

C_ROOMLEAVE::C_ROOMLEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOMLEAVE)
}
C_ROOMLEAVE::C_ROOMLEAVE(const C_ROOMLEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOMLEAVE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOMLEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOMLEAVE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_ROOMLEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_ROOMUPDATE::_Internal {
 public:
  static const ::Protocol::PRoom& room(const S_ROOMUPDATE* msg);
};

const ::Protocol::PRoom&
S_ROOMUPDATE::_Internal::room(const S_ROOMUPDATE* msg) {
  return *msg->room_;
}
void S_ROOMUPDATE::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
S_ROOMUPDATE::S_ROOMUPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOMUPDATE)
}
S_ROOMUPDATE::S_ROOMUPDATE(const S_ROOMUPDATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::Protocol::PRoom(*from.room_);
  } else {
    room_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOMUPDATE)
}

inline void S_ROOMUPDATE::SharedCtor() {
room_ = nullptr;
}

S_ROOMUPDATE::~S_ROOMUPDATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOMUPDATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOMUPDATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void S_ROOMUPDATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOMUPDATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOMUPDATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOMUPDATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PRoom room = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOMUPDATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOMUPDATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PRoom room = 1;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOMUPDATE)
  return target;
}

size_t S_ROOMUPDATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOMUPDATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PRoom room = 1;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOMUPDATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ROOMUPDATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOMUPDATE::GetClassData() const { return &_class_data_; }

void S_ROOMUPDATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ROOMUPDATE *>(to)->MergeFrom(
      static_cast<const S_ROOMUPDATE &>(from));
}


void S_ROOMUPDATE::MergeFrom(const S_ROOMUPDATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOMUPDATE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_room()) {
    _internal_mutable_room()->::Protocol::PRoom::MergeFrom(from._internal_room());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOMUPDATE::CopyFrom(const S_ROOMUPDATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOMUPDATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOMUPDATE::IsInitialized() const {
  return true;
}

void S_ROOMUPDATE::InternalSwap(S_ROOMUPDATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(room_, other->room_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOMUPDATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class C_ROOMREADY::_Internal {
 public:
};

C_ROOMREADY::C_ROOMREADY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOMREADY)
}
C_ROOMREADY::C_ROOMREADY(const C_ROOMREADY& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOMREADY)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOMREADY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOMREADY::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_ROOMREADY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class C_ROOMCHAT::_Internal {
 public:
};

C_ROOMCHAT::C_ROOMCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOMCHAT)
}
C_ROOMCHAT::C_ROOMCHAT(const C_ROOMCHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOMCHAT)
}

inline void C_ROOMCHAT::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_ROOMCHAT::~C_ROOMCHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOMCHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ROOMCHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.Destroy();
}

void C_ROOMCHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ROOMCHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOMCHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOMCHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ROOMCHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ROOMCHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOMCHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ROOMCHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOMCHAT)
  return target;
}

size_t C_ROOMCHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOMCHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOMCHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ROOMCHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOMCHAT::GetClassData() const { return &_class_data_; }

void C_ROOMCHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ROOMCHAT *>(to)->MergeFrom(
      static_cast<const C_ROOMCHAT &>(from));
}


void C_ROOMCHAT::MergeFrom(const C_ROOMCHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOMCHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ROOMCHAT::CopyFrom(const C_ROOMCHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOMCHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOMCHAT::IsInitialized() const {
  return true;
}

void C_ROOMCHAT::InternalSwap(C_ROOMCHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOMCHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class S_ROOMCHAT::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const S_ROOMCHAT* msg);
};

const ::Protocol::PPlayer&
S_ROOMCHAT::_Internal::player(const S_ROOMCHAT* msg) {
  return *msg->player_;
}
void S_ROOMCHAT::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
S_ROOMCHAT::S_ROOMCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOMCHAT)
}
S_ROOMCHAT::S_ROOMCHAT(const S_ROOMCHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(from._internal_msg(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOMCHAT)
}

inline void S_ROOMCHAT::SharedCtor() {
msg_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
player_ = nullptr;
}

S_ROOMCHAT::~S_ROOMCHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOMCHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOMCHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.Destroy();
  if (this != internal_default_instance()) delete player_;
}

void S_ROOMCHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOMCHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOMCHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOMCHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ROOMCHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOMCHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOMCHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ROOMCHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOMCHAT)
  return target;
}

size_t S_ROOMCHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOMCHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOMCHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ROOMCHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOMCHAT::GetClassData() const { return &_class_data_; }

void S_ROOMCHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ROOMCHAT *>(to)->MergeFrom(
      static_cast<const S_ROOMCHAT &>(from));
}


void S_ROOMCHAT::MergeFrom(const S_ROOMCHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOMCHAT)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOMCHAT::CopyFrom(const S_ROOMCHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOMCHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOMCHAT::IsInitialized() const {
  return true;
}

void S_ROOMCHAT::InternalSwap(S_ROOMCHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOMCHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class C_ROOMSTART::_Internal {
 public:
};

C_ROOMSTART::C_ROOMSTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOMSTART)
}
C_ROOMSTART::C_ROOMSTART(const C_ROOMSTART& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOMSTART)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOMSTART::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOMSTART::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_ROOMSTART::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_ROOMSTART::_Internal {
 public:
  static const ::Protocol::PRoom& room(const S_ROOMSTART* msg);
};

const ::Protocol::PRoom&
S_ROOMSTART::_Internal::room(const S_ROOMSTART* msg) {
  return *msg->room_;
}
void S_ROOMSTART::clear_room() {
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
}
void S_ROOMSTART::clear_spawn() {
  spawn_.Clear();
}
S_ROOMSTART::S_ROOMSTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  spawn_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOMSTART)
}
S_ROOMSTART::S_ROOMSTART(const S_ROOMSTART& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spawn_(from.spawn_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_room()) {
    room_ = new ::Protocol::PRoom(*from.room_);
  } else {
    room_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOMSTART)
}

inline void S_ROOMSTART::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&room_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&room_)) + sizeof(success_));
}

S_ROOMSTART::~S_ROOMSTART() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOMSTART)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOMSTART::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete room_;
}

void S_ROOMSTART::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ROOMSTART::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOMSTART)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spawn_.Clear();
  if (GetArenaForAllocation() == nullptr && room_ != nullptr) {
    delete room_;
  }
  room_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOMSTART::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PRoom room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PRoomStart spawn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spawn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOMSTART::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOMSTART)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.PRoom room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // repeated .Protocol.PRoomStart spawn = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spawn_size()); i < n; i++) {
    const auto& repfield = this->_internal_spawn(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOMSTART)
  return target;
}

size_t S_ROOMSTART::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOMSTART)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PRoomStart spawn = 3;
  total_size += 1UL * this->_internal_spawn_size();
  for (const auto& msg : this->spawn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.PRoom room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *room_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOMSTART::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ROOMSTART::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOMSTART::GetClassData() const { return &_class_data_; }

void S_ROOMSTART::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ROOMSTART *>(to)->MergeFrom(
      static_cast<const S_ROOMSTART &>(from));
}


void S_ROOMSTART::MergeFrom(const S_ROOMSTART& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOMSTART)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  spawn_.MergeFrom(from.spawn_);
  if (from._internal_has_room()) {
    _internal_mutable_room()->::Protocol::PRoom::MergeFrom(from._internal_room());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOMSTART::CopyFrom(const S_ROOMSTART& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOMSTART)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOMSTART::IsInitialized() const {
  return true;
}

void S_ROOMSTART::InternalSwap(S_ROOMSTART* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  spawn_.InternalSwap(&other->spawn_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ROOMSTART, success_)
      + sizeof(S_ROOMSTART::success_)
      - PROTOBUF_FIELD_OFFSET(S_ROOMSTART, room_)>(
          reinterpret_cast<char*>(&room_),
          reinterpret_cast<char*>(&other->room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOMSTART::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::Protocol::PPositionInfo& positioninfo(const C_MOVE* msg);
};

const ::Protocol::PPositionInfo&
C_MOVE::_Internal::positioninfo(const C_MOVE* msg) {
  return *msg->positioninfo_;
}
void C_MOVE::clear_positioninfo() {
  if (GetArenaForAllocation() == nullptr && positioninfo_ != nullptr) {
    delete positioninfo_;
  }
  positioninfo_ = nullptr;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_positioninfo()) {
    positioninfo_ = new ::Protocol::PPositionInfo(*from.positioninfo_);
  } else {
    positioninfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
}

inline void C_MOVE::SharedCtor() {
positioninfo_ = nullptr;
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete positioninfo_;
}

void C_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && positioninfo_ != nullptr) {
    delete positioninfo_;
  }
  positioninfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPositionInfo positionInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_positioninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPositionInfo positionInfo = 1;
  if (this->_internal_has_positioninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::positioninfo(this),
        _Internal::positioninfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPositionInfo positionInfo = 1;
  if (this->_internal_has_positioninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positioninfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVE::GetClassData() const { return &_class_data_; }

void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_MOVE *>(to)->MergeFrom(
      static_cast<const C_MOVE &>(from));
}


void C_MOVE::MergeFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_positioninfo()) {
    _internal_mutable_positioninfo()->::Protocol::PPositionInfo::MergeFrom(from._internal_positioninfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(positioninfo_, other->positioninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const S_MOVE* msg);
  static const ::Protocol::PPositionInfo& positioninfo(const S_MOVE* msg);
};

const ::Protocol::PPlayer&
S_MOVE::_Internal::player(const S_MOVE* msg) {
  return *msg->player_;
}
const ::Protocol::PPositionInfo&
S_MOVE::_Internal::positioninfo(const S_MOVE* msg) {
  return *msg->positioninfo_;
}
void S_MOVE::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
void S_MOVE::clear_positioninfo() {
  if (GetArenaForAllocation() == nullptr && positioninfo_ != nullptr) {
    delete positioninfo_;
  }
  positioninfo_ = nullptr;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_positioninfo()) {
    positioninfo_ = new ::Protocol::PPositionInfo(*from.positioninfo_);
  } else {
    positioninfo_ = nullptr;
  }
  force_ = from.force_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE)
}

inline void S_MOVE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&player_)) + sizeof(force_));
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete positioninfo_;
}

void S_MOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && positioninfo_ != nullptr) {
    delete positioninfo_;
  }
  positioninfo_ = nullptr;
  force_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PPlayer player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PPositionInfo positionInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_positioninfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool force = 1;
  if (this->_internal_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_force(), target);
  }

  // .Protocol.PPlayer player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PPositionInfo positionInfo = 3;
  if (this->_internal_has_positioninfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::positioninfo(this),
        _Internal::positioninfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.PPositionInfo positionInfo = 3;
  if (this->_internal_has_positioninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positioninfo_);
  }

  // bool force = 1;
  if (this->_internal_force() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVE::GetClassData() const { return &_class_data_; }

void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_MOVE *>(to)->MergeFrom(
      static_cast<const S_MOVE &>(from));
}


void S_MOVE::MergeFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  if (from._internal_has_positioninfo()) {
    _internal_mutable_positioninfo()->::Protocol::PPositionInfo::MergeFrom(from._internal_positioninfo());
  }
  if (from._internal_force() != 0) {
    _internal_set_force(from._internal_force());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MOVE, force_)
      + sizeof(S_MOVE::force_)
      - PROTOBUF_FIELD_OFFSET(S_MOVE, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class C_BOMB::_Internal {
 public:
  static const ::Protocol::PCellPos& cellpos(const C_BOMB* msg);
};

const ::Protocol::PCellPos&
C_BOMB::_Internal::cellpos(const C_BOMB* msg) {
  return *msg->cellpos_;
}
void C_BOMB::clear_cellpos() {
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
}
C_BOMB::C_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BOMB)
}
C_BOMB::C_BOMB(const C_BOMB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellpos()) {
    cellpos_ = new ::Protocol::PCellPos(*from.cellpos_);
  } else {
    cellpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BOMB)
}

inline void C_BOMB::SharedCtor() {
cellpos_ = nullptr;
}

C_BOMB::~C_BOMB() {
  // @@protoc_insertion_point(destructor:Protocol.C_BOMB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BOMB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cellpos_;
}

void C_BOMB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_BOMB::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BOMB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BOMB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PCellPos cellPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BOMB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BOMB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PCellPos cellPos = 1;
  if (this->_internal_has_cellpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cellpos(this),
        _Internal::cellpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BOMB)
  return target;
}

size_t C_BOMB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BOMB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PCellPos cellPos = 1;
  if (this->_internal_has_cellpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BOMB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_BOMB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BOMB::GetClassData() const { return &_class_data_; }

void C_BOMB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_BOMB *>(to)->MergeFrom(
      static_cast<const C_BOMB &>(from));
}


void C_BOMB::MergeFrom(const C_BOMB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BOMB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cellpos()) {
    _internal_mutable_cellpos()->::Protocol::PCellPos::MergeFrom(from._internal_cellpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BOMB::CopyFrom(const C_BOMB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BOMB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BOMB::IsInitialized() const {
  return true;
}

void C_BOMB::InternalSwap(C_BOMB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cellpos_, other->cellpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BOMB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class S_BOMB::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const S_BOMB* msg);
  static const ::Protocol::PCellPos& cellpos(const S_BOMB* msg);
};

const ::Protocol::PPlayer&
S_BOMB::_Internal::player(const S_BOMB* msg) {
  return *msg->player_;
}
const ::Protocol::PCellPos&
S_BOMB::_Internal::cellpos(const S_BOMB* msg) {
  return *msg->cellpos_;
}
void S_BOMB::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
void S_BOMB::clear_cellpos() {
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
}
S_BOMB::S_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BOMB)
}
S_BOMB::S_BOMB(const S_BOMB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_cellpos()) {
    cellpos_ = new ::Protocol::PCellPos(*from.cellpos_);
  } else {
    cellpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BOMB)
}

inline void S_BOMB::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cellpos_) -
    reinterpret_cast<char*>(&player_)) + sizeof(cellpos_));
}

S_BOMB::~S_BOMB() {
  // @@protoc_insertion_point(destructor:Protocol.S_BOMB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BOMB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete cellpos_;
}

void S_BOMB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_BOMB::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BOMB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BOMB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PCellPos cellpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BOMB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BOMB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PCellPos cellpos = 2;
  if (this->_internal_has_cellpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cellpos(this),
        _Internal::cellpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BOMB)
  return target;
}

size_t S_BOMB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BOMB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.PCellPos cellpos = 2;
  if (this->_internal_has_cellpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BOMB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_BOMB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BOMB::GetClassData() const { return &_class_data_; }

void S_BOMB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_BOMB *>(to)->MergeFrom(
      static_cast<const S_BOMB &>(from));
}


void S_BOMB::MergeFrom(const S_BOMB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BOMB)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  if (from._internal_has_cellpos()) {
    _internal_mutable_cellpos()->::Protocol::PCellPos::MergeFrom(from._internal_cellpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BOMB::CopyFrom(const S_BOMB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BOMB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BOMB::IsInitialized() const {
  return true;
}

void S_BOMB::InternalSwap(S_BOMB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BOMB, cellpos_)
      + sizeof(S_BOMB::cellpos_)
      - PROTOBUF_FIELD_OFFSET(S_BOMB, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BOMB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class C_BOMBEND::_Internal {
 public:
  static const ::Protocol::PCellPos& cellpos(const C_BOMBEND* msg);
};

const ::Protocol::PCellPos&
C_BOMBEND::_Internal::cellpos(const C_BOMBEND* msg) {
  return *msg->cellpos_;
}
void C_BOMBEND::clear_cellpos() {
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
}
C_BOMBEND::C_BOMBEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.C_BOMBEND)
}
C_BOMBEND::C_BOMBEND(const C_BOMBEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellpos()) {
    cellpos_ = new ::Protocol::PCellPos(*from.cellpos_);
  } else {
    cellpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_BOMBEND)
}

inline void C_BOMBEND::SharedCtor() {
cellpos_ = nullptr;
}

C_BOMBEND::~C_BOMBEND() {
  // @@protoc_insertion_point(destructor:Protocol.C_BOMBEND)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_BOMBEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cellpos_;
}

void C_BOMBEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_BOMBEND::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_BOMBEND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_BOMBEND::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PCellPos cellPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_BOMBEND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_BOMBEND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PCellPos cellPos = 1;
  if (this->_internal_has_cellpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cellpos(this),
        _Internal::cellpos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_BOMBEND)
  return target;
}

size_t C_BOMBEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_BOMBEND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PCellPos cellPos = 1;
  if (this->_internal_has_cellpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_BOMBEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_BOMBEND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_BOMBEND::GetClassData() const { return &_class_data_; }

void C_BOMBEND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_BOMBEND *>(to)->MergeFrom(
      static_cast<const C_BOMBEND &>(from));
}


void C_BOMBEND::MergeFrom(const C_BOMBEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_BOMBEND)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cellpos()) {
    _internal_mutable_cellpos()->::Protocol::PCellPos::MergeFrom(from._internal_cellpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_BOMBEND::CopyFrom(const C_BOMBEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_BOMBEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_BOMBEND::IsInitialized() const {
  return true;
}

void C_BOMBEND::InternalSwap(C_BOMBEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cellpos_, other->cellpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_BOMBEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_BOMBEND::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const S_BOMBEND* msg);
  static const ::Protocol::PCellPos& bombcellpos(const S_BOMBEND* msg);
};

const ::Protocol::PPlayer&
S_BOMBEND::_Internal::player(const S_BOMBEND* msg) {
  return *msg->player_;
}
const ::Protocol::PCellPos&
S_BOMBEND::_Internal::bombcellpos(const S_BOMBEND* msg) {
  return *msg->bombcellpos_;
}
void S_BOMBEND::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
void S_BOMBEND::clear_bombcellpos() {
  if (GetArenaForAllocation() == nullptr && bombcellpos_ != nullptr) {
    delete bombcellpos_;
  }
  bombcellpos_ = nullptr;
}
void S_BOMBEND::clear_destroyobjectcellposes() {
  destroyobjectcellposes_.Clear();
}
void S_BOMBEND::clear_trapplayers() {
  trapplayers_.Clear();
}
S_BOMBEND::S_BOMBEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  destroyobjectcellposes_(arena),
  trapplayers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_BOMBEND)
}
S_BOMBEND::S_BOMBEND(const S_BOMBEND& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      destroyobjectcellposes_(from.destroyobjectcellposes_),
      trapplayers_(from.trapplayers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_bombcellpos()) {
    bombcellpos_ = new ::Protocol::PCellPos(*from.bombcellpos_);
  } else {
    bombcellpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_BOMBEND)
}

inline void S_BOMBEND::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bombcellpos_) -
    reinterpret_cast<char*>(&player_)) + sizeof(bombcellpos_));
}

S_BOMBEND::~S_BOMBEND() {
  // @@protoc_insertion_point(destructor:Protocol.S_BOMBEND)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_BOMBEND::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete bombcellpos_;
}

void S_BOMBEND::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_BOMBEND::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_BOMBEND)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destroyobjectcellposes_.Clear();
  trapplayers_.Clear();
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bombcellpos_ != nullptr) {
    delete bombcellpos_;
  }
  bombcellpos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_BOMBEND::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PCellPos bombCellPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bombcellpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PCellPos destroyObjectCellPoses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_destroyobjectcellposes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PPlayer trapPlayers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trapplayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_BOMBEND::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_BOMBEND)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PCellPos bombCellPos = 2;
  if (this->_internal_has_bombcellpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bombcellpos(this),
        _Internal::bombcellpos(this).GetCachedSize(), target, stream);
  }

  // repeated .Protocol.PCellPos destroyObjectCellPoses = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_destroyobjectcellposes_size()); i < n; i++) {
    const auto& repfield = this->_internal_destroyobjectcellposes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.PPlayer trapPlayers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trapplayers_size()); i < n; i++) {
    const auto& repfield = this->_internal_trapplayers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_BOMBEND)
  return target;
}

size_t S_BOMBEND::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_BOMBEND)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PCellPos destroyObjectCellPoses = 3;
  total_size += 1UL * this->_internal_destroyobjectcellposes_size();
  for (const auto& msg : this->destroyobjectcellposes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.PPlayer trapPlayers = 4;
  total_size += 1UL * this->_internal_trapplayers_size();
  for (const auto& msg : this->trapplayers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.PCellPos bombCellPos = 2;
  if (this->_internal_has_bombcellpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bombcellpos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_BOMBEND::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_BOMBEND::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_BOMBEND::GetClassData() const { return &_class_data_; }

void S_BOMBEND::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_BOMBEND *>(to)->MergeFrom(
      static_cast<const S_BOMBEND &>(from));
}


void S_BOMBEND::MergeFrom(const S_BOMBEND& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_BOMBEND)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  destroyobjectcellposes_.MergeFrom(from.destroyobjectcellposes_);
  trapplayers_.MergeFrom(from.trapplayers_);
  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  if (from._internal_has_bombcellpos()) {
    _internal_mutable_bombcellpos()->::Protocol::PCellPos::MergeFrom(from._internal_bombcellpos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_BOMBEND::CopyFrom(const S_BOMBEND& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_BOMBEND)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_BOMBEND::IsInitialized() const {
  return true;
}

void S_BOMBEND::InternalSwap(S_BOMBEND* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  destroyobjectcellposes_.InternalSwap(&other->destroyobjectcellposes_);
  trapplayers_.InternalSwap(&other->trapplayers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_BOMBEND, bombcellpos_)
      + sizeof(S_BOMBEND::bombcellpos_)
      - PROTOBUF_FIELD_OFFSET(S_BOMBEND, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_BOMBEND::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class S_ITEMSPAWN::_Internal {
 public:
  static const ::Protocol::PCellPos& cellpos(const S_ITEMSPAWN* msg);
};

const ::Protocol::PCellPos&
S_ITEMSPAWN::_Internal::cellpos(const S_ITEMSPAWN* msg) {
  return *msg->cellpos_;
}
void S_ITEMSPAWN::clear_cellpos() {
  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
}
S_ITEMSPAWN::S_ITEMSPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ITEMSPAWN)
}
S_ITEMSPAWN::S_ITEMSPAWN(const S_ITEMSPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cellpos()) {
    cellpos_ = new ::Protocol::PCellPos(*from.cellpos_);
  } else {
    cellpos_ = nullptr;
  }
  itemtype_ = from.itemtype_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ITEMSPAWN)
}

inline void S_ITEMSPAWN::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cellpos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemtype_) -
    reinterpret_cast<char*>(&cellpos_)) + sizeof(itemtype_));
}

S_ITEMSPAWN::~S_ITEMSPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_ITEMSPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ITEMSPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cellpos_;
}

void S_ITEMSPAWN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ITEMSPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ITEMSPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cellpos_ != nullptr) {
    delete cellpos_;
  }
  cellpos_ = nullptr;
  itemtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ITEMSPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PCellPos cellPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cellpos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PItemType itemType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_itemtype(static_cast<::Protocol::PItemType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ITEMSPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ITEMSPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PCellPos cellPos = 1;
  if (this->_internal_has_cellpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cellpos(this),
        _Internal::cellpos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PItemType itemType = 2;
  if (this->_internal_itemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_itemtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ITEMSPAWN)
  return target;
}

size_t S_ITEMSPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ITEMSPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PCellPos cellPos = 1;
  if (this->_internal_has_cellpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cellpos_);
  }

  // .Protocol.PItemType itemType = 2;
  if (this->_internal_itemtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_itemtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ITEMSPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ITEMSPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ITEMSPAWN::GetClassData() const { return &_class_data_; }

void S_ITEMSPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ITEMSPAWN *>(to)->MergeFrom(
      static_cast<const S_ITEMSPAWN &>(from));
}


void S_ITEMSPAWN::MergeFrom(const S_ITEMSPAWN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ITEMSPAWN)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cellpos()) {
    _internal_mutable_cellpos()->::Protocol::PCellPos::MergeFrom(from._internal_cellpos());
  }
  if (from._internal_itemtype() != 0) {
    _internal_set_itemtype(from._internal_itemtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ITEMSPAWN::CopyFrom(const S_ITEMSPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ITEMSPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ITEMSPAWN::IsInitialized() const {
  return true;
}

void S_ITEMSPAWN::InternalSwap(S_ITEMSPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ITEMSPAWN, itemtype_)
      + sizeof(S_ITEMSPAWN::itemtype_)
      - PROTOBUF_FIELD_OFFSET(S_ITEMSPAWN, cellpos_)>(
          reinterpret_cast<char*>(&cellpos_),
          reinterpret_cast<char*>(&other->cellpos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ITEMSPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class S_DEAD::_Internal {
 public:
  static const ::Protocol::PPlayer& player(const S_DEAD* msg);
  static const ::Protocol::PPositionInfo& posinfo(const S_DEAD* msg);
};

const ::Protocol::PPlayer&
S_DEAD::_Internal::player(const S_DEAD* msg) {
  return *msg->player_;
}
const ::Protocol::PPositionInfo&
S_DEAD::_Internal::posinfo(const S_DEAD* msg) {
  return *msg->posinfo_;
}
void S_DEAD::clear_player() {
  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
void S_DEAD::clear_posinfo() {
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
}
S_DEAD::S_DEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DEAD)
}
S_DEAD::S_DEAD(const S_DEAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::Protocol::PPlayer(*from.player_);
  } else {
    player_ = nullptr;
  }
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::Protocol::PPositionInfo(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DEAD)
}

inline void S_DEAD::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&posinfo_) -
    reinterpret_cast<char*>(&player_)) + sizeof(posinfo_));
}

S_DEAD::~S_DEAD() {
  // @@protoc_insertion_point(destructor:Protocol.S_DEAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DEAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete posinfo_;
}

void S_DEAD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DEAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DEAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && posinfo_ != nullptr) {
    delete posinfo_;
  }
  posinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DEAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayer player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PPositionInfo posInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DEAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DEAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PPositionInfo posInfo = 2;
  if (this->_internal_has_posinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::posinfo(this),
        _Internal::posinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DEAD)
  return target;
}

size_t S_DEAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DEAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPlayer player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // .Protocol.PPositionInfo posInfo = 2;
  if (this->_internal_has_posinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DEAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_DEAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DEAD::GetClassData() const { return &_class_data_; }

void S_DEAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_DEAD *>(to)->MergeFrom(
      static_cast<const S_DEAD &>(from));
}


void S_DEAD::MergeFrom(const S_DEAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DEAD)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _internal_mutable_player()->::Protocol::PPlayer::MergeFrom(from._internal_player());
  }
  if (from._internal_has_posinfo()) {
    _internal_mutable_posinfo()->::Protocol::PPositionInfo::MergeFrom(from._internal_posinfo());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DEAD::CopyFrom(const S_DEAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DEAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DEAD::IsInitialized() const {
  return true;
}

void S_DEAD::InternalSwap(S_DEAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DEAD, posinfo_)
      + sizeof(S_DEAD::posinfo_)
      - PROTOBUF_FIELD_OFFSET(S_DEAD, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DEAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class S_ITEMACQUISITION::_Internal {
 public:
  static const ::Protocol::PPlayer& playerinfo(const S_ITEMACQUISITION* msg);
  static const ::Protocol::PCellPos& itempos(const S_ITEMACQUISITION* msg);
};

const ::Protocol::PPlayer&
S_ITEMACQUISITION::_Internal::playerinfo(const S_ITEMACQUISITION* msg) {
  return *msg->playerinfo_;
}
const ::Protocol::PCellPos&
S_ITEMACQUISITION::_Internal::itempos(const S_ITEMACQUISITION* msg) {
  return *msg->itempos_;
}
void S_ITEMACQUISITION::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
}
void S_ITEMACQUISITION::clear_itempos() {
  if (GetArenaForAllocation() == nullptr && itempos_ != nullptr) {
    delete itempos_;
  }
  itempos_ = nullptr;
}
S_ITEMACQUISITION::S_ITEMACQUISITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ITEMACQUISITION)
}
S_ITEMACQUISITION::S_ITEMACQUISITION(const S_ITEMACQUISITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    playerinfo_ = new ::Protocol::PPlayer(*from.playerinfo_);
  } else {
    playerinfo_ = nullptr;
  }
  if (from._internal_has_itempos()) {
    itempos_ = new ::Protocol::PCellPos(*from.itempos_);
  } else {
    itempos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ITEMACQUISITION)
}

inline void S_ITEMACQUISITION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itempos_) -
    reinterpret_cast<char*>(&playerinfo_)) + sizeof(itempos_));
}

S_ITEMACQUISITION::~S_ITEMACQUISITION() {
  // @@protoc_insertion_point(destructor:Protocol.S_ITEMACQUISITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ITEMACQUISITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete playerinfo_;
  if (this != internal_default_instance()) delete itempos_;
}

void S_ITEMACQUISITION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ITEMACQUISITION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ITEMACQUISITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && playerinfo_ != nullptr) {
    delete playerinfo_;
  }
  playerinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && itempos_ != nullptr) {
    delete itempos_;
  }
  itempos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ITEMACQUISITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PPlayer playerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PCellPos itemPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_itempos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ITEMACQUISITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ITEMACQUISITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PPlayer playerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  // .Protocol.PCellPos itemPos = 2;
  if (this->_internal_has_itempos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::itempos(this),
        _Internal::itempos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ITEMACQUISITION)
  return target;
}

size_t S_ITEMACQUISITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ITEMACQUISITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PPlayer playerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *playerinfo_);
  }

  // .Protocol.PCellPos itemPos = 2;
  if (this->_internal_has_itempos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *itempos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ITEMACQUISITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ITEMACQUISITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ITEMACQUISITION::GetClassData() const { return &_class_data_; }

void S_ITEMACQUISITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ITEMACQUISITION *>(to)->MergeFrom(
      static_cast<const S_ITEMACQUISITION &>(from));
}


void S_ITEMACQUISITION::MergeFrom(const S_ITEMACQUISITION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ITEMACQUISITION)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _internal_mutable_playerinfo()->::Protocol::PPlayer::MergeFrom(from._internal_playerinfo());
  }
  if (from._internal_has_itempos()) {
    _internal_mutable_itempos()->::Protocol::PCellPos::MergeFrom(from._internal_itempos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ITEMACQUISITION::CopyFrom(const S_ITEMACQUISITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ITEMACQUISITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ITEMACQUISITION::IsInitialized() const {
  return true;
}

void S_ITEMACQUISITION::InternalSwap(S_ITEMACQUISITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ITEMACQUISITION, itempos_)
      + sizeof(S_ITEMACQUISITION::itempos_)
      - PROTOBUF_FIELD_OFFSET(S_ITEMACQUISITION, playerinfo_)>(
          reinterpret_cast<char*>(&playerinfo_),
          reinterpret_cast<char*>(&other->playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ITEMACQUISITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHANNELCHOICE*
Arena::CreateMaybeMessage< ::Protocol::C_CHANNELCHOICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHANNELCHOICE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANNELCHOICE*
Arena::CreateMaybeMessage< ::Protocol::S_CHANNELCHOICE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANNELCHOICE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHANNELCHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHANNELCHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHANNELCHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANNELCHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHANNELCHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANNELCHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MAKEROOM*
Arena::CreateMaybeMessage< ::Protocol::C_MAKEROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MAKEROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MAKEROOM*
Arena::CreateMaybeMessage< ::Protocol::S_MAKEROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MAKEROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANNELUPDATE*
Arena::CreateMaybeMessage< ::Protocol::S_CHANNELUPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANNELUPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOMENTER*
Arena::CreateMaybeMessage< ::Protocol::C_ROOMENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOMENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOMENTER*
Arena::CreateMaybeMessage< ::Protocol::S_ROOMENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOMENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOMLEAVE*
Arena::CreateMaybeMessage< ::Protocol::C_ROOMLEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOMLEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOMUPDATE*
Arena::CreateMaybeMessage< ::Protocol::S_ROOMUPDATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOMUPDATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOMREADY*
Arena::CreateMaybeMessage< ::Protocol::C_ROOMREADY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOMREADY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOMCHAT*
Arena::CreateMaybeMessage< ::Protocol::C_ROOMCHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOMCHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOMCHAT*
Arena::CreateMaybeMessage< ::Protocol::S_ROOMCHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOMCHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOMSTART*
Arena::CreateMaybeMessage< ::Protocol::C_ROOMSTART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOMSTART >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOMSTART*
Arena::CreateMaybeMessage< ::Protocol::S_ROOMSTART >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOMSTART >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVE*
Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVE*
Arena::CreateMaybeMessage< ::Protocol::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BOMB*
Arena::CreateMaybeMessage< ::Protocol::C_BOMB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BOMB >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BOMB*
Arena::CreateMaybeMessage< ::Protocol::S_BOMB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BOMB >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_BOMBEND*
Arena::CreateMaybeMessage< ::Protocol::C_BOMBEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_BOMBEND >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_BOMBEND*
Arena::CreateMaybeMessage< ::Protocol::S_BOMBEND >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_BOMBEND >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ITEMSPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_ITEMSPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ITEMSPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DEAD*
Arena::CreateMaybeMessage< ::Protocol::S_DEAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DEAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ITEMACQUISITION*
Arena::CreateMaybeMessage< ::Protocol::S_ITEMACQUISITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ITEMACQUISITION >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
