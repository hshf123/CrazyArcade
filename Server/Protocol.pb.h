// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_BOMB;
struct C_BOMBDefaultTypeInternal;
extern C_BOMBDefaultTypeInternal _C_BOMB_default_instance_;
class C_CHANNELCHAT;
struct C_CHANNELCHATDefaultTypeInternal;
extern C_CHANNELCHATDefaultTypeInternal _C_CHANNELCHAT_default_instance_;
class C_CHANNELCHOICE;
struct C_CHANNELCHOICEDefaultTypeInternal;
extern C_CHANNELCHOICEDefaultTypeInternal _C_CHANNELCHOICE_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MAKEROOM;
struct C_MAKEROOMDefaultTypeInternal;
extern C_MAKEROOMDefaultTypeInternal _C_MAKEROOM_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_ROOMCHAT;
struct C_ROOMCHATDefaultTypeInternal;
extern C_ROOMCHATDefaultTypeInternal _C_ROOMCHAT_default_instance_;
class C_ROOMENTER;
struct C_ROOMENTERDefaultTypeInternal;
extern C_ROOMENTERDefaultTypeInternal _C_ROOMENTER_default_instance_;
class C_ROOMLEAVE;
struct C_ROOMLEAVEDefaultTypeInternal;
extern C_ROOMLEAVEDefaultTypeInternal _C_ROOMLEAVE_default_instance_;
class C_ROOMREADY;
struct C_ROOMREADYDefaultTypeInternal;
extern C_ROOMREADYDefaultTypeInternal _C_ROOMREADY_default_instance_;
class C_ROOMSTART;
struct C_ROOMSTARTDefaultTypeInternal;
extern C_ROOMSTARTDefaultTypeInternal _C_ROOMSTART_default_instance_;
class S_BOMB;
struct S_BOMBDefaultTypeInternal;
extern S_BOMBDefaultTypeInternal _S_BOMB_default_instance_;
class S_BOMBEND;
struct S_BOMBENDDefaultTypeInternal;
extern S_BOMBENDDefaultTypeInternal _S_BOMBEND_default_instance_;
class S_CHANNELCHAT;
struct S_CHANNELCHATDefaultTypeInternal;
extern S_CHANNELCHATDefaultTypeInternal _S_CHANNELCHAT_default_instance_;
class S_CHANNELCHOICE;
struct S_CHANNELCHOICEDefaultTypeInternal;
extern S_CHANNELCHOICEDefaultTypeInternal _S_CHANNELCHOICE_default_instance_;
class S_CHANNELUPDATE;
struct S_CHANNELUPDATEDefaultTypeInternal;
extern S_CHANNELUPDATEDefaultTypeInternal _S_CHANNELUPDATE_default_instance_;
class S_DEAD;
struct S_DEADDefaultTypeInternal;
extern S_DEADDefaultTypeInternal _S_DEAD_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MAKEROOM;
struct S_MAKEROOMDefaultTypeInternal;
extern S_MAKEROOMDefaultTypeInternal _S_MAKEROOM_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_ROOMCHAT;
struct S_ROOMCHATDefaultTypeInternal;
extern S_ROOMCHATDefaultTypeInternal _S_ROOMCHAT_default_instance_;
class S_ROOMENTER;
struct S_ROOMENTERDefaultTypeInternal;
extern S_ROOMENTERDefaultTypeInternal _S_ROOMENTER_default_instance_;
class S_ROOMSTART;
struct S_ROOMSTARTDefaultTypeInternal;
extern S_ROOMSTARTDefaultTypeInternal _S_ROOMSTART_default_instance_;
class S_ROOMUPDATE;
struct S_ROOMUPDATEDefaultTypeInternal;
extern S_ROOMUPDATEDefaultTypeInternal _S_ROOMUPDATE_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_BOMB* Arena::CreateMaybeMessage<::Protocol::C_BOMB>(Arena*);
template<> ::Protocol::C_CHANNELCHAT* Arena::CreateMaybeMessage<::Protocol::C_CHANNELCHAT>(Arena*);
template<> ::Protocol::C_CHANNELCHOICE* Arena::CreateMaybeMessage<::Protocol::C_CHANNELCHOICE>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MAKEROOM* Arena::CreateMaybeMessage<::Protocol::C_MAKEROOM>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_ROOMCHAT* Arena::CreateMaybeMessage<::Protocol::C_ROOMCHAT>(Arena*);
template<> ::Protocol::C_ROOMENTER* Arena::CreateMaybeMessage<::Protocol::C_ROOMENTER>(Arena*);
template<> ::Protocol::C_ROOMLEAVE* Arena::CreateMaybeMessage<::Protocol::C_ROOMLEAVE>(Arena*);
template<> ::Protocol::C_ROOMREADY* Arena::CreateMaybeMessage<::Protocol::C_ROOMREADY>(Arena*);
template<> ::Protocol::C_ROOMSTART* Arena::CreateMaybeMessage<::Protocol::C_ROOMSTART>(Arena*);
template<> ::Protocol::S_BOMB* Arena::CreateMaybeMessage<::Protocol::S_BOMB>(Arena*);
template<> ::Protocol::S_BOMBEND* Arena::CreateMaybeMessage<::Protocol::S_BOMBEND>(Arena*);
template<> ::Protocol::S_CHANNELCHAT* Arena::CreateMaybeMessage<::Protocol::S_CHANNELCHAT>(Arena*);
template<> ::Protocol::S_CHANNELCHOICE* Arena::CreateMaybeMessage<::Protocol::S_CHANNELCHOICE>(Arena*);
template<> ::Protocol::S_CHANNELUPDATE* Arena::CreateMaybeMessage<::Protocol::S_CHANNELUPDATE>(Arena*);
template<> ::Protocol::S_DEAD* Arena::CreateMaybeMessage<::Protocol::S_DEAD>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MAKEROOM* Arena::CreateMaybeMessage<::Protocol::S_MAKEROOM>(Arena*);
template<> ::Protocol::S_MOVE* Arena::CreateMaybeMessage<::Protocol::S_MOVE>(Arena*);
template<> ::Protocol::S_ROOMCHAT* Arena::CreateMaybeMessage<::Protocol::S_ROOMCHAT>(Arena*);
template<> ::Protocol::S_ROOMENTER* Arena::CreateMaybeMessage<::Protocol::S_ROOMENTER>(Arena*);
template<> ::Protocol::S_ROOMSTART* Arena::CreateMaybeMessage<::Protocol::S_ROOMSTART>(Arena*);
template<> ::Protocol::S_ROOMUPDATE* Arena::CreateMaybeMessage<::Protocol::S_ROOMUPDATE>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 2,
    kPlayerFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.PChannel channels = 2;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::Protocol::PChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PChannel >*
      mutable_channels();
  private:
  const ::Protocol::PChannel& _internal_channels(int index) const;
  ::Protocol::PChannel* _internal_add_channels();
  public:
  const ::Protocol::PChannel& channels(int index) const;
  ::Protocol::PChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PChannel >&
      channels() const;

  // .Protocol.PPlayer player = 3;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PPlayer& player() const;
  PROTOBUF_NODISCARD ::Protocol::PPlayer* release_player();
  ::Protocol::PPlayer* mutable_player();
  void set_allocated_player(::Protocol::PPlayer* player);
  private:
  const ::Protocol::PPlayer& _internal_player() const;
  ::Protocol::PPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PPlayer* player);
  ::Protocol::PPlayer* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PChannel > channels_;
  ::Protocol::PPlayer* player_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHANNELCHOICE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHANNELCHOICE) */ {
 public:
  inline C_CHANNELCHOICE() : C_CHANNELCHOICE(nullptr) {}
  ~C_CHANNELCHOICE() override;
  explicit PROTOBUF_CONSTEXPR C_CHANNELCHOICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHANNELCHOICE(const C_CHANNELCHOICE& from);
  C_CHANNELCHOICE(C_CHANNELCHOICE&& from) noexcept
    : C_CHANNELCHOICE() {
    *this = ::std::move(from);
  }

  inline C_CHANNELCHOICE& operator=(const C_CHANNELCHOICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHANNELCHOICE& operator=(C_CHANNELCHOICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHANNELCHOICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHANNELCHOICE* internal_default_instance() {
    return reinterpret_cast<const C_CHANNELCHOICE*>(
               &_C_CHANNELCHOICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CHANNELCHOICE& a, C_CHANNELCHOICE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHANNELCHOICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHANNELCHOICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHANNELCHOICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHANNELCHOICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHANNELCHOICE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHANNELCHOICE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHANNELCHOICE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHANNELCHOICE";
  }
  protected:
  explicit C_CHANNELCHOICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // int32 channelId = 1;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHANNELCHOICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHANNELCHOICE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHANNELCHOICE) */ {
 public:
  inline S_CHANNELCHOICE() : S_CHANNELCHOICE(nullptr) {}
  ~S_CHANNELCHOICE() override;
  explicit PROTOBUF_CONSTEXPR S_CHANNELCHOICE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHANNELCHOICE(const S_CHANNELCHOICE& from);
  S_CHANNELCHOICE(S_CHANNELCHOICE&& from) noexcept
    : S_CHANNELCHOICE() {
    *this = ::std::move(from);
  }

  inline S_CHANNELCHOICE& operator=(const S_CHANNELCHOICE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHANNELCHOICE& operator=(S_CHANNELCHOICE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHANNELCHOICE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHANNELCHOICE* internal_default_instance() {
    return reinterpret_cast<const S_CHANNELCHOICE*>(
               &_S_CHANNELCHOICE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CHANNELCHOICE& a, S_CHANNELCHOICE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHANNELCHOICE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHANNELCHOICE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHANNELCHOICE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHANNELCHOICE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHANNELCHOICE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHANNELCHOICE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHANNELCHOICE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHANNELCHOICE";
  }
  protected:
  explicit S_CHANNELCHOICE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated .Protocol.PRoom rooms = 3;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::Protocol::PRoom* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >*
      mutable_rooms();
  private:
  const ::Protocol::PRoom& _internal_rooms(int index) const;
  ::Protocol::PRoom* _internal_add_rooms();
  public:
  const ::Protocol::PRoom& rooms(int index) const;
  ::Protocol::PRoom* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >&
      rooms() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 channelId = 2;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHANNELCHOICE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom > rooms_;
  bool success_;
  int32_t channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHANNELCHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHANNELCHAT) */ {
 public:
  inline C_CHANNELCHAT() : C_CHANNELCHAT(nullptr) {}
  ~C_CHANNELCHAT() override;
  explicit PROTOBUF_CONSTEXPR C_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHANNELCHAT(const C_CHANNELCHAT& from);
  C_CHANNELCHAT(C_CHANNELCHAT&& from) noexcept
    : C_CHANNELCHAT() {
    *this = ::std::move(from);
  }

  inline C_CHANNELCHAT& operator=(const C_CHANNELCHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHANNELCHAT& operator=(C_CHANNELCHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHANNELCHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHANNELCHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHANNELCHAT*>(
               &_C_CHANNELCHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_CHANNELCHAT& a, C_CHANNELCHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHANNELCHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHANNELCHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHANNELCHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHANNELCHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHANNELCHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHANNELCHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHANNELCHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHANNELCHAT";
  }
  protected:
  explicit C_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 1,
  };
  // string chat = 1;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHANNELCHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHANNELCHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHANNELCHAT) */ {
 public:
  inline S_CHANNELCHAT() : S_CHANNELCHAT(nullptr) {}
  ~S_CHANNELCHAT() override;
  explicit PROTOBUF_CONSTEXPR S_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHANNELCHAT(const S_CHANNELCHAT& from);
  S_CHANNELCHAT(S_CHANNELCHAT&& from) noexcept
    : S_CHANNELCHAT() {
    *this = ::std::move(from);
  }

  inline S_CHANNELCHAT& operator=(const S_CHANNELCHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHANNELCHAT& operator=(S_CHANNELCHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHANNELCHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHANNELCHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHANNELCHAT*>(
               &_S_CHANNELCHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHANNELCHAT& a, S_CHANNELCHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHANNELCHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHANNELCHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHANNELCHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHANNELCHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHANNELCHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHANNELCHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHANNELCHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHANNELCHAT";
  }
  protected:
  explicit S_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChatFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string chat = 2;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHANNELCHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MAKEROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MAKEROOM) */ {
 public:
  inline C_MAKEROOM() : C_MAKEROOM(nullptr) {}
  ~C_MAKEROOM() override;
  explicit PROTOBUF_CONSTEXPR C_MAKEROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MAKEROOM(const C_MAKEROOM& from);
  C_MAKEROOM(C_MAKEROOM&& from) noexcept
    : C_MAKEROOM() {
    *this = ::std::move(from);
  }

  inline C_MAKEROOM& operator=(const C_MAKEROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MAKEROOM& operator=(C_MAKEROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MAKEROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MAKEROOM* internal_default_instance() {
    return reinterpret_cast<const C_MAKEROOM*>(
               &_C_MAKEROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_MAKEROOM& a, C_MAKEROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MAKEROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MAKEROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MAKEROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MAKEROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MAKEROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_MAKEROOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MAKEROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MAKEROOM";
  }
  protected:
  explicit C_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MAKEROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MAKEROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MAKEROOM) */ {
 public:
  inline S_MAKEROOM() : S_MAKEROOM(nullptr) {}
  ~S_MAKEROOM() override;
  explicit PROTOBUF_CONSTEXPR S_MAKEROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MAKEROOM(const S_MAKEROOM& from);
  S_MAKEROOM(S_MAKEROOM&& from) noexcept
    : S_MAKEROOM() {
    *this = ::std::move(from);
  }

  inline S_MAKEROOM& operator=(const S_MAKEROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MAKEROOM& operator=(S_MAKEROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MAKEROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MAKEROOM* internal_default_instance() {
    return reinterpret_cast<const S_MAKEROOM*>(
               &_S_MAKEROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_MAKEROOM& a, S_MAKEROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MAKEROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MAKEROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MAKEROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MAKEROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MAKEROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_MAKEROOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MAKEROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MAKEROOM";
  }
  protected:
  explicit S_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.PRoom room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::PRoom& room() const;
  PROTOBUF_NODISCARD ::Protocol::PRoom* release_room();
  ::Protocol::PRoom* mutable_room();
  void set_allocated_room(::Protocol::PRoom* room);
  private:
  const ::Protocol::PRoom& _internal_room() const;
  ::Protocol::PRoom* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::PRoom* room);
  ::Protocol::PRoom* unsafe_arena_release_room();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MAKEROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PRoom* room_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHANNELUPDATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHANNELUPDATE) */ {
 public:
  inline S_CHANNELUPDATE() : S_CHANNELUPDATE(nullptr) {}
  ~S_CHANNELUPDATE() override;
  explicit PROTOBUF_CONSTEXPR S_CHANNELUPDATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHANNELUPDATE(const S_CHANNELUPDATE& from);
  S_CHANNELUPDATE(S_CHANNELUPDATE&& from) noexcept
    : S_CHANNELUPDATE() {
    *this = ::std::move(from);
  }

  inline S_CHANNELUPDATE& operator=(const S_CHANNELUPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHANNELUPDATE& operator=(S_CHANNELUPDATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHANNELUPDATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHANNELUPDATE* internal_default_instance() {
    return reinterpret_cast<const S_CHANNELUPDATE*>(
               &_S_CHANNELUPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_CHANNELUPDATE& a, S_CHANNELUPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHANNELUPDATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHANNELUPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHANNELUPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHANNELUPDATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHANNELUPDATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHANNELUPDATE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHANNELUPDATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHANNELUPDATE";
  }
  protected:
  explicit S_CHANNELUPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .Protocol.PRoom rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::Protocol::PRoom* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >*
      mutable_rooms();
  private:
  const ::Protocol::PRoom& _internal_rooms(int index) const;
  ::Protocol::PRoom* _internal_add_rooms();
  public:
  const ::Protocol::PRoom& rooms(int index) const;
  ::Protocol::PRoom* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >&
      rooms() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_CHANNELUPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom > rooms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOMENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOMENTER) */ {
 public:
  inline C_ROOMENTER() : C_ROOMENTER(nullptr) {}
  ~C_ROOMENTER() override;
  explicit PROTOBUF_CONSTEXPR C_ROOMENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOMENTER(const C_ROOMENTER& from);
  C_ROOMENTER(C_ROOMENTER&& from) noexcept
    : C_ROOMENTER() {
    *this = ::std::move(from);
  }

  inline C_ROOMENTER& operator=(const C_ROOMENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOMENTER& operator=(C_ROOMENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOMENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOMENTER* internal_default_instance() {
    return reinterpret_cast<const C_ROOMENTER*>(
               &_C_ROOMENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_ROOMENTER& a, C_ROOMENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOMENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOMENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOMENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOMENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOMENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_ROOMENTER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOMENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOMENTER";
  }
  protected:
  explicit C_ROOMENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // int32 roomId = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOMENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t roomid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOMENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOMENTER) */ {
 public:
  inline S_ROOMENTER() : S_ROOMENTER(nullptr) {}
  ~S_ROOMENTER() override;
  explicit PROTOBUF_CONSTEXPR S_ROOMENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOMENTER(const S_ROOMENTER& from);
  S_ROOMENTER(S_ROOMENTER&& from) noexcept
    : S_ROOMENTER() {
    *this = ::std::move(from);
  }

  inline S_ROOMENTER& operator=(const S_ROOMENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOMENTER& operator=(S_ROOMENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOMENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOMENTER* internal_default_instance() {
    return reinterpret_cast<const S_ROOMENTER*>(
               &_S_ROOMENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_ROOMENTER& a, S_ROOMENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOMENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOMENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOMENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOMENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOMENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_ROOMENTER& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOMENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOMENTER";
  }
  protected:
  explicit S_ROOMENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.PRoom room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::PRoom& room() const;
  PROTOBUF_NODISCARD ::Protocol::PRoom* release_room();
  ::Protocol::PRoom* mutable_room();
  void set_allocated_room(::Protocol::PRoom* room);
  private:
  const ::Protocol::PRoom& _internal_room() const;
  ::Protocol::PRoom* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::PRoom* room);
  ::Protocol::PRoom* unsafe_arena_release_room();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOMENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PRoom* room_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOMLEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_ROOMLEAVE) */ {
 public:
  inline C_ROOMLEAVE() : C_ROOMLEAVE(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_ROOMLEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOMLEAVE(const C_ROOMLEAVE& from);
  C_ROOMLEAVE(C_ROOMLEAVE&& from) noexcept
    : C_ROOMLEAVE() {
    *this = ::std::move(from);
  }

  inline C_ROOMLEAVE& operator=(const C_ROOMLEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOMLEAVE& operator=(C_ROOMLEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOMLEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOMLEAVE* internal_default_instance() {
    return reinterpret_cast<const C_ROOMLEAVE*>(
               &_C_ROOMLEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_ROOMLEAVE& a, C_ROOMLEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOMLEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOMLEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOMLEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOMLEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_ROOMLEAVE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_ROOMLEAVE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOMLEAVE";
  }
  protected:
  explicit C_ROOMLEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOMLEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOMUPDATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOMUPDATE) */ {
 public:
  inline S_ROOMUPDATE() : S_ROOMUPDATE(nullptr) {}
  ~S_ROOMUPDATE() override;
  explicit PROTOBUF_CONSTEXPR S_ROOMUPDATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOMUPDATE(const S_ROOMUPDATE& from);
  S_ROOMUPDATE(S_ROOMUPDATE&& from) noexcept
    : S_ROOMUPDATE() {
    *this = ::std::move(from);
  }

  inline S_ROOMUPDATE& operator=(const S_ROOMUPDATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOMUPDATE& operator=(S_ROOMUPDATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOMUPDATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOMUPDATE* internal_default_instance() {
    return reinterpret_cast<const S_ROOMUPDATE*>(
               &_S_ROOMUPDATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_ROOMUPDATE& a, S_ROOMUPDATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOMUPDATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOMUPDATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOMUPDATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOMUPDATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOMUPDATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_ROOMUPDATE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOMUPDATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOMUPDATE";
  }
  protected:
  explicit S_ROOMUPDATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomFieldNumber = 1,
  };
  // .Protocol.PRoom room = 1;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::PRoom& room() const;
  PROTOBUF_NODISCARD ::Protocol::PRoom* release_room();
  ::Protocol::PRoom* mutable_room();
  void set_allocated_room(::Protocol::PRoom* room);
  private:
  const ::Protocol::PRoom& _internal_room() const;
  ::Protocol::PRoom* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::PRoom* room);
  ::Protocol::PRoom* unsafe_arena_release_room();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOMUPDATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PRoom* room_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOMREADY final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_ROOMREADY) */ {
 public:
  inline C_ROOMREADY() : C_ROOMREADY(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_ROOMREADY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOMREADY(const C_ROOMREADY& from);
  C_ROOMREADY(C_ROOMREADY&& from) noexcept
    : C_ROOMREADY() {
    *this = ::std::move(from);
  }

  inline C_ROOMREADY& operator=(const C_ROOMREADY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOMREADY& operator=(C_ROOMREADY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOMREADY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOMREADY* internal_default_instance() {
    return reinterpret_cast<const C_ROOMREADY*>(
               &_C_ROOMREADY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C_ROOMREADY& a, C_ROOMREADY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOMREADY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOMREADY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOMREADY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOMREADY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_ROOMREADY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_ROOMREADY& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOMREADY";
  }
  protected:
  explicit C_ROOMREADY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOMREADY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOMCHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOMCHAT) */ {
 public:
  inline C_ROOMCHAT() : C_ROOMCHAT(nullptr) {}
  ~C_ROOMCHAT() override;
  explicit PROTOBUF_CONSTEXPR C_ROOMCHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOMCHAT(const C_ROOMCHAT& from);
  C_ROOMCHAT(C_ROOMCHAT&& from) noexcept
    : C_ROOMCHAT() {
    *this = ::std::move(from);
  }

  inline C_ROOMCHAT& operator=(const C_ROOMCHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOMCHAT& operator=(C_ROOMCHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOMCHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOMCHAT* internal_default_instance() {
    return reinterpret_cast<const C_ROOMCHAT*>(
               &_C_ROOMCHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_ROOMCHAT& a, C_ROOMCHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOMCHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOMCHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOMCHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOMCHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOMCHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_ROOMCHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOMCHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOMCHAT";
  }
  protected:
  explicit C_ROOMCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOMCHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOMCHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOMCHAT) */ {
 public:
  inline S_ROOMCHAT() : S_ROOMCHAT(nullptr) {}
  ~S_ROOMCHAT() override;
  explicit PROTOBUF_CONSTEXPR S_ROOMCHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOMCHAT(const S_ROOMCHAT& from);
  S_ROOMCHAT(S_ROOMCHAT&& from) noexcept
    : S_ROOMCHAT() {
    *this = ::std::move(from);
  }

  inline S_ROOMCHAT& operator=(const S_ROOMCHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOMCHAT& operator=(S_ROOMCHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOMCHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOMCHAT* internal_default_instance() {
    return reinterpret_cast<const S_ROOMCHAT*>(
               &_S_ROOMCHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_ROOMCHAT& a, S_ROOMCHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOMCHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOMCHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOMCHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOMCHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOMCHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_ROOMCHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOMCHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOMCHAT";
  }
  protected:
  explicit S_ROOMCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .Protocol.PPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PPlayer& player() const;
  PROTOBUF_NODISCARD ::Protocol::PPlayer* release_player();
  ::Protocol::PPlayer* mutable_player();
  void set_allocated_player(::Protocol::PPlayer* player);
  private:
  const ::Protocol::PPlayer& _internal_player() const;
  ::Protocol::PPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PPlayer* player);
  ::Protocol::PPlayer* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOMCHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::Protocol::PPlayer* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOMSTART final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_ROOMSTART) */ {
 public:
  inline C_ROOMSTART() : C_ROOMSTART(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_ROOMSTART(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOMSTART(const C_ROOMSTART& from);
  C_ROOMSTART(C_ROOMSTART&& from) noexcept
    : C_ROOMSTART() {
    *this = ::std::move(from);
  }

  inline C_ROOMSTART& operator=(const C_ROOMSTART& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOMSTART& operator=(C_ROOMSTART&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOMSTART& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOMSTART* internal_default_instance() {
    return reinterpret_cast<const C_ROOMSTART*>(
               &_C_ROOMSTART_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_ROOMSTART& a, C_ROOMSTART& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOMSTART* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOMSTART* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOMSTART* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOMSTART>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_ROOMSTART& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_ROOMSTART& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOMSTART";
  }
  protected:
  explicit C_ROOMSTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOMSTART)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOMSTART final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOMSTART) */ {
 public:
  inline S_ROOMSTART() : S_ROOMSTART(nullptr) {}
  ~S_ROOMSTART() override;
  explicit PROTOBUF_CONSTEXPR S_ROOMSTART(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOMSTART(const S_ROOMSTART& from);
  S_ROOMSTART(S_ROOMSTART&& from) noexcept
    : S_ROOMSTART() {
    *this = ::std::move(from);
  }

  inline S_ROOMSTART& operator=(const S_ROOMSTART& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOMSTART& operator=(S_ROOMSTART&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOMSTART& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOMSTART* internal_default_instance() {
    return reinterpret_cast<const S_ROOMSTART*>(
               &_S_ROOMSTART_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_ROOMSTART& a, S_ROOMSTART& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOMSTART* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOMSTART* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOMSTART* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOMSTART>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOMSTART& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_ROOMSTART& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOMSTART* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOMSTART";
  }
  protected:
  explicit S_ROOMSTART(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnFieldNumber = 3,
    kRoomFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.PRoomStart spawn = 3;
  int spawn_size() const;
  private:
  int _internal_spawn_size() const;
  public:
  void clear_spawn();
  ::Protocol::PRoomStart* mutable_spawn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoomStart >*
      mutable_spawn();
  private:
  const ::Protocol::PRoomStart& _internal_spawn(int index) const;
  ::Protocol::PRoomStart* _internal_add_spawn();
  public:
  const ::Protocol::PRoomStart& spawn(int index) const;
  ::Protocol::PRoomStart* add_spawn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoomStart >&
      spawn() const;

  // .Protocol.PRoom room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::PRoom& room() const;
  PROTOBUF_NODISCARD ::Protocol::PRoom* release_room();
  ::Protocol::PRoom* mutable_room();
  void set_allocated_room(::Protocol::PRoom* room);
  private:
  const ::Protocol::PRoom& _internal_room() const;
  ::Protocol::PRoom* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::PRoom* room);
  ::Protocol::PRoom* unsafe_arena_release_room();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOMSTART)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoomStart > spawn_;
  ::Protocol::PRoom* room_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_MOVE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionInfoFieldNumber = 1,
  };
  // .Protocol.PPositionInfo positionInfo = 1;
  bool has_positioninfo() const;
  private:
  bool _internal_has_positioninfo() const;
  public:
  void clear_positioninfo();
  const ::Protocol::PPositionInfo& positioninfo() const;
  PROTOBUF_NODISCARD ::Protocol::PPositionInfo* release_positioninfo();
  ::Protocol::PPositionInfo* mutable_positioninfo();
  void set_allocated_positioninfo(::Protocol::PPositionInfo* positioninfo);
  private:
  const ::Protocol::PPositionInfo& _internal_positioninfo() const;
  ::Protocol::PPositionInfo* _internal_mutable_positioninfo();
  public:
  void unsafe_arena_set_allocated_positioninfo(
      ::Protocol::PPositionInfo* positioninfo);
  ::Protocol::PPositionInfo* unsafe_arena_release_positioninfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PPositionInfo* positioninfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_MOVE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kPositionInfoFieldNumber = 3,
    kForceFieldNumber = 1,
  };
  // .Protocol.PPlayer player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PPlayer& player() const;
  PROTOBUF_NODISCARD ::Protocol::PPlayer* release_player();
  ::Protocol::PPlayer* mutable_player();
  void set_allocated_player(::Protocol::PPlayer* player);
  private:
  const ::Protocol::PPlayer& _internal_player() const;
  ::Protocol::PPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PPlayer* player);
  ::Protocol::PPlayer* unsafe_arena_release_player();

  // .Protocol.PPositionInfo positionInfo = 3;
  bool has_positioninfo() const;
  private:
  bool _internal_has_positioninfo() const;
  public:
  void clear_positioninfo();
  const ::Protocol::PPositionInfo& positioninfo() const;
  PROTOBUF_NODISCARD ::Protocol::PPositionInfo* release_positioninfo();
  ::Protocol::PPositionInfo* mutable_positioninfo();
  void set_allocated_positioninfo(::Protocol::PPositionInfo* positioninfo);
  private:
  const ::Protocol::PPositionInfo& _internal_positioninfo() const;
  ::Protocol::PPositionInfo* _internal_mutable_positioninfo();
  public:
  void unsafe_arena_set_allocated_positioninfo(
      ::Protocol::PPositionInfo* positioninfo);
  ::Protocol::PPositionInfo* unsafe_arena_release_positioninfo();

  // bool force = 1;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PPlayer* player_;
  ::Protocol::PPositionInfo* positioninfo_;
  bool force_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_BOMB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_BOMB) */ {
 public:
  inline C_BOMB() : C_BOMB(nullptr) {}
  ~C_BOMB() override;
  explicit PROTOBUF_CONSTEXPR C_BOMB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_BOMB(const C_BOMB& from);
  C_BOMB(C_BOMB&& from) noexcept
    : C_BOMB() {
    *this = ::std::move(from);
  }

  inline C_BOMB& operator=(const C_BOMB& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BOMB& operator=(C_BOMB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_BOMB& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_BOMB* internal_default_instance() {
    return reinterpret_cast<const C_BOMB*>(
               &_C_BOMB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_BOMB& a, C_BOMB& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BOMB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BOMB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_BOMB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_BOMB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_BOMB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_BOMB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BOMB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_BOMB";
  }
  protected:
  explicit C_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosInfoFieldNumber = 1,
  };
  // .Protocol.PPositionInfo posInfo = 1;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::Protocol::PPositionInfo& posinfo() const;
  PROTOBUF_NODISCARD ::Protocol::PPositionInfo* release_posinfo();
  ::Protocol::PPositionInfo* mutable_posinfo();
  void set_allocated_posinfo(::Protocol::PPositionInfo* posinfo);
  private:
  const ::Protocol::PPositionInfo& _internal_posinfo() const;
  ::Protocol::PPositionInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::Protocol::PPositionInfo* posinfo);
  ::Protocol::PPositionInfo* unsafe_arena_release_posinfo();

  // @@protoc_insertion_point(class_scope:Protocol.C_BOMB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PPositionInfo* posinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_BOMB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BOMB) */ {
 public:
  inline S_BOMB() : S_BOMB(nullptr) {}
  ~S_BOMB() override;
  explicit PROTOBUF_CONSTEXPR S_BOMB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BOMB(const S_BOMB& from);
  S_BOMB(S_BOMB&& from) noexcept
    : S_BOMB() {
    *this = ::std::move(from);
  }

  inline S_BOMB& operator=(const S_BOMB& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BOMB& operator=(S_BOMB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BOMB& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BOMB* internal_default_instance() {
    return reinterpret_cast<const S_BOMB*>(
               &_S_BOMB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_BOMB& a, S_BOMB& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BOMB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BOMB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BOMB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BOMB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BOMB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_BOMB& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BOMB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BOMB";
  }
  protected:
  explicit S_BOMB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kCellposFieldNumber = 2,
  };
  // .Protocol.PPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PPlayer& player() const;
  PROTOBUF_NODISCARD ::Protocol::PPlayer* release_player();
  ::Protocol::PPlayer* mutable_player();
  void set_allocated_player(::Protocol::PPlayer* player);
  private:
  const ::Protocol::PPlayer& _internal_player() const;
  ::Protocol::PPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PPlayer* player);
  ::Protocol::PPlayer* unsafe_arena_release_player();

  // .Protocol.PCellPos cellpos = 2;
  bool has_cellpos() const;
  private:
  bool _internal_has_cellpos() const;
  public:
  void clear_cellpos();
  const ::Protocol::PCellPos& cellpos() const;
  PROTOBUF_NODISCARD ::Protocol::PCellPos* release_cellpos();
  ::Protocol::PCellPos* mutable_cellpos();
  void set_allocated_cellpos(::Protocol::PCellPos* cellpos);
  private:
  const ::Protocol::PCellPos& _internal_cellpos() const;
  ::Protocol::PCellPos* _internal_mutable_cellpos();
  public:
  void unsafe_arena_set_allocated_cellpos(
      ::Protocol::PCellPos* cellpos);
  ::Protocol::PCellPos* unsafe_arena_release_cellpos();

  // @@protoc_insertion_point(class_scope:Protocol.S_BOMB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PPlayer* player_;
  ::Protocol::PCellPos* cellpos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_BOMBEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_BOMBEND) */ {
 public:
  inline S_BOMBEND() : S_BOMBEND(nullptr) {}
  ~S_BOMBEND() override;
  explicit PROTOBUF_CONSTEXPR S_BOMBEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_BOMBEND(const S_BOMBEND& from);
  S_BOMBEND(S_BOMBEND&& from) noexcept
    : S_BOMBEND() {
    *this = ::std::move(from);
  }

  inline S_BOMBEND& operator=(const S_BOMBEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_BOMBEND& operator=(S_BOMBEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_BOMBEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_BOMBEND* internal_default_instance() {
    return reinterpret_cast<const S_BOMBEND*>(
               &_S_BOMBEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_BOMBEND& a, S_BOMBEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_BOMBEND* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_BOMBEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_BOMBEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_BOMBEND>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_BOMBEND& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_BOMBEND& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_BOMBEND* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_BOMBEND";
  }
  protected:
  explicit S_BOMBEND(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellPosesFieldNumber = 2,
    kTrapPlayersFieldNumber = 3,
    kPlayerFieldNumber = 1,
  };
  // repeated .Protocol.PCellPos cellPoses = 2;
  int cellposes_size() const;
  private:
  int _internal_cellposes_size() const;
  public:
  void clear_cellposes();
  ::Protocol::PCellPos* mutable_cellposes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PCellPos >*
      mutable_cellposes();
  private:
  const ::Protocol::PCellPos& _internal_cellposes(int index) const;
  ::Protocol::PCellPos* _internal_add_cellposes();
  public:
  const ::Protocol::PCellPos& cellposes(int index) const;
  ::Protocol::PCellPos* add_cellposes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PCellPos >&
      cellposes() const;

  // repeated .Protocol.PPlayer trapPlayers = 3;
  int trapplayers_size() const;
  private:
  int _internal_trapplayers_size() const;
  public:
  void clear_trapplayers();
  ::Protocol::PPlayer* mutable_trapplayers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PPlayer >*
      mutable_trapplayers();
  private:
  const ::Protocol::PPlayer& _internal_trapplayers(int index) const;
  ::Protocol::PPlayer* _internal_add_trapplayers();
  public:
  const ::Protocol::PPlayer& trapplayers(int index) const;
  ::Protocol::PPlayer* add_trapplayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PPlayer >&
      trapplayers() const;

  // .Protocol.PPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PPlayer& player() const;
  PROTOBUF_NODISCARD ::Protocol::PPlayer* release_player();
  ::Protocol::PPlayer* mutable_player();
  void set_allocated_player(::Protocol::PPlayer* player);
  private:
  const ::Protocol::PPlayer& _internal_player() const;
  ::Protocol::PPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PPlayer* player);
  ::Protocol::PPlayer* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:Protocol.S_BOMBEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PCellPos > cellposes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PPlayer > trapplayers_;
  ::Protocol::PPlayer* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DEAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DEAD) */ {
 public:
  inline S_DEAD() : S_DEAD(nullptr) {}
  ~S_DEAD() override;
  explicit PROTOBUF_CONSTEXPR S_DEAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DEAD(const S_DEAD& from);
  S_DEAD(S_DEAD&& from) noexcept
    : S_DEAD() {
    *this = ::std::move(from);
  }

  inline S_DEAD& operator=(const S_DEAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DEAD& operator=(S_DEAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DEAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DEAD* internal_default_instance() {
    return reinterpret_cast<const S_DEAD*>(
               &_S_DEAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_DEAD& a, S_DEAD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DEAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DEAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DEAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DEAD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DEAD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_DEAD& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DEAD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DEAD";
  }
  protected:
  explicit S_DEAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kPosInfoFieldNumber = 2,
  };
  // .Protocol.PPlayer player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::PPlayer& player() const;
  PROTOBUF_NODISCARD ::Protocol::PPlayer* release_player();
  ::Protocol::PPlayer* mutable_player();
  void set_allocated_player(::Protocol::PPlayer* player);
  private:
  const ::Protocol::PPlayer& _internal_player() const;
  ::Protocol::PPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::PPlayer* player);
  ::Protocol::PPlayer* unsafe_arena_release_player();

  // .Protocol.PPositionInfo posInfo = 2;
  bool has_posinfo() const;
  private:
  bool _internal_has_posinfo() const;
  public:
  void clear_posinfo();
  const ::Protocol::PPositionInfo& posinfo() const;
  PROTOBUF_NODISCARD ::Protocol::PPositionInfo* release_posinfo();
  ::Protocol::PPositionInfo* mutable_posinfo();
  void set_allocated_posinfo(::Protocol::PPositionInfo* posinfo);
  private:
  const ::Protocol::PPositionInfo& _internal_posinfo() const;
  ::Protocol::PPositionInfo* _internal_mutable_posinfo();
  public:
  void unsafe_arena_set_allocated_posinfo(
      ::Protocol::PPositionInfo* posinfo);
  ::Protocol::PPositionInfo* unsafe_arena_release_posinfo();

  // @@protoc_insertion_point(class_scope:Protocol.S_DEAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::PPlayer* player_;
  ::Protocol::PPositionInfo* posinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// string id = 1;
inline void C_LOGIN::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.id)
}
inline std::string* C_LOGIN::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.id)
  return _s;
}
inline const std::string& C_LOGIN::_internal_id() const {
  return id_.Get();
}
inline void C_LOGIN::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.id)
  return id_.Release();
}
inline void C_LOGIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.id)
}

// string pw = 2;
inline void C_LOGIN::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.pw)
}
inline std::string* C_LOGIN::mutable_pw() {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.pw)
  return _s;
}
inline const std::string& C_LOGIN::_internal_pw() const {
  return pw_.Get();
}
inline void C_LOGIN::_internal_set_pw(const std::string& value) {
  
  pw_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_pw() {
  
  return pw_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.pw)
  return pw_.Release();
}
inline void C_LOGIN::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pw_.IsDefault()) {
    pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.pw)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// repeated .Protocol.PChannel channels = 2;
inline int S_LOGIN::_internal_channels_size() const {
  return channels_.size();
}
inline int S_LOGIN::channels_size() const {
  return _internal_channels_size();
}
inline ::Protocol::PChannel* S_LOGIN::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PChannel >*
S_LOGIN::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LOGIN.channels)
  return &channels_;
}
inline const ::Protocol::PChannel& S_LOGIN::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::Protocol::PChannel& S_LOGIN::channels(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.channels)
  return _internal_channels(index);
}
inline ::Protocol::PChannel* S_LOGIN::_internal_add_channels() {
  return channels_.Add();
}
inline ::Protocol::PChannel* S_LOGIN::add_channels() {
  ::Protocol::PChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:Protocol.S_LOGIN.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PChannel >&
S_LOGIN::channels() const {
  // @@protoc_insertion_point(field_list:Protocol.S_LOGIN.channels)
  return channels_;
}

// .Protocol.PPlayer player = 3;
inline bool S_LOGIN::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_LOGIN::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PPlayer& S_LOGIN::_internal_player() const {
  const ::Protocol::PPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPlayer&>(
      ::Protocol::_PPlayer_default_instance_);
}
inline const ::Protocol::PPlayer& S_LOGIN::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.player)
  return _internal_player();
}
inline void S_LOGIN::unsafe_arena_set_allocated_player(
    ::Protocol::PPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.player)
}
inline ::Protocol::PPlayer* S_LOGIN::release_player() {
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPlayer* S_LOGIN::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.player)
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::PPlayer* S_LOGIN::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPlayer>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::PPlayer* S_LOGIN::mutable_player() {
  ::Protocol::PPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.player)
  return _msg;
}
inline void S_LOGIN::set_allocated_player(::Protocol::PPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.player)
}

// -------------------------------------------------------------------

// C_CHANNELCHOICE

// int32 channelId = 1;
inline void C_CHANNELCHOICE::clear_channelid() {
  channelid_ = 0;
}
inline int32_t C_CHANNELCHOICE::_internal_channelid() const {
  return channelid_;
}
inline int32_t C_CHANNELCHOICE::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHOICE.channelId)
  return _internal_channelid();
}
inline void C_CHANNELCHOICE::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void C_CHANNELCHOICE::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHOICE.channelId)
}

// -------------------------------------------------------------------

// S_CHANNELCHOICE

// bool success = 1;
inline void S_CHANNELCHOICE::clear_success() {
  success_ = false;
}
inline bool S_CHANNELCHOICE::_internal_success() const {
  return success_;
}
inline bool S_CHANNELCHOICE::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHOICE.success)
  return _internal_success();
}
inline void S_CHANNELCHOICE::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_CHANNELCHOICE::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHOICE.success)
}

// int32 channelId = 2;
inline void S_CHANNELCHOICE::clear_channelid() {
  channelid_ = 0;
}
inline int32_t S_CHANNELCHOICE::_internal_channelid() const {
  return channelid_;
}
inline int32_t S_CHANNELCHOICE::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHOICE.channelId)
  return _internal_channelid();
}
inline void S_CHANNELCHOICE::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void S_CHANNELCHOICE::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHOICE.channelId)
}

// repeated .Protocol.PRoom rooms = 3;
inline int S_CHANNELCHOICE::_internal_rooms_size() const {
  return rooms_.size();
}
inline int S_CHANNELCHOICE::rooms_size() const {
  return _internal_rooms_size();
}
inline ::Protocol::PRoom* S_CHANNELCHOICE::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELCHOICE.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >*
S_CHANNELCHOICE::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CHANNELCHOICE.rooms)
  return &rooms_;
}
inline const ::Protocol::PRoom& S_CHANNELCHOICE::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::Protocol::PRoom& S_CHANNELCHOICE::rooms(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHOICE.rooms)
  return _internal_rooms(index);
}
inline ::Protocol::PRoom* S_CHANNELCHOICE::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::Protocol::PRoom* S_CHANNELCHOICE::add_rooms() {
  ::Protocol::PRoom* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:Protocol.S_CHANNELCHOICE.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >&
S_CHANNELCHOICE::rooms() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CHANNELCHOICE.rooms)
  return rooms_;
}

// -------------------------------------------------------------------

// C_CHANNELCHAT

// string chat = 1;
inline void C_CHANNELCHAT::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& C_CHANNELCHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHANNELCHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHAT.chat)
}
inline std::string* C_CHANNELCHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHANNELCHAT.chat)
  return _s;
}
inline const std::string& C_CHANNELCHAT::_internal_chat() const {
  return chat_.Get();
}
inline void C_CHANNELCHAT::_internal_set_chat(const std::string& value) {
  
  chat_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHANNELCHAT::_internal_mutable_chat() {
  
  return chat_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHANNELCHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHANNELCHAT.chat)
  return chat_.Release();
}
inline void C_CHANNELCHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_.IsDefault()) {
    chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHANNELCHAT.chat)
}

// -------------------------------------------------------------------

// S_CHANNELCHAT

// string name = 1;
inline void S_CHANNELCHAT::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& S_CHANNELCHAT::name() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHAT.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHANNELCHAT::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHAT.name)
}
inline std::string* S_CHANNELCHAT::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELCHAT.name)
  return _s;
}
inline const std::string& S_CHANNELCHAT::_internal_name() const {
  return name_.Get();
}
inline void S_CHANNELCHAT::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHANNELCHAT.name)
  return name_.Release();
}
inline void S_CHANNELCHAT::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHANNELCHAT.name)
}

// string chat = 2;
inline void S_CHANNELCHAT::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& S_CHANNELCHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHANNELCHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHAT.chat)
}
inline std::string* S_CHANNELCHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELCHAT.chat)
  return _s;
}
inline const std::string& S_CHANNELCHAT::_internal_chat() const {
  return chat_.Get();
}
inline void S_CHANNELCHAT::_internal_set_chat(const std::string& value) {
  
  chat_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::_internal_mutable_chat() {
  
  return chat_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHANNELCHAT.chat)
  return chat_.Release();
}
inline void S_CHANNELCHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_.IsDefault()) {
    chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHANNELCHAT.chat)
}

// -------------------------------------------------------------------

// C_MAKEROOM

// string roomName = 1;
inline void C_MAKEROOM::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& C_MAKEROOM::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEROOM.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MAKEROOM::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEROOM.roomName)
}
inline std::string* C_MAKEROOM::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MAKEROOM.roomName)
  return _s;
}
inline const std::string& C_MAKEROOM::_internal_roomname() const {
  return roomname_.Get();
}
inline void C_MAKEROOM::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_MAKEROOM::_internal_mutable_roomname() {
  
  return roomname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_MAKEROOM::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_MAKEROOM.roomName)
  return roomname_.Release();
}
inline void C_MAKEROOM::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(roomname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault()) {
    roomname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MAKEROOM.roomName)
}

// -------------------------------------------------------------------

// S_MAKEROOM

// bool success = 1;
inline void S_MAKEROOM::clear_success() {
  success_ = false;
}
inline bool S_MAKEROOM::_internal_success() const {
  return success_;
}
inline bool S_MAKEROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MAKEROOM.success)
  return _internal_success();
}
inline void S_MAKEROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_MAKEROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MAKEROOM.success)
}

// .Protocol.PRoom room = 2;
inline bool S_MAKEROOM::_internal_has_room() const {
  return this != internal_default_instance() && room_ != nullptr;
}
inline bool S_MAKEROOM::has_room() const {
  return _internal_has_room();
}
inline const ::Protocol::PRoom& S_MAKEROOM::_internal_room() const {
  const ::Protocol::PRoom* p = room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PRoom&>(
      ::Protocol::_PRoom_default_instance_);
}
inline const ::Protocol::PRoom& S_MAKEROOM::room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MAKEROOM.room)
  return _internal_room();
}
inline void S_MAKEROOM::unsafe_arena_set_allocated_room(
    ::Protocol::PRoom* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MAKEROOM.room)
}
inline ::Protocol::PRoom* S_MAKEROOM::release_room() {
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PRoom* S_MAKEROOM::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.S_MAKEROOM.room)
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
  return temp;
}
inline ::Protocol::PRoom* S_MAKEROOM::_internal_mutable_room() {
  
  if (room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PRoom>(GetArenaForAllocation());
    room_ = p;
  }
  return room_;
}
inline ::Protocol::PRoom* S_MAKEROOM::mutable_room() {
  ::Protocol::PRoom* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MAKEROOM.room)
  return _msg;
}
inline void S_MAKEROOM::set_allocated_room(::Protocol::PRoom* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MAKEROOM.room)
}

// -------------------------------------------------------------------

// S_CHANNELUPDATE

// repeated .Protocol.PRoom rooms = 1;
inline int S_CHANNELUPDATE::_internal_rooms_size() const {
  return rooms_.size();
}
inline int S_CHANNELUPDATE::rooms_size() const {
  return _internal_rooms_size();
}
inline ::Protocol::PRoom* S_CHANNELUPDATE::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELUPDATE.rooms)
  return rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >*
S_CHANNELUPDATE::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CHANNELUPDATE.rooms)
  return &rooms_;
}
inline const ::Protocol::PRoom& S_CHANNELUPDATE::_internal_rooms(int index) const {
  return rooms_.Get(index);
}
inline const ::Protocol::PRoom& S_CHANNELUPDATE::rooms(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELUPDATE.rooms)
  return _internal_rooms(index);
}
inline ::Protocol::PRoom* S_CHANNELUPDATE::_internal_add_rooms() {
  return rooms_.Add();
}
inline ::Protocol::PRoom* S_CHANNELUPDATE::add_rooms() {
  ::Protocol::PRoom* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:Protocol.S_CHANNELUPDATE.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoom >&
S_CHANNELUPDATE::rooms() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CHANNELUPDATE.rooms)
  return rooms_;
}

// -------------------------------------------------------------------

// C_ROOMENTER

// int32 roomId = 1;
inline void C_ROOMENTER::clear_roomid() {
  roomid_ = 0;
}
inline int32_t C_ROOMENTER::_internal_roomid() const {
  return roomid_;
}
inline int32_t C_ROOMENTER::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOMENTER.roomId)
  return _internal_roomid();
}
inline void C_ROOMENTER::_internal_set_roomid(int32_t value) {
  
  roomid_ = value;
}
inline void C_ROOMENTER::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOMENTER.roomId)
}

// -------------------------------------------------------------------

// S_ROOMENTER

// bool success = 1;
inline void S_ROOMENTER::clear_success() {
  success_ = false;
}
inline bool S_ROOMENTER::_internal_success() const {
  return success_;
}
inline bool S_ROOMENTER::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMENTER.success)
  return _internal_success();
}
inline void S_ROOMENTER::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ROOMENTER::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOMENTER.success)
}

// .Protocol.PRoom room = 2;
inline bool S_ROOMENTER::_internal_has_room() const {
  return this != internal_default_instance() && room_ != nullptr;
}
inline bool S_ROOMENTER::has_room() const {
  return _internal_has_room();
}
inline const ::Protocol::PRoom& S_ROOMENTER::_internal_room() const {
  const ::Protocol::PRoom* p = room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PRoom&>(
      ::Protocol::_PRoom_default_instance_);
}
inline const ::Protocol::PRoom& S_ROOMENTER::room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMENTER.room)
  return _internal_room();
}
inline void S_ROOMENTER::unsafe_arena_set_allocated_room(
    ::Protocol::PRoom* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOMENTER.room)
}
inline ::Protocol::PRoom* S_ROOMENTER::release_room() {
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PRoom* S_ROOMENTER::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOMENTER.room)
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
  return temp;
}
inline ::Protocol::PRoom* S_ROOMENTER::_internal_mutable_room() {
  
  if (room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PRoom>(GetArenaForAllocation());
    room_ = p;
  }
  return room_;
}
inline ::Protocol::PRoom* S_ROOMENTER::mutable_room() {
  ::Protocol::PRoom* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOMENTER.room)
  return _msg;
}
inline void S_ROOMENTER::set_allocated_room(::Protocol::PRoom* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOMENTER.room)
}

// -------------------------------------------------------------------

// C_ROOMLEAVE

// -------------------------------------------------------------------

// S_ROOMUPDATE

// .Protocol.PRoom room = 1;
inline bool S_ROOMUPDATE::_internal_has_room() const {
  return this != internal_default_instance() && room_ != nullptr;
}
inline bool S_ROOMUPDATE::has_room() const {
  return _internal_has_room();
}
inline const ::Protocol::PRoom& S_ROOMUPDATE::_internal_room() const {
  const ::Protocol::PRoom* p = room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PRoom&>(
      ::Protocol::_PRoom_default_instance_);
}
inline const ::Protocol::PRoom& S_ROOMUPDATE::room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMUPDATE.room)
  return _internal_room();
}
inline void S_ROOMUPDATE::unsafe_arena_set_allocated_room(
    ::Protocol::PRoom* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOMUPDATE.room)
}
inline ::Protocol::PRoom* S_ROOMUPDATE::release_room() {
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PRoom* S_ROOMUPDATE::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOMUPDATE.room)
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
  return temp;
}
inline ::Protocol::PRoom* S_ROOMUPDATE::_internal_mutable_room() {
  
  if (room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PRoom>(GetArenaForAllocation());
    room_ = p;
  }
  return room_;
}
inline ::Protocol::PRoom* S_ROOMUPDATE::mutable_room() {
  ::Protocol::PRoom* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOMUPDATE.room)
  return _msg;
}
inline void S_ROOMUPDATE::set_allocated_room(::Protocol::PRoom* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOMUPDATE.room)
}

// -------------------------------------------------------------------

// C_ROOMREADY

// -------------------------------------------------------------------

// C_ROOMCHAT

// string msg = 1;
inline void C_ROOMCHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_ROOMCHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOMCHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOMCHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOMCHAT.msg)
}
inline std::string* C_ROOMCHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOMCHAT.msg)
  return _s;
}
inline const std::string& C_ROOMCHAT::_internal_msg() const {
  return msg_.Get();
}
inline void C_ROOMCHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ROOMCHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ROOMCHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOMCHAT.msg)
  return msg_.Release();
}
inline void C_ROOMCHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOMCHAT.msg)
}

// -------------------------------------------------------------------

// S_ROOMCHAT

// .Protocol.PPlayer player = 1;
inline bool S_ROOMCHAT::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_ROOMCHAT::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PPlayer& S_ROOMCHAT::_internal_player() const {
  const ::Protocol::PPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPlayer&>(
      ::Protocol::_PPlayer_default_instance_);
}
inline const ::Protocol::PPlayer& S_ROOMCHAT::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMCHAT.player)
  return _internal_player();
}
inline void S_ROOMCHAT::unsafe_arena_set_allocated_player(
    ::Protocol::PPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOMCHAT.player)
}
inline ::Protocol::PPlayer* S_ROOMCHAT::release_player() {
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPlayer* S_ROOMCHAT::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOMCHAT.player)
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::PPlayer* S_ROOMCHAT::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPlayer>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::PPlayer* S_ROOMCHAT::mutable_player() {
  ::Protocol::PPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOMCHAT.player)
  return _msg;
}
inline void S_ROOMCHAT::set_allocated_player(::Protocol::PPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOMCHAT.player)
}

// string msg = 2;
inline void S_ROOMCHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_ROOMCHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMCHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ROOMCHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ROOMCHAT.msg)
}
inline std::string* S_ROOMCHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOMCHAT.msg)
  return _s;
}
inline const std::string& S_ROOMCHAT::_internal_msg() const {
  return msg_.Get();
}
inline void S_ROOMCHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ROOMCHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ROOMCHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOMCHAT.msg)
  return msg_.Release();
}
inline void S_ROOMCHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault()) {
    msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOMCHAT.msg)
}

// -------------------------------------------------------------------

// C_ROOMSTART

// -------------------------------------------------------------------

// S_ROOMSTART

// bool success = 1;
inline void S_ROOMSTART::clear_success() {
  success_ = false;
}
inline bool S_ROOMSTART::_internal_success() const {
  return success_;
}
inline bool S_ROOMSTART::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMSTART.success)
  return _internal_success();
}
inline void S_ROOMSTART::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ROOMSTART::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOMSTART.success)
}

// .Protocol.PRoom room = 2;
inline bool S_ROOMSTART::_internal_has_room() const {
  return this != internal_default_instance() && room_ != nullptr;
}
inline bool S_ROOMSTART::has_room() const {
  return _internal_has_room();
}
inline const ::Protocol::PRoom& S_ROOMSTART::_internal_room() const {
  const ::Protocol::PRoom* p = room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PRoom&>(
      ::Protocol::_PRoom_default_instance_);
}
inline const ::Protocol::PRoom& S_ROOMSTART::room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMSTART.room)
  return _internal_room();
}
inline void S_ROOMSTART::unsafe_arena_set_allocated_room(
    ::Protocol::PRoom* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOMSTART.room)
}
inline ::Protocol::PRoom* S_ROOMSTART::release_room() {
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PRoom* S_ROOMSTART::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOMSTART.room)
  
  ::Protocol::PRoom* temp = room_;
  room_ = nullptr;
  return temp;
}
inline ::Protocol::PRoom* S_ROOMSTART::_internal_mutable_room() {
  
  if (room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PRoom>(GetArenaForAllocation());
    room_ = p;
  }
  return room_;
}
inline ::Protocol::PRoom* S_ROOMSTART::mutable_room() {
  ::Protocol::PRoom* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOMSTART.room)
  return _msg;
}
inline void S_ROOMSTART::set_allocated_room(::Protocol::PRoom* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOMSTART.room)
}

// repeated .Protocol.PRoomStart spawn = 3;
inline int S_ROOMSTART::_internal_spawn_size() const {
  return spawn_.size();
}
inline int S_ROOMSTART::spawn_size() const {
  return _internal_spawn_size();
}
inline ::Protocol::PRoomStart* S_ROOMSTART::mutable_spawn(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOMSTART.spawn)
  return spawn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoomStart >*
S_ROOMSTART::mutable_spawn() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ROOMSTART.spawn)
  return &spawn_;
}
inline const ::Protocol::PRoomStart& S_ROOMSTART::_internal_spawn(int index) const {
  return spawn_.Get(index);
}
inline const ::Protocol::PRoomStart& S_ROOMSTART::spawn(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOMSTART.spawn)
  return _internal_spawn(index);
}
inline ::Protocol::PRoomStart* S_ROOMSTART::_internal_add_spawn() {
  return spawn_.Add();
}
inline ::Protocol::PRoomStart* S_ROOMSTART::add_spawn() {
  ::Protocol::PRoomStart* _add = _internal_add_spawn();
  // @@protoc_insertion_point(field_add:Protocol.S_ROOMSTART.spawn)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PRoomStart >&
S_ROOMSTART::spawn() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ROOMSTART.spawn)
  return spawn_;
}

// -------------------------------------------------------------------

// C_MOVE

// .Protocol.PPositionInfo positionInfo = 1;
inline bool C_MOVE::_internal_has_positioninfo() const {
  return this != internal_default_instance() && positioninfo_ != nullptr;
}
inline bool C_MOVE::has_positioninfo() const {
  return _internal_has_positioninfo();
}
inline const ::Protocol::PPositionInfo& C_MOVE::_internal_positioninfo() const {
  const ::Protocol::PPositionInfo* p = positioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPositionInfo&>(
      ::Protocol::_PPositionInfo_default_instance_);
}
inline const ::Protocol::PPositionInfo& C_MOVE::positioninfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.positionInfo)
  return _internal_positioninfo();
}
inline void C_MOVE::unsafe_arena_set_allocated_positioninfo(
    ::Protocol::PPositionInfo* positioninfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positioninfo_);
  }
  positioninfo_ = positioninfo;
  if (positioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.positionInfo)
}
inline ::Protocol::PPositionInfo* C_MOVE::release_positioninfo() {
  
  ::Protocol::PPositionInfo* temp = positioninfo_;
  positioninfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPositionInfo* C_MOVE::unsafe_arena_release_positioninfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.positionInfo)
  
  ::Protocol::PPositionInfo* temp = positioninfo_;
  positioninfo_ = nullptr;
  return temp;
}
inline ::Protocol::PPositionInfo* C_MOVE::_internal_mutable_positioninfo() {
  
  if (positioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPositionInfo>(GetArenaForAllocation());
    positioninfo_ = p;
  }
  return positioninfo_;
}
inline ::Protocol::PPositionInfo* C_MOVE::mutable_positioninfo() {
  ::Protocol::PPositionInfo* _msg = _internal_mutable_positioninfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.positionInfo)
  return _msg;
}
inline void C_MOVE::set_allocated_positioninfo(::Protocol::PPositionInfo* positioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positioninfo_);
  }
  if (positioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positioninfo));
    if (message_arena != submessage_arena) {
      positioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positioninfo, submessage_arena);
    }
    
  } else {
    
  }
  positioninfo_ = positioninfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.positionInfo)
}

// -------------------------------------------------------------------

// S_MOVE

// bool force = 1;
inline void S_MOVE::clear_force() {
  force_ = false;
}
inline bool S_MOVE::_internal_force() const {
  return force_;
}
inline bool S_MOVE::force() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.force)
  return _internal_force();
}
inline void S_MOVE::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void S_MOVE::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.force)
}

// .Protocol.PPlayer player = 2;
inline bool S_MOVE::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_MOVE::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PPlayer& S_MOVE::_internal_player() const {
  const ::Protocol::PPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPlayer&>(
      ::Protocol::_PPlayer_default_instance_);
}
inline const ::Protocol::PPlayer& S_MOVE::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.player)
  return _internal_player();
}
inline void S_MOVE::unsafe_arena_set_allocated_player(
    ::Protocol::PPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.player)
}
inline ::Protocol::PPlayer* S_MOVE::release_player() {
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPlayer* S_MOVE::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.player)
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::PPlayer* S_MOVE::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPlayer>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::PPlayer* S_MOVE::mutable_player() {
  ::Protocol::PPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.player)
  return _msg;
}
inline void S_MOVE::set_allocated_player(::Protocol::PPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.player)
}

// .Protocol.PPositionInfo positionInfo = 3;
inline bool S_MOVE::_internal_has_positioninfo() const {
  return this != internal_default_instance() && positioninfo_ != nullptr;
}
inline bool S_MOVE::has_positioninfo() const {
  return _internal_has_positioninfo();
}
inline const ::Protocol::PPositionInfo& S_MOVE::_internal_positioninfo() const {
  const ::Protocol::PPositionInfo* p = positioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPositionInfo&>(
      ::Protocol::_PPositionInfo_default_instance_);
}
inline const ::Protocol::PPositionInfo& S_MOVE::positioninfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.positionInfo)
  return _internal_positioninfo();
}
inline void S_MOVE::unsafe_arena_set_allocated_positioninfo(
    ::Protocol::PPositionInfo* positioninfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positioninfo_);
  }
  positioninfo_ = positioninfo;
  if (positioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.positionInfo)
}
inline ::Protocol::PPositionInfo* S_MOVE::release_positioninfo() {
  
  ::Protocol::PPositionInfo* temp = positioninfo_;
  positioninfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPositionInfo* S_MOVE::unsafe_arena_release_positioninfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.positionInfo)
  
  ::Protocol::PPositionInfo* temp = positioninfo_;
  positioninfo_ = nullptr;
  return temp;
}
inline ::Protocol::PPositionInfo* S_MOVE::_internal_mutable_positioninfo() {
  
  if (positioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPositionInfo>(GetArenaForAllocation());
    positioninfo_ = p;
  }
  return positioninfo_;
}
inline ::Protocol::PPositionInfo* S_MOVE::mutable_positioninfo() {
  ::Protocol::PPositionInfo* _msg = _internal_mutable_positioninfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.positionInfo)
  return _msg;
}
inline void S_MOVE::set_allocated_positioninfo(::Protocol::PPositionInfo* positioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(positioninfo_);
  }
  if (positioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positioninfo));
    if (message_arena != submessage_arena) {
      positioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positioninfo, submessage_arena);
    }
    
  } else {
    
  }
  positioninfo_ = positioninfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.positionInfo)
}

// -------------------------------------------------------------------

// C_BOMB

// .Protocol.PPositionInfo posInfo = 1;
inline bool C_BOMB::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool C_BOMB::has_posinfo() const {
  return _internal_has_posinfo();
}
inline const ::Protocol::PPositionInfo& C_BOMB::_internal_posinfo() const {
  const ::Protocol::PPositionInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPositionInfo&>(
      ::Protocol::_PPositionInfo_default_instance_);
}
inline const ::Protocol::PPositionInfo& C_BOMB::posinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.C_BOMB.posInfo)
  return _internal_posinfo();
}
inline void C_BOMB::unsafe_arena_set_allocated_posinfo(
    ::Protocol::PPositionInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_BOMB.posInfo)
}
inline ::Protocol::PPositionInfo* C_BOMB::release_posinfo() {
  
  ::Protocol::PPositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPositionInfo* C_BOMB::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:Protocol.C_BOMB.posInfo)
  
  ::Protocol::PPositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::Protocol::PPositionInfo* C_BOMB::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPositionInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::Protocol::PPositionInfo* C_BOMB::mutable_posinfo() {
  ::Protocol::PPositionInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.C_BOMB.posInfo)
  return _msg;
}
inline void C_BOMB::set_allocated_posinfo(::Protocol::PPositionInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo));
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_BOMB.posInfo)
}

// -------------------------------------------------------------------

// S_BOMB

// .Protocol.PPlayer player = 1;
inline bool S_BOMB::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_BOMB::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PPlayer& S_BOMB::_internal_player() const {
  const ::Protocol::PPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPlayer&>(
      ::Protocol::_PPlayer_default_instance_);
}
inline const ::Protocol::PPlayer& S_BOMB::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BOMB.player)
  return _internal_player();
}
inline void S_BOMB::unsafe_arena_set_allocated_player(
    ::Protocol::PPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BOMB.player)
}
inline ::Protocol::PPlayer* S_BOMB::release_player() {
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPlayer* S_BOMB::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_BOMB.player)
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::PPlayer* S_BOMB::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPlayer>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::PPlayer* S_BOMB::mutable_player() {
  ::Protocol::PPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BOMB.player)
  return _msg;
}
inline void S_BOMB::set_allocated_player(::Protocol::PPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BOMB.player)
}

// .Protocol.PCellPos cellpos = 2;
inline bool S_BOMB::_internal_has_cellpos() const {
  return this != internal_default_instance() && cellpos_ != nullptr;
}
inline bool S_BOMB::has_cellpos() const {
  return _internal_has_cellpos();
}
inline const ::Protocol::PCellPos& S_BOMB::_internal_cellpos() const {
  const ::Protocol::PCellPos* p = cellpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PCellPos&>(
      ::Protocol::_PCellPos_default_instance_);
}
inline const ::Protocol::PCellPos& S_BOMB::cellpos() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BOMB.cellpos)
  return _internal_cellpos();
}
inline void S_BOMB::unsafe_arena_set_allocated_cellpos(
    ::Protocol::PCellPos* cellpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellpos_);
  }
  cellpos_ = cellpos;
  if (cellpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BOMB.cellpos)
}
inline ::Protocol::PCellPos* S_BOMB::release_cellpos() {
  
  ::Protocol::PCellPos* temp = cellpos_;
  cellpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PCellPos* S_BOMB::unsafe_arena_release_cellpos() {
  // @@protoc_insertion_point(field_release:Protocol.S_BOMB.cellpos)
  
  ::Protocol::PCellPos* temp = cellpos_;
  cellpos_ = nullptr;
  return temp;
}
inline ::Protocol::PCellPos* S_BOMB::_internal_mutable_cellpos() {
  
  if (cellpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PCellPos>(GetArenaForAllocation());
    cellpos_ = p;
  }
  return cellpos_;
}
inline ::Protocol::PCellPos* S_BOMB::mutable_cellpos() {
  ::Protocol::PCellPos* _msg = _internal_mutable_cellpos();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BOMB.cellpos)
  return _msg;
}
inline void S_BOMB::set_allocated_cellpos(::Protocol::PCellPos* cellpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellpos_);
  }
  if (cellpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellpos));
    if (message_arena != submessage_arena) {
      cellpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellpos, submessage_arena);
    }
    
  } else {
    
  }
  cellpos_ = cellpos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BOMB.cellpos)
}

// -------------------------------------------------------------------

// S_BOMBEND

// .Protocol.PPlayer player = 1;
inline bool S_BOMBEND::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_BOMBEND::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PPlayer& S_BOMBEND::_internal_player() const {
  const ::Protocol::PPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPlayer&>(
      ::Protocol::_PPlayer_default_instance_);
}
inline const ::Protocol::PPlayer& S_BOMBEND::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_BOMBEND.player)
  return _internal_player();
}
inline void S_BOMBEND::unsafe_arena_set_allocated_player(
    ::Protocol::PPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_BOMBEND.player)
}
inline ::Protocol::PPlayer* S_BOMBEND::release_player() {
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPlayer* S_BOMBEND::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_BOMBEND.player)
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::PPlayer* S_BOMBEND::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPlayer>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::PPlayer* S_BOMBEND::mutable_player() {
  ::Protocol::PPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_BOMBEND.player)
  return _msg;
}
inline void S_BOMBEND::set_allocated_player(::Protocol::PPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_BOMBEND.player)
}

// repeated .Protocol.PCellPos cellPoses = 2;
inline int S_BOMBEND::_internal_cellposes_size() const {
  return cellposes_.size();
}
inline int S_BOMBEND::cellposes_size() const {
  return _internal_cellposes_size();
}
inline ::Protocol::PCellPos* S_BOMBEND::mutable_cellposes(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_BOMBEND.cellPoses)
  return cellposes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PCellPos >*
S_BOMBEND::mutable_cellposes() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_BOMBEND.cellPoses)
  return &cellposes_;
}
inline const ::Protocol::PCellPos& S_BOMBEND::_internal_cellposes(int index) const {
  return cellposes_.Get(index);
}
inline const ::Protocol::PCellPos& S_BOMBEND::cellposes(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_BOMBEND.cellPoses)
  return _internal_cellposes(index);
}
inline ::Protocol::PCellPos* S_BOMBEND::_internal_add_cellposes() {
  return cellposes_.Add();
}
inline ::Protocol::PCellPos* S_BOMBEND::add_cellposes() {
  ::Protocol::PCellPos* _add = _internal_add_cellposes();
  // @@protoc_insertion_point(field_add:Protocol.S_BOMBEND.cellPoses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PCellPos >&
S_BOMBEND::cellposes() const {
  // @@protoc_insertion_point(field_list:Protocol.S_BOMBEND.cellPoses)
  return cellposes_;
}

// repeated .Protocol.PPlayer trapPlayers = 3;
inline int S_BOMBEND::_internal_trapplayers_size() const {
  return trapplayers_.size();
}
inline int S_BOMBEND::trapplayers_size() const {
  return _internal_trapplayers_size();
}
inline ::Protocol::PPlayer* S_BOMBEND::mutable_trapplayers(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_BOMBEND.trapPlayers)
  return trapplayers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PPlayer >*
S_BOMBEND::mutable_trapplayers() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_BOMBEND.trapPlayers)
  return &trapplayers_;
}
inline const ::Protocol::PPlayer& S_BOMBEND::_internal_trapplayers(int index) const {
  return trapplayers_.Get(index);
}
inline const ::Protocol::PPlayer& S_BOMBEND::trapplayers(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_BOMBEND.trapPlayers)
  return _internal_trapplayers(index);
}
inline ::Protocol::PPlayer* S_BOMBEND::_internal_add_trapplayers() {
  return trapplayers_.Add();
}
inline ::Protocol::PPlayer* S_BOMBEND::add_trapplayers() {
  ::Protocol::PPlayer* _add = _internal_add_trapplayers();
  // @@protoc_insertion_point(field_add:Protocol.S_BOMBEND.trapPlayers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PPlayer >&
S_BOMBEND::trapplayers() const {
  // @@protoc_insertion_point(field_list:Protocol.S_BOMBEND.trapPlayers)
  return trapplayers_;
}

// -------------------------------------------------------------------

// S_DEAD

// .Protocol.PPlayer player = 1;
inline bool S_DEAD::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool S_DEAD::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::PPlayer& S_DEAD::_internal_player() const {
  const ::Protocol::PPlayer* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPlayer&>(
      ::Protocol::_PPlayer_default_instance_);
}
inline const ::Protocol::PPlayer& S_DEAD::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DEAD.player)
  return _internal_player();
}
inline void S_DEAD::unsafe_arena_set_allocated_player(
    ::Protocol::PPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DEAD.player)
}
inline ::Protocol::PPlayer* S_DEAD::release_player() {
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPlayer* S_DEAD::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_DEAD.player)
  
  ::Protocol::PPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::Protocol::PPlayer* S_DEAD::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPlayer>(GetArenaForAllocation());
    player_ = p;
  }
  return player_;
}
inline ::Protocol::PPlayer* S_DEAD::mutable_player() {
  ::Protocol::PPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_DEAD.player)
  return _msg;
}
inline void S_DEAD::set_allocated_player(::Protocol::PPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DEAD.player)
}

// .Protocol.PPositionInfo posInfo = 2;
inline bool S_DEAD::_internal_has_posinfo() const {
  return this != internal_default_instance() && posinfo_ != nullptr;
}
inline bool S_DEAD::has_posinfo() const {
  return _internal_has_posinfo();
}
inline const ::Protocol::PPositionInfo& S_DEAD::_internal_posinfo() const {
  const ::Protocol::PPositionInfo* p = posinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PPositionInfo&>(
      ::Protocol::_PPositionInfo_default_instance_);
}
inline const ::Protocol::PPositionInfo& S_DEAD::posinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DEAD.posInfo)
  return _internal_posinfo();
}
inline void S_DEAD::unsafe_arena_set_allocated_posinfo(
    ::Protocol::PPositionInfo* posinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  posinfo_ = posinfo;
  if (posinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DEAD.posInfo)
}
inline ::Protocol::PPositionInfo* S_DEAD::release_posinfo() {
  
  ::Protocol::PPositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PPositionInfo* S_DEAD::unsafe_arena_release_posinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_DEAD.posInfo)
  
  ::Protocol::PPositionInfo* temp = posinfo_;
  posinfo_ = nullptr;
  return temp;
}
inline ::Protocol::PPositionInfo* S_DEAD::_internal_mutable_posinfo() {
  
  if (posinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PPositionInfo>(GetArenaForAllocation());
    posinfo_ = p;
  }
  return posinfo_;
}
inline ::Protocol::PPositionInfo* S_DEAD::mutable_posinfo() {
  ::Protocol::PPositionInfo* _msg = _internal_mutable_posinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_DEAD.posInfo)
  return _msg;
}
inline void S_DEAD::set_allocated_posinfo(::Protocol::PPositionInfo* posinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo_);
  }
  if (posinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(posinfo));
    if (message_arena != submessage_arena) {
      posinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posinfo, submessage_arena);
    }
    
  } else {
    
  }
  posinfo_ = posinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DEAD.posInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
