// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_CHANNELCHAT;
struct C_CHANNELCHATDefaultTypeInternal;
extern C_CHANNELCHATDefaultTypeInternal _C_CHANNELCHAT_default_instance_;
class C_CHANNELCHOIC;
struct C_CHANNELCHOICDefaultTypeInternal;
extern C_CHANNELCHOICDefaultTypeInternal _C_CHANNELCHOIC_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MAKEROOM;
struct C_MAKEROOMDefaultTypeInternal;
extern C_MAKEROOMDefaultTypeInternal _C_MAKEROOM_default_instance_;
class S_CHANNELCHAT;
struct S_CHANNELCHATDefaultTypeInternal;
extern S_CHANNELCHATDefaultTypeInternal _S_CHANNELCHAT_default_instance_;
class S_CHANNELCHOIC;
struct S_CHANNELCHOICDefaultTypeInternal;
extern S_CHANNELCHOICDefaultTypeInternal _S_CHANNELCHOIC_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MAKEROOM;
struct S_MAKEROOMDefaultTypeInternal;
extern S_MAKEROOMDefaultTypeInternal _S_MAKEROOM_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CHANNELCHAT* Arena::CreateMaybeMessage<::Protocol::C_CHANNELCHAT>(Arena*);
template<> ::Protocol::C_CHANNELCHOIC* Arena::CreateMaybeMessage<::Protocol::C_CHANNELCHOIC>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MAKEROOM* Arena::CreateMaybeMessage<::Protocol::C_MAKEROOM>(Arena*);
template<> ::Protocol::S_CHANNELCHAT* Arena::CreateMaybeMessage<::Protocol::S_CHANNELCHAT>(Arena*);
template<> ::Protocol::S_CHANNELCHOIC* Arena::CreateMaybeMessage<::Protocol::S_CHANNELCHOIC>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MAKEROOM* Arena::CreateMaybeMessage<::Protocol::S_MAKEROOM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_NODISCARD std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_LOGIN& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelInfoFieldNumber = 2,
    kPlayerIdFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ChannelInfo channelInfo = 2;
  bool has_channelinfo() const;
  private:
  bool _internal_has_channelinfo() const;
  public:
  void clear_channelinfo();
  const ::Protocol::ChannelInfo& channelinfo() const;
  PROTOBUF_NODISCARD ::Protocol::ChannelInfo* release_channelinfo();
  ::Protocol::ChannelInfo* mutable_channelinfo();
  void set_allocated_channelinfo(::Protocol::ChannelInfo* channelinfo);
  private:
  const ::Protocol::ChannelInfo& _internal_channelinfo() const;
  ::Protocol::ChannelInfo* _internal_mutable_channelinfo();
  public:
  void unsafe_arena_set_allocated_channelinfo(
      ::Protocol::ChannelInfo* channelinfo);
  ::Protocol::ChannelInfo* unsafe_arena_release_channelinfo();

  // int64 playerId = 3;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ChannelInfo* channelinfo_;
  int64_t playerid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHANNELCHOIC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHANNELCHOIC) */ {
 public:
  inline C_CHANNELCHOIC() : C_CHANNELCHOIC(nullptr) {}
  ~C_CHANNELCHOIC() override;
  explicit PROTOBUF_CONSTEXPR C_CHANNELCHOIC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHANNELCHOIC(const C_CHANNELCHOIC& from);
  C_CHANNELCHOIC(C_CHANNELCHOIC&& from) noexcept
    : C_CHANNELCHOIC() {
    *this = ::std::move(from);
  }

  inline C_CHANNELCHOIC& operator=(const C_CHANNELCHOIC& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHANNELCHOIC& operator=(C_CHANNELCHOIC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHANNELCHOIC& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHANNELCHOIC* internal_default_instance() {
    return reinterpret_cast<const C_CHANNELCHOIC*>(
               &_C_CHANNELCHOIC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CHANNELCHOIC& a, C_CHANNELCHOIC& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHANNELCHOIC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHANNELCHOIC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHANNELCHOIC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHANNELCHOIC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHANNELCHOIC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHANNELCHOIC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHANNELCHOIC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHANNELCHOIC";
  }
  protected:
  explicit C_CHANNELCHOIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // int64 playerId = 2;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // int32 channelId = 1;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHANNELCHOIC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t playerid_;
  int32_t channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHANNELCHOIC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHANNELCHOIC) */ {
 public:
  inline S_CHANNELCHOIC() : S_CHANNELCHOIC(nullptr) {}
  ~S_CHANNELCHOIC() override;
  explicit PROTOBUF_CONSTEXPR S_CHANNELCHOIC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHANNELCHOIC(const S_CHANNELCHOIC& from);
  S_CHANNELCHOIC(S_CHANNELCHOIC&& from) noexcept
    : S_CHANNELCHOIC() {
    *this = ::std::move(from);
  }

  inline S_CHANNELCHOIC& operator=(const S_CHANNELCHOIC& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHANNELCHOIC& operator=(S_CHANNELCHOIC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHANNELCHOIC& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHANNELCHOIC* internal_default_instance() {
    return reinterpret_cast<const S_CHANNELCHOIC*>(
               &_S_CHANNELCHOIC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CHANNELCHOIC& a, S_CHANNELCHOIC& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHANNELCHOIC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHANNELCHOIC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHANNELCHOIC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHANNELCHOIC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHANNELCHOIC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHANNELCHOIC& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHANNELCHOIC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHANNELCHOIC";
  }
  protected:
  explicit S_CHANNELCHOIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomInfoFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // .Protocol.RoomInfo roomInfo = 3;
  bool has_roominfo() const;
  private:
  bool _internal_has_roominfo() const;
  public:
  void clear_roominfo();
  const ::Protocol::RoomInfo& roominfo() const;
  PROTOBUF_NODISCARD ::Protocol::RoomInfo* release_roominfo();
  ::Protocol::RoomInfo* mutable_roominfo();
  void set_allocated_roominfo(::Protocol::RoomInfo* roominfo);
  private:
  const ::Protocol::RoomInfo& _internal_roominfo() const;
  ::Protocol::RoomInfo* _internal_mutable_roominfo();
  public:
  void unsafe_arena_set_allocated_roominfo(
      ::Protocol::RoomInfo* roominfo);
  ::Protocol::RoomInfo* unsafe_arena_release_roominfo();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 channelId = 2;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHANNELCHOIC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::RoomInfo* roominfo_;
  bool success_;
  int32_t channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHANNELCHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHANNELCHAT) */ {
 public:
  inline C_CHANNELCHAT() : C_CHANNELCHAT(nullptr) {}
  ~C_CHANNELCHAT() override;
  explicit PROTOBUF_CONSTEXPR C_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHANNELCHAT(const C_CHANNELCHAT& from);
  C_CHANNELCHAT(C_CHANNELCHAT&& from) noexcept
    : C_CHANNELCHAT() {
    *this = ::std::move(from);
  }

  inline C_CHANNELCHAT& operator=(const C_CHANNELCHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHANNELCHAT& operator=(C_CHANNELCHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHANNELCHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHANNELCHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHANNELCHAT*>(
               &_C_CHANNELCHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_CHANNELCHAT& a, C_CHANNELCHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHANNELCHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHANNELCHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHANNELCHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHANNELCHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHANNELCHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CHANNELCHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHANNELCHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHANNELCHAT";
  }
  protected:
  explicit C_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string chat = 3;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // int32 channelId = 2;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHANNELCHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  int64_t playerid_;
  int32_t channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHANNELCHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHANNELCHAT) */ {
 public:
  inline S_CHANNELCHAT() : S_CHANNELCHAT(nullptr) {}
  ~S_CHANNELCHAT() override;
  explicit PROTOBUF_CONSTEXPR S_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHANNELCHAT(const S_CHANNELCHAT& from);
  S_CHANNELCHAT(S_CHANNELCHAT&& from) noexcept
    : S_CHANNELCHAT() {
    *this = ::std::move(from);
  }

  inline S_CHANNELCHAT& operator=(const S_CHANNELCHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHANNELCHAT& operator=(S_CHANNELCHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHANNELCHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHANNELCHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHANNELCHAT*>(
               &_S_CHANNELCHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHANNELCHAT& a, S_CHANNELCHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHANNELCHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHANNELCHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHANNELCHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHANNELCHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHANNELCHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CHANNELCHAT& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHANNELCHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHANNELCHAT";
  }
  protected:
  explicit S_CHANNELCHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChatFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string chat = 2;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHANNELCHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MAKEROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MAKEROOM) */ {
 public:
  inline C_MAKEROOM() : C_MAKEROOM(nullptr) {}
  ~C_MAKEROOM() override;
  explicit PROTOBUF_CONSTEXPR C_MAKEROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MAKEROOM(const C_MAKEROOM& from);
  C_MAKEROOM(C_MAKEROOM&& from) noexcept
    : C_MAKEROOM() {
    *this = ::std::move(from);
  }

  inline C_MAKEROOM& operator=(const C_MAKEROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MAKEROOM& operator=(C_MAKEROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MAKEROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MAKEROOM* internal_default_instance() {
    return reinterpret_cast<const C_MAKEROOM*>(
               &_C_MAKEROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_MAKEROOM& a, C_MAKEROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MAKEROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MAKEROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MAKEROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MAKEROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MAKEROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_MAKEROOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MAKEROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MAKEROOM";
  }
  protected:
  explicit C_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // int64 playerId = 2;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // int32 channelId = 3;
  void clear_channelid();
  int32_t channelid() const;
  void set_channelid(int32_t value);
  private:
  int32_t _internal_channelid() const;
  void _internal_set_channelid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MAKEROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  int64_t playerid_;
  int32_t channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MAKEROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MAKEROOM) */ {
 public:
  inline S_MAKEROOM() : S_MAKEROOM(nullptr) {}
  ~S_MAKEROOM() override;
  explicit PROTOBUF_CONSTEXPR S_MAKEROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MAKEROOM(const S_MAKEROOM& from);
  S_MAKEROOM(S_MAKEROOM&& from) noexcept
    : S_MAKEROOM() {
    *this = ::std::move(from);
  }

  inline S_MAKEROOM& operator=(const S_MAKEROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MAKEROOM& operator=(S_MAKEROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MAKEROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MAKEROOM* internal_default_instance() {
    return reinterpret_cast<const S_MAKEROOM*>(
               &_S_MAKEROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_MAKEROOM& a, S_MAKEROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MAKEROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MAKEROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MAKEROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MAKEROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MAKEROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_MAKEROOM& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MAKEROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MAKEROOM";
  }
  protected:
  explicit S_MAKEROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MAKEROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// string id = 1;
inline void C_LOGIN::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.id)
}
inline std::string* C_LOGIN::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.id)
  return _s;
}
inline const std::string& C_LOGIN::_internal_id() const {
  return id_.Get();
}
inline void C_LOGIN::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.id)
  return id_.Release();
}
inline void C_LOGIN::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.id)
}

// string pw = 2;
inline void C_LOGIN::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& C_LOGIN::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.pw)
}
inline std::string* C_LOGIN::mutable_pw() {
  std::string* _s = _internal_mutable_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.pw)
  return _s;
}
inline const std::string& C_LOGIN::_internal_pw() const {
  return pw_.Get();
}
inline void C_LOGIN::_internal_set_pw(const std::string& value) {
  
  pw_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_pw() {
  
  return pw_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.pw)
  return pw_.Release();
}
inline void C_LOGIN::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pw_.IsDefault()) {
    pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.pw)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// .Protocol.ChannelInfo channelInfo = 2;
inline bool S_LOGIN::_internal_has_channelinfo() const {
  return this != internal_default_instance() && channelinfo_ != nullptr;
}
inline bool S_LOGIN::has_channelinfo() const {
  return _internal_has_channelinfo();
}
inline const ::Protocol::ChannelInfo& S_LOGIN::_internal_channelinfo() const {
  const ::Protocol::ChannelInfo* p = channelinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ChannelInfo&>(
      ::Protocol::_ChannelInfo_default_instance_);
}
inline const ::Protocol::ChannelInfo& S_LOGIN::channelinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.channelInfo)
  return _internal_channelinfo();
}
inline void S_LOGIN::unsafe_arena_set_allocated_channelinfo(
    ::Protocol::ChannelInfo* channelinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channelinfo_);
  }
  channelinfo_ = channelinfo;
  if (channelinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.channelInfo)
}
inline ::Protocol::ChannelInfo* S_LOGIN::release_channelinfo() {
  
  ::Protocol::ChannelInfo* temp = channelinfo_;
  channelinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ChannelInfo* S_LOGIN::unsafe_arena_release_channelinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.channelInfo)
  
  ::Protocol::ChannelInfo* temp = channelinfo_;
  channelinfo_ = nullptr;
  return temp;
}
inline ::Protocol::ChannelInfo* S_LOGIN::_internal_mutable_channelinfo() {
  
  if (channelinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ChannelInfo>(GetArenaForAllocation());
    channelinfo_ = p;
  }
  return channelinfo_;
}
inline ::Protocol::ChannelInfo* S_LOGIN::mutable_channelinfo() {
  ::Protocol::ChannelInfo* _msg = _internal_mutable_channelinfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.channelInfo)
  return _msg;
}
inline void S_LOGIN::set_allocated_channelinfo(::Protocol::ChannelInfo* channelinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channelinfo_);
  }
  if (channelinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channelinfo));
    if (message_arena != submessage_arena) {
      channelinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channelinfo, submessage_arena);
    }
    
  } else {
    
  }
  channelinfo_ = channelinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.channelInfo)
}

// int64 playerId = 3;
inline void S_LOGIN::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t S_LOGIN::_internal_playerid() const {
  return playerid_;
}
inline int64_t S_LOGIN::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.playerId)
  return _internal_playerid();
}
inline void S_LOGIN::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void S_LOGIN::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.playerId)
}

// -------------------------------------------------------------------

// C_CHANNELCHOIC

// int32 channelId = 1;
inline void C_CHANNELCHOIC::clear_channelid() {
  channelid_ = 0;
}
inline int32_t C_CHANNELCHOIC::_internal_channelid() const {
  return channelid_;
}
inline int32_t C_CHANNELCHOIC::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHOIC.channelId)
  return _internal_channelid();
}
inline void C_CHANNELCHOIC::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void C_CHANNELCHOIC::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHOIC.channelId)
}

// int64 playerId = 2;
inline void C_CHANNELCHOIC::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t C_CHANNELCHOIC::_internal_playerid() const {
  return playerid_;
}
inline int64_t C_CHANNELCHOIC::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHOIC.playerId)
  return _internal_playerid();
}
inline void C_CHANNELCHOIC::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void C_CHANNELCHOIC::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHOIC.playerId)
}

// -------------------------------------------------------------------

// S_CHANNELCHOIC

// bool success = 1;
inline void S_CHANNELCHOIC::clear_success() {
  success_ = false;
}
inline bool S_CHANNELCHOIC::_internal_success() const {
  return success_;
}
inline bool S_CHANNELCHOIC::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHOIC.success)
  return _internal_success();
}
inline void S_CHANNELCHOIC::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_CHANNELCHOIC::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHOIC.success)
}

// int32 channelId = 2;
inline void S_CHANNELCHOIC::clear_channelid() {
  channelid_ = 0;
}
inline int32_t S_CHANNELCHOIC::_internal_channelid() const {
  return channelid_;
}
inline int32_t S_CHANNELCHOIC::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHOIC.channelId)
  return _internal_channelid();
}
inline void S_CHANNELCHOIC::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void S_CHANNELCHOIC::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHOIC.channelId)
}

// .Protocol.RoomInfo roomInfo = 3;
inline bool S_CHANNELCHOIC::_internal_has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != nullptr;
}
inline bool S_CHANNELCHOIC::has_roominfo() const {
  return _internal_has_roominfo();
}
inline const ::Protocol::RoomInfo& S_CHANNELCHOIC::_internal_roominfo() const {
  const ::Protocol::RoomInfo* p = roominfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_CHANNELCHOIC::roominfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHOIC.roomInfo)
  return _internal_roominfo();
}
inline void S_CHANNELCHOIC::unsafe_arena_set_allocated_roominfo(
    ::Protocol::RoomInfo* roominfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  roominfo_ = roominfo;
  if (roominfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CHANNELCHOIC.roomInfo)
}
inline ::Protocol::RoomInfo* S_CHANNELCHOIC::release_roominfo() {
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::RoomInfo* S_CHANNELCHOIC::unsafe_arena_release_roominfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHANNELCHOIC.roomInfo)
  
  ::Protocol::RoomInfo* temp = roominfo_;
  roominfo_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_CHANNELCHOIC::_internal_mutable_roominfo() {
  
  if (roominfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    roominfo_ = p;
  }
  return roominfo_;
}
inline ::Protocol::RoomInfo* S_CHANNELCHOIC::mutable_roominfo() {
  ::Protocol::RoomInfo* _msg = _internal_mutable_roominfo();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELCHOIC.roomInfo)
  return _msg;
}
inline void S_CHANNELCHOIC::set_allocated_roominfo(::Protocol::RoomInfo* roominfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo_);
  }
  if (roominfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roominfo));
    if (message_arena != submessage_arena) {
      roominfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHANNELCHOIC.roomInfo)
}

// -------------------------------------------------------------------

// C_CHANNELCHAT

// int64 playerId = 1;
inline void C_CHANNELCHAT::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t C_CHANNELCHAT::_internal_playerid() const {
  return playerid_;
}
inline int64_t C_CHANNELCHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHAT.playerId)
  return _internal_playerid();
}
inline void C_CHANNELCHAT::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void C_CHANNELCHAT::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHAT.playerId)
}

// int32 channelId = 2;
inline void C_CHANNELCHAT::clear_channelid() {
  channelid_ = 0;
}
inline int32_t C_CHANNELCHAT::_internal_channelid() const {
  return channelid_;
}
inline int32_t C_CHANNELCHAT::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHAT.channelId)
  return _internal_channelid();
}
inline void C_CHANNELCHAT::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void C_CHANNELCHAT::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHAT.channelId)
}

// string chat = 3;
inline void C_CHANNELCHAT::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& C_CHANNELCHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANNELCHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHANNELCHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHANNELCHAT.chat)
}
inline std::string* C_CHANNELCHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHANNELCHAT.chat)
  return _s;
}
inline const std::string& C_CHANNELCHAT::_internal_chat() const {
  return chat_.Get();
}
inline void C_CHANNELCHAT::_internal_set_chat(const std::string& value) {
  
  chat_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHANNELCHAT::_internal_mutable_chat() {
  
  return chat_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHANNELCHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHANNELCHAT.chat)
  return chat_.Release();
}
inline void C_CHANNELCHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_.IsDefault()) {
    chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHANNELCHAT.chat)
}

// -------------------------------------------------------------------

// S_CHANNELCHAT

// string name = 1;
inline void S_CHANNELCHAT::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& S_CHANNELCHAT::name() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHAT.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHANNELCHAT::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHAT.name)
}
inline std::string* S_CHANNELCHAT::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELCHAT.name)
  return _s;
}
inline const std::string& S_CHANNELCHAT::_internal_name() const {
  return name_.Get();
}
inline void S_CHANNELCHAT::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHANNELCHAT.name)
  return name_.Release();
}
inline void S_CHANNELCHAT::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHANNELCHAT.name)
}

// string chat = 2;
inline void S_CHANNELCHAT::clear_chat() {
  chat_.ClearToEmpty();
}
inline const std::string& S_CHANNELCHAT::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHANNELCHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHANNELCHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHANNELCHAT.chat)
}
inline std::string* S_CHANNELCHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHANNELCHAT.chat)
  return _s;
}
inline const std::string& S_CHANNELCHAT::_internal_chat() const {
  return chat_.Get();
}
inline void S_CHANNELCHAT::_internal_set_chat(const std::string& value) {
  
  chat_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::_internal_mutable_chat() {
  
  return chat_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHANNELCHAT::release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHANNELCHAT.chat)
  return chat_.Release();
}
inline void S_CHANNELCHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chat_.IsDefault()) {
    chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHANNELCHAT.chat)
}

// -------------------------------------------------------------------

// C_MAKEROOM

// string roomName = 1;
inline void C_MAKEROOM::clear_roomname() {
  roomname_.ClearToEmpty();
}
inline const std::string& C_MAKEROOM::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEROOM.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MAKEROOM::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 roomname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEROOM.roomName)
}
inline std::string* C_MAKEROOM::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MAKEROOM.roomName)
  return _s;
}
inline const std::string& C_MAKEROOM::_internal_roomname() const {
  return roomname_.Get();
}
inline void C_MAKEROOM::_internal_set_roomname(const std::string& value) {
  
  roomname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_MAKEROOM::_internal_mutable_roomname() {
  
  return roomname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_MAKEROOM::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_MAKEROOM.roomName)
  return roomname_.Release();
}
inline void C_MAKEROOM::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(roomname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (roomname_.IsDefault()) {
    roomname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MAKEROOM.roomName)
}

// int64 playerId = 2;
inline void C_MAKEROOM::clear_playerid() {
  playerid_ = int64_t{0};
}
inline int64_t C_MAKEROOM::_internal_playerid() const {
  return playerid_;
}
inline int64_t C_MAKEROOM::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEROOM.playerId)
  return _internal_playerid();
}
inline void C_MAKEROOM::_internal_set_playerid(int64_t value) {
  
  playerid_ = value;
}
inline void C_MAKEROOM::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEROOM.playerId)
}

// int32 channelId = 3;
inline void C_MAKEROOM::clear_channelid() {
  channelid_ = 0;
}
inline int32_t C_MAKEROOM::_internal_channelid() const {
  return channelid_;
}
inline int32_t C_MAKEROOM::channelid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MAKEROOM.channelId)
  return _internal_channelid();
}
inline void C_MAKEROOM::_internal_set_channelid(int32_t value) {
  
  channelid_ = value;
}
inline void C_MAKEROOM::set_channelid(int32_t value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MAKEROOM.channelId)
}

// -------------------------------------------------------------------

// S_MAKEROOM

// bool success = 1;
inline void S_MAKEROOM::clear_success() {
  success_ = false;
}
inline bool S_MAKEROOM::_internal_success() const {
  return success_;
}
inline bool S_MAKEROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MAKEROOM.success)
  return _internal_success();
}
inline void S_MAKEROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_MAKEROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MAKEROOM.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
